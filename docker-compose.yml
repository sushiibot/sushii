services:
  sushii_worker: &sushii_worker_base
    build:
      dockerfile: ./packages/sushii-worker/Dockerfile
      context: .
    logging:
      driver: "json-file"
      options:
        max-size: 10m
        max-file: "3"
        labels: "production_status,service_name"
    restart: unless-stopped
    depends_on:
      - discord_api_proxy
      - sushii_db
    environment:
      # Deployment
      # blue is default, and for now just 1 deployment green later
      - DEPLOYMENT_NAME=blue
      - OWNER_USER_ID=$OWNER_USER_ID
      - OWNER_CHANNEL_ID=$OWNER_CHANNEL_ID
      - DEPLOYMENT_EXEMPT_CHANNEL_IDS=167058919611564043

      # Base
      - NODE_ENV=development

      - LOG_LEVEL=debug
      - DISCORD_TOKEN=$DISCORD_TOKEN
      - APPLICATION_ID=$APPLICATION_ID

      # External dependencies
      - DATABASE_URL=postgres://sushii:sushii@sushii_db:5432/sushii
      - DISCORD_API_PROXY_URL=http://discord_api_proxy:8080/api
      - SUSHII_IMAGE_SERVER_URL=http://sushii-image-server:3000

      # Sentry
      - SENTRY_DSN=$SENTRY_DSN

      # Tracing
      - TRACING_EXPORTER_URL=http://jaeger:4318/v1/traces
      - TRACING_SAMPLE_PERCENTAGE=0.01

      # Notifications
      - NOTIFY_WEBHOOK_URL=$NOTIFY_WEBHOOK_URL
      - NOTIFY_WEBHOOK_USERNAME=$NOTIFY_WEBHOOK_USERNAME
    expose:
      - "8080" # Status
      - "9090" # Metrics
    networks:
      - sushii_net
      # - metrics
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      - "traefik.enable=false"
      - "logging=promtail"
      - "logging_jobname=sushii_worker"
      - "production_status=prod"
      - "service_name=sushii_worker"

      - "prometheus.scrape.enable=true"
      - "prometheus.scrape.port=9090"
  sushii_worker_green:
    <<: *sushii_worker_base
    environment:
      - DEPLOYMENT_NAME=green
      - NODE_ENV=development

      - LOG_LEVEL=debug
      - DISCORD_TOKEN=$DISCORD_TOKEN
      - APPLICATION_ID=193163942502072320
      - DEPLOYMENT_EXEMPT_CHANNEL_IDS=435581617088626709

      # External dependencies
      - DATABASE_URL=$DATABASE_URL
      - DISCORD_API_PROXY_URL=http://discord_api_proxy:8080/api
      - SUSHII_IMAGE_SERVER_URL=http://sushii-image-server:3000

      # Sentry
      - SENTRY_DSN=$SENTRY_DSN

      # Tracing
      - TRACING_EXPORTER_URL=http://jaeger:4318/v1/traces
      - TRACING_SAMPLE_PERCENTAGE=0.01

      # Notifications
      - NOTIFY_WEBHOOK_URL=$NOTIFY_WEBHOOK_URL
      - NOTIFY_WEBHOOK_USERNAME=$NOTIFY_WEBHOOK_USERNAME

  sushii_db:
    image: postgres:17-bookworm
    container_name: sushii_db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=sushii
      - POSTGRES_PASSWORD=sushii
      - POSTGRES_DB=sushii
    volumes:
      - ./db:/var/lib/postgresql/data
      # Seed script
      - ./packages/sushii-worker/drizzle/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - sushii_net

  discord_api_proxy:
    build:
      dockerfile: Dockerfile
      context: ./packages/api-proxy
    container_name: discord_api_proxy
    restart: unless-stopped
    expose:
      - "8080"
    networks:
      - sushii_net
    labels:
      - "traefik.enable=false"

  jaeger:
    image: jaegertracing/all-in-one
    restart: unless-stopped
    ports:
      # Localhost - only available via tunnel
      - "127.0.0.1:16686:16686" # The UI port
    expose:
      - "4317" # OTLP gRPC
      - "4318" # OTLP HTTP
    environment:
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - ~/docker/jaeger:/badger
    networks:
      - sushii_net

networks:
  web:
    external: true
    name: sushii-2_web
  sushii_net:
    external: true
    name: sushii-2_sushii_net
  metrics:
    external: true
    name: metrics
