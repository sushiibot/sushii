services:
  # Test database - isolated from dev/prod
  sushii_db_test:
    image: postgres:17-bookworm
    container_name: sushii_db_test
    environment:
      - POSTGRES_USER=sushii_test
      - POSTGRES_PASSWORD=sushii_test
      - POSTGRES_DB=sushii_test
    volumes:
      # Use init script to set up database schema
      - ./packages/sushii-worker/drizzle/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432" # Different port to avoid conflicts
    networks:
      - sushii_test_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sushii_test -d sushii_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Blue bot instance for testing
  sushii_worker_blue_test:
    build:
      dockerfile: ./packages/sushii-worker/Dockerfile
      context: .
    container_name: sushii_worker_blue_test
    restart: no
    depends_on:
      sushii_db_test:
        condition: service_healthy
    environment:
      # Deployment configuration
      - DEPLOYMENT_NAME=blue
      - NODE_ENV=test
      - LOG_LEVEL=info

      # Test Discord bot credentials (requires separate test bot)
      - DISCORD_TOKEN=${E2E_DISCORD_TOKEN}
      - APPLICATION_ID=${E2E_APPLICATION_ID}

      # Test database
      - DATABASE_URL=postgres://sushii_test:sushii_test@sushii_db_test:5432/sushii_test

      # Disable external services for testing
      - SENTRY_DSN=
      - TRACING_EXPORTER_URL=
      - DISCORD_API_PROXY_URL=
      - SUSHII_IMAGE_SERVER_URL=
      - NOTIFY_WEBHOOK_URL=

      # Test configuration
      - OWNER_USER_ID=${E2E_OWNER_USER_ID}
      - OWNER_CHANNEL_ID=${E2E_OWNER_CHANNEL_ID}
      - DEPLOYMENT_EXEMPT_CHANNEL_IDS=753749442695266375
      - E2E_WEBHOOK_URL=${E2E_WEBHOOK_URL}

      # At least 2 child processes for testing
      - MANUAL_SHARD_COUNT=2
      - SHARDS_PER_CLUSTER=1
    ports:
      - "8081:8080" # Health check port
      - "9091:9090" # Metrics port
    networks:
      - sushii_test_net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Green bot instance for testing
  sushii_worker_green_test:
    build:
      dockerfile: ./packages/sushii-worker/Dockerfile
      context: .
    container_name: sushii_worker_green_test
    restart: no
    depends_on:
      sushii_db_test:
        condition: service_healthy
    environment:
      # Deployment configuration
      - DEPLOYMENT_NAME=green
      - NODE_ENV=test
      - LOG_LEVEL=info

      # Test Discord bot credentials (same bot, different deployment)
      - DISCORD_TOKEN=${E2E_DISCORD_TOKEN}
      - APPLICATION_ID=${E2E_APPLICATION_ID}

      # Test database
      - DATABASE_URL=postgres://sushii_test:sushii_test@sushii_db_test:5432/sushii_test

      # Disable external services for testing
      - SENTRY_DSN=
      - TRACING_EXPORTER_URL=
      - DISCORD_API_PROXY_URL=
      - SUSHII_IMAGE_SERVER_URL=
      - NOTIFY_WEBHOOK_URL=

      # Test configuration
      - OWNER_USER_ID=${E2E_OWNER_USER_ID}
      - OWNER_CHANNEL_ID=${E2E_OWNER_CHANNEL_ID}
      - DEPLOYMENT_EXEMPT_CHANNEL_IDS=190254849244266498
      - E2E_WEBHOOK_URL=${E2E_WEBHOOK_URL}

      # At least 2 child processes for testing
      - MANUAL_SHARD_COUNT=2
      - SHARDS_PER_CLUSTER=1
    ports:
      - "8082:8080" # Health check port
      - "9092:9090" # Metrics port
    networks:
      - sushii_test_net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

networks:
  sushii_test_net:
    driver: bridge
