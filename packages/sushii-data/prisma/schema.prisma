generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "../zod-types"
  modelSuffix           = "Model"
  prismaJsonNullability = "true"
  relationModel         = "true"
  modelCase             = "PascalCase"
  useDecimalJs          = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ban {
  guildId BigInt  @map("guild_id")
  userId  BigInt  @map("user_id")
  reason  String?

  @@id([guildId, userId])
  @@index([guildId])
  @@index([userId])
  @@map("bans")
}

model BotStat {
  name      String
  category  String
  count     BigInt
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@id([name, category])
  @@index([category])
  @@map("bot_stats")
}

model CachedGuild {
  id        BigInt   @id
  name      String
  icon      String?
  splash    String?
  banner    String?
  features  String[]
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([features])
  @@map("cached_guilds")
}

model CachedUser {
  id            BigInt   @id
  avatarUrl     String   @map("avatar_url")
  name          String
  discriminator Int
  lastChecked   DateTime @map("last_checked") @db.Timestamp(6)

  @@map("cached_users")
}

model FeedItem {
  feedId String @map("feed_id")
  itemId String @map("item_id")

  @@id([feedId, itemId])
  @@map("feed_items")
}

model FeedSubscription {
  feedId      String  @map("feed_id")
  guildId     BigInt  @map("guild_id")
  channelId   BigInt  @map("channel_id")
  mentionRole BigInt? @map("mention_role")
  feeds       Feed    @relation(fields: [feedId], references: [feedId], onDelete: Cascade, onUpdate: NoAction, map: "fk_feed_subscription_feed_id")

  @@id([feedId, channelId])
  @@map("feed_subscriptions")
}

model Feed {
  feedId            String             @id @map("feed_id")
  metadata          Json?
  feedSubscriptions FeedSubscription[]

  @@map("feeds")
}

model GuildBan {
  guildId BigInt @map("guild_id")
  userId  BigInt @map("user_id")

  @@id([guildId, userId])
  @@index([userId])
  @@map("guild_bans")
}

model GuildConfig {
  id               BigInt   @id
  prefix           String?
  joinMsg          String?  @map("join_msg")
  joinMsgEnabled   Boolean  @default(true) @map("join_msg_enabled")
  joinReact        String?  @map("join_react")
  leaveMsg         String?  @map("leave_msg")
  leaveMsgEnabled  Boolean  @default(true) @map("leave_msg_enabled")
  msgChannel       BigInt?  @map("msg_channel")
  role_channel     BigInt?
  role_config      Json?
  role_enabled     Boolean  @default(true)
  inviteGuard      Boolean  @default(false) @map("invite_guard")
  logMsg           BigInt?  @map("log_msg")
  logMsgEnabled    Boolean  @default(true) @map("log_msg_enabled")
  logMod           BigInt?  @map("log_mod")
  logModEnabled    Boolean  @default(true) @map("log_mod_enabled")
  logMember        BigInt?  @map("log_member")
  logMemberEnabled Boolean  @default(true) @map("log_member_enabled")
  muteRole         BigInt?  @map("mute_role")
  muteDuration     BigInt?  @map("mute_duration")
  muteDmText       String?  @map("mute_dm_text")
  muteDmEnabled    Boolean  @default(true) @map("mute_dm_enabled")
  warnDmText       String?  @map("warn_dm_text")
  warnDmEnabled    Boolean  @default(true) @map("warn_dm_enabled")
  maxMention       Int?     @map("max_mention")
  disabledChannels BigInt[] @map("disabled_channels")
  data             Json     @default("{}")

  @@map("guild_configs")
}

model GuildFeed {
  guildId      BigInt  @map("guild_id")
  channelId    BigInt  @map("channel_id")
  mentionRole  BigInt? @map("mention_role")
  feedName     String  @map("feed_name")
  feedSource   String  @map("feed_source")
  feedHash     String  @map("feed_hash")
  feedMetadata Json    @map("feed_metadata")

  @@id([feedHash, channelId])
  @@index([guildId])
  @@map("guild_feeds")
}

model Message {
  messageId BigInt   @id @map("message_id")
  authorId  BigInt   @map("author_id")
  channelId BigInt   @map("channel_id")
  guildId   BigInt   @map("guild_id")
  created   DateTime @db.Timestamp(6)
  content   String
  msg       Json

  @@index([messageId], map: "message_id_idx")
  @@map("messages")
}

model ModLog {
  guildId     BigInt   @map("guild_id")
  caseId      BigInt   @map("case_id")
  action      String
  actionTime  DateTime @map("action_time") @db.Timestamp(6)
  pending     Boolean
  userId      BigInt   @map("user_id")
  userTag     String   @map("user_tag")
  executorId  BigInt?  @map("executor_id")
  reason      String?
  msgId       BigInt?  @map("msg_id")
  attachments String[]
  mutes       Mute[]

  @@id([guildId, caseId])
  @@map("mod_logs")
}

model Mute {
  guildId   BigInt    @map("guild_id")
  userId    BigInt    @map("user_id")
  startTime DateTime  @map("start_time") @db.Timestamp(6)
  endTime   DateTime? @map("end_time") @db.Timestamp(6)
  pending   Boolean   @default(false)
  caseId    BigInt?   @map("case_id")
  modLogs   ModLog?   @relation(fields: [guildId, caseId], references: [guildId, caseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_mod_action")

  @@id([guildId, userId])
  @@map("mutes")
}

model Notification {
  userId  BigInt @map("user_id")
  guildId BigInt @map("guild_id")
  keyword String

  @@id([userId, guildId, keyword])
  @@index([guildId], map: "notification_guild_id_idx")
  @@index([keyword], map: "notification_keyword_idx")
  @@map("notifications")
}

model Reminder {
  userId      BigInt   @map("user_id")
  description String
  setAt       DateTime @map("set_at") @db.Timestamp(6)
  expireAt    DateTime @map("expire_at") @db.Timestamp(6)

  @@id([userId, setAt])
  @@map("reminders")
}

model Tag {
  ownerId  BigInt   @map("owner_id")
  guildId  BigInt   @map("guild_id")
  tagName  String   @map("tag_name")
  content  String
  useCount BigInt   @map("use_count")
  created  DateTime @db.Timestamp(6)

  @@id([guildId, tagName])
  @@index([tagName], map: "tag_name_idx")
  @@map("tags")
}

model UserLevel {
  userId     BigInt   @map("user_id")
  guildId    BigInt   @map("guild_id")
  msgAllTime BigInt   @map("msg_all_time")
  msgMonth   BigInt   @map("msg_month")
  msgWeek    BigInt   @map("msg_week")
  msgDay     BigInt   @map("msg_day")
  lastMsg    DateTime @map("last_msg") @db.Timestamp(6)

  @@id([userId, guildId])
  @@map("user_levels")
}

model User {
  id             BigInt    @id
  isPatron       Boolean   @map("is_patron")
  patronEmoji    String?   @map("patron_emoji")
  rep            BigInt
  fishies        BigInt
  lastRep        DateTime? @map("last_rep") @db.Timestamp(6)
  lastFishies    DateTime? @map("last_fishies") @db.Timestamp(6)
  lastfmUsername String?   @map("lastfm_username")
  profileData    Json?     @map("profile_data")

  @@map("users")
}

model GuildRuleSetConfig {
  set_id          BigInt       @id
  enabled         Boolean
  config          Json         @db.Json
  created_at      DateTime     @default(now()) @db.Timestamptz(6)
  updated_at      DateTime     @default(now()) @db.Timestamptz(6)
  guild_rule_sets GuildRuleSet @relation(fields: [set_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([set_id])
  @@map("guild_rule_set_configs")
}

model GuildRuleSet {
  id                     BigInt              @id @default(autoincrement())
  guild_id               BigInt?
  name                   String
  description            String?
  enabled                Boolean             @default(true)
  editable               Boolean             @default(true)
  author                 BigInt?
  category               String?
  created_at             DateTime            @default(now()) @db.Timestamptz(6)
  updated_at             DateTime            @default(now()) @db.Timestamptz(6)
  guild_rule_set_configs GuildRuleSetConfig?
  guild_rules            GuildRule[]

  @@index([guild_id])
  @@map("guild_rule_sets")
}

model GuildRule {
  id              BigInt       @id @default(autoincrement())
  set_id          BigInt
  name            String
  enabled         Boolean
  trigger         Json
  conditions      Json
  actions         Json
  created_at      DateTime     @default(now()) @db.Timestamptz(6)
  updated_at      DateTime     @default(now()) @db.Timestamptz(6)
  guild_rule_sets GuildRuleSet @relation(fields: [set_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([set_id])
  @@map("guild_rules")
}

model Member {
  guild_id  BigInt
  user_id   BigInt
  join_time DateTime @db.Timestamp(6)

  @@id([guild_id, user_id])
  @@map("members")
}

model RuleCounter {
  time     DateTime @db.Timestamptz(6)
  guild_id BigInt
  name     String

  @@id([time, guild_id, name])
  @@index([guild_id, name, time])
  @@index([time])
  @@map("rule_counters")
}

model RuleGauge {
  time     DateTime  @db.Timestamptz(6)
  guild_id BigInt
  scope    RuleScope
  scope_id BigInt
  name     String
  value    BigInt

  @@id([time, guild_id, scope, scope_id, name])
  @@index([guild_id, scope, scope_id, name, time])
  @@index([time])
  @@map("rule_gauges")
}

model RulePersistence {
  guild_id BigInt
  scope    RuleScope
  scope_id BigInt
  data     Json

  @@id([guild_id, scope, scope_id])
  @@map("rule_persistence")
}

model WebGuild {
  id         BigInt   @id
  name       String
  icon       String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
}

model WebUserGuild {
  user_id      BigInt
  guild_id     BigInt
  owner        Boolean
  permissions  BigInt
  manage_guild Boolean?

  @@id([user_id, guild_id])
  @@index([guild_id])
  @@index([user_id])
}

model WebUser {
  id            BigInt   @id
  username      String
  discriminator Int
  avatar        String?
  is_admin      Boolean  @default(false)
  details       Json     @default("{}")
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
}

enum RuleScope {
  GUILD
  CHANNEL
  USER
}
