"""All input for the `addRoleMenuRoles` mutation."""
input AddRoleMenuRolesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt
  menuName: String
  roleIds: [BigInt]
}

"""The output of our `addRoleMenuRoles` mutation."""
type AddRoleMenuRolesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  roleMenuRoles: [RoleMenuRole!]
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value."""
  equalTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """Not included in the specified list."""
  notIn: [BigInt!]
}

"""
A filter to be used against BigInt List fields. All fields are combined with a logical ‘and.’
"""
input BigIntListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: BigInt

  """Any array item is greater than the specified value."""
  anyGreaterThan: BigInt

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: BigInt

  """Any array item is less than the specified value."""
  anyLessThan: BigInt

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: BigInt

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: BigInt

  """Contained by the specified list of values."""
  containedBy: [BigInt]

  """Contains the specified list of values."""
  contains: [BigInt]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [BigInt]

  """Equal to the specified value."""
  equalTo: [BigInt]

  """Greater than the specified value."""
  greaterThan: [BigInt]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [BigInt]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [BigInt]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [BigInt]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [BigInt]

  """Not equal to the specified value."""
  notEqualTo: [BigInt]

  """Overlaps the specified list of values."""
  overlaps: [BigInt]
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

type BotStat implements Node {
  category: String!
  count: BigInt!
  createdAt: Datetime!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

type BotStatAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: BotStatAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: BotStatDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: BotStatMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: BotStatMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: BotStatStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: BotStatStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: BotStatSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: BotStatVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: BotStatVarianceSampleAggregates
}

type BotStatAverageAggregates {
  """Mean average of count across the matching connection"""
  count: BigFloat
}

"""
A condition to be used against `BotStat` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BotStatCondition {
  """Checks for equality with the object’s `category` field."""
  category: String

  """Checks for equality with the object’s `count` field."""
  count: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

type BotStatDistinctCountAggregates {
  """Distinct count of category across the matching connection"""
  category: BigInt

  """Distinct count of count across the matching connection"""
  count: BigInt

  """Distinct count of createdAt across the matching connection"""
  createdAt: BigInt

  """Distinct count of name across the matching connection"""
  name: BigInt

  """Distinct count of updatedAt across the matching connection"""
  updatedAt: BigInt
}

"""
A filter to be used against `BotStat` object types. All fields are combined with a logical ‘and.’
"""
input BotStatFilter {
  """Checks for all expressions in this list."""
  and: [BotStatFilter!]

  """Filter by the object’s `category` field."""
  category: StringFilter

  """Filter by the object’s `count` field."""
  count: BigIntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: BotStatFilter

  """Checks for any expressions in this list."""
  or: [BotStatFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `BotStat`"""
input BotStatInput {
  category: String!
  count: BigInt!
  createdAt: Datetime
  name: String!
  updatedAt: Datetime
}

type BotStatMaxAggregates {
  """Maximum of count across the matching connection"""
  count: BigInt
}

type BotStatMinAggregates {
  """Minimum of count across the matching connection"""
  count: BigInt
}

"""
Represents an update to a `BotStat`. Fields that are set will be updated.
"""
input BotStatPatch {
  category: String
  count: BigInt
  createdAt: Datetime
  name: String
  updatedAt: Datetime
}

type BotStatStddevPopulationAggregates {
  """Population standard deviation of count across the matching connection"""
  count: BigFloat
}

type BotStatStddevSampleAggregates {
  """Sample standard deviation of count across the matching connection"""
  count: BigFloat
}

type BotStatSumAggregates {
  """Sum of count across the matching connection"""
  count: BigFloat!
}

type BotStatVariancePopulationAggregates {
  """Population variance of count across the matching connection"""
  count: BigFloat
}

type BotStatVarianceSampleAggregates {
  """Sample variance of count across the matching connection"""
  count: BigFloat
}

"""A connection to a list of `BotStat` values."""
type BotStatsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: BotStatAggregates

  """
  A list of edges which contains the `BotStat` and cursor to aid in pagination.
  """
  edges: [BotStatsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `BotStat` for these aggregates."""
    groupBy: [BotStatsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: BotStatsHavingInput
  ): [BotStatAggregates!]

  """A list of `BotStat` objects."""
  nodes: [BotStat!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BotStat` you could get from the connection."""
  totalCount: Int!
}

"""A `BotStat` edge in the connection."""
type BotStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BotStat` at the end of the edge."""
  node: BotStat!
}

"""Grouping methods for `BotStat` for usage during aggregation."""
enum BotStatsGroupBy {
  CATEGORY
  COUNT
  CREATED_AT
  CREATED_AT_TRUNCATED_TO_DAY
  CREATED_AT_TRUNCATED_TO_HOUR
  NAME
  UPDATED_AT
  UPDATED_AT_TRUNCATED_TO_DAY
  UPDATED_AT_TRUNCATED_TO_HOUR
}

input BotStatsHavingAverageInput {
  count: HavingBigintFilter
  createdAt: HavingDatetimeFilter
  updatedAt: HavingDatetimeFilter
}

input BotStatsHavingDistinctCountInput {
  count: HavingBigintFilter
  createdAt: HavingDatetimeFilter
  updatedAt: HavingDatetimeFilter
}

"""Conditions for `BotStat` aggregates."""
input BotStatsHavingInput {
  AND: [BotStatsHavingInput!]
  OR: [BotStatsHavingInput!]
  average: BotStatsHavingAverageInput
  distinctCount: BotStatsHavingDistinctCountInput
  max: BotStatsHavingMaxInput
  min: BotStatsHavingMinInput
  stddevPopulation: BotStatsHavingStddevPopulationInput
  stddevSample: BotStatsHavingStddevSampleInput
  sum: BotStatsHavingSumInput
  variancePopulation: BotStatsHavingVariancePopulationInput
  varianceSample: BotStatsHavingVarianceSampleInput
}

input BotStatsHavingMaxInput {
  count: HavingBigintFilter
  createdAt: HavingDatetimeFilter
  updatedAt: HavingDatetimeFilter
}

input BotStatsHavingMinInput {
  count: HavingBigintFilter
  createdAt: HavingDatetimeFilter
  updatedAt: HavingDatetimeFilter
}

input BotStatsHavingStddevPopulationInput {
  count: HavingBigintFilter
  createdAt: HavingDatetimeFilter
  updatedAt: HavingDatetimeFilter
}

input BotStatsHavingStddevSampleInput {
  count: HavingBigintFilter
  createdAt: HavingDatetimeFilter
  updatedAt: HavingDatetimeFilter
}

input BotStatsHavingSumInput {
  count: HavingBigintFilter
  createdAt: HavingDatetimeFilter
  updatedAt: HavingDatetimeFilter
}

input BotStatsHavingVariancePopulationInput {
  count: HavingBigintFilter
  createdAt: HavingDatetimeFilter
  updatedAt: HavingDatetimeFilter
}

input BotStatsHavingVarianceSampleInput {
  count: HavingBigintFilter
  createdAt: HavingDatetimeFilter
  updatedAt: HavingDatetimeFilter
}

"""Methods to use when ordering `BotStat`."""
enum BotStatsOrderBy {
  CATEGORY_ASC
  CATEGORY_DESC
  COUNT_ASC
  COUNT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type CachedGuild implements Node {
  banner: String
  createdAt: Datetime!
  features: [String]!

  """Reads a single `GuildConfig` that is related to this `CachedGuild`."""
  guildConfigById: GuildConfig
  icon: String
  id: BigInt!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  splash: String
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `WebUserGuild`."""
  webUserGuildsByGuildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserGuildCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WebUserGuildFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsConnection!
}

"""An input for mutations affecting `CachedGuild`"""
input CachedGuildInput {
  banner: String
  createdAt: Datetime
  features: [String]
  icon: String
  id: BigInt!
  name: String!
  splash: String
  updatedAt: Datetime
}

"""
Represents an update to a `CachedGuild`. Fields that are set will be updated.
"""
input CachedGuildPatch {
  banner: String
  createdAt: Datetime
  features: [String]
  icon: String
  id: BigInt
  name: String
  splash: String
  updatedAt: Datetime
}

"""A `CachedGuild` edge in the connection."""
type CachedGuildsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CachedGuild` at the end of the edge."""
  node: CachedGuild!
}

"""Methods to use when ordering `CachedGuild`."""
enum CachedGuildsOrderBy {
  BANNER_ASC
  BANNER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FEATURES_ASC
  FEATURES_DESC
  ICON_ASC
  ICON_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SPLASH_ASC
  SPLASH_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_AVERAGE_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_AVERAGE_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_AVERAGE_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_AVERAGE_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_AVERAGE_OWNER_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_AVERAGE_OWNER_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_AVERAGE_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_AVERAGE_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_AVERAGE_USER_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_AVERAGE_USER_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_COUNT_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_COUNT_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_DISTINCT_COUNT_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_DISTINCT_COUNT_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_DISTINCT_COUNT_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_DISTINCT_COUNT_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_DISTINCT_COUNT_OWNER_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_DISTINCT_COUNT_OWNER_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_DISTINCT_COUNT_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_DISTINCT_COUNT_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_DISTINCT_COUNT_USER_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_DISTINCT_COUNT_USER_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_MAX_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_MAX_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_MAX_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_MAX_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_MAX_OWNER_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_MAX_OWNER_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_MAX_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_MAX_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_MAX_USER_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_MAX_USER_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_MIN_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_MIN_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_MIN_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_MIN_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_MIN_OWNER_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_MIN_OWNER_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_MIN_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_MIN_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_MIN_USER_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_MIN_USER_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_POPULATION_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_POPULATION_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_POPULATION_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_POPULATION_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_POPULATION_OWNER_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_POPULATION_OWNER_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_POPULATION_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_POPULATION_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_POPULATION_USER_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_POPULATION_USER_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_SAMPLE_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_SAMPLE_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_SAMPLE_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_SAMPLE_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_SAMPLE_OWNER_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_SAMPLE_OWNER_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_SAMPLE_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_SAMPLE_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_SAMPLE_USER_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_STDDEV_SAMPLE_USER_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_SUM_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_SUM_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_SUM_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_SUM_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_SUM_OWNER_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_SUM_OWNER_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_SUM_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_SUM_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_SUM_USER_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_SUM_USER_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_POPULATION_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_POPULATION_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_POPULATION_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_POPULATION_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_POPULATION_OWNER_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_POPULATION_OWNER_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_POPULATION_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_POPULATION_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_POPULATION_USER_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_POPULATION_USER_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_SAMPLE_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_SAMPLE_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_SAMPLE_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_SAMPLE_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_SAMPLE_OWNER_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_SAMPLE_OWNER_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_SAMPLE_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_SAMPLE_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_SAMPLE_USER_ID_ASC
  WEB_USER_GUILDS_BY_GUILD_ID_VARIANCE_SAMPLE_USER_ID_DESC
}

type CachedUser implements Node {
  avatarUrl: String!
  discriminator: Int!
  id: BigInt!
  lastChecked: Datetime!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""An input for mutations affecting `CachedUser`"""
input CachedUserInput {
  avatarUrl: String!
  discriminator: Int!
  id: BigInt!
  lastChecked: Datetime!
  name: String!
}

"""
Represents an update to a `CachedUser`. Fields that are set will be updated.
"""
input CachedUserPatch {
  avatarUrl: String
  discriminator: Int
  id: BigInt
  lastChecked: Datetime
  name: String
}

"""A `CachedUser` edge in the connection."""
type CachedUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CachedUser` at the end of the edge."""
  node: CachedUser!
}

"""Methods to use when ordering `CachedUser`."""
enum CachedUsersOrderBy {
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  DISCRIMINATOR_ASC
  DISCRIMINATOR_DESC
  ID_ASC
  ID_DESC
  LAST_CHECKED_ASC
  LAST_CHECKED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `BotStat` mutation."""
input CreateBotStatInput {
  """The `BotStat` to be created by this mutation."""
  botStat: BotStatInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `BotStat` mutation."""
type CreateBotStatPayload {
  """The `BotStat` that was created by this mutation."""
  botStat: BotStat

  """An edge for our `BotStat`. May be used by Relay 1."""
  botStatEdge(
    """The method to use when ordering `BotStat`."""
    orderBy: [BotStatsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotStatsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CachedGuild` mutation."""
input CreateCachedGuildInput {
  """The `CachedGuild` to be created by this mutation."""
  cachedGuild: CachedGuildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CachedGuild` mutation."""
type CreateCachedGuildPayload {
  """The `CachedGuild` that was created by this mutation."""
  cachedGuild: CachedGuild

  """An edge for our `CachedGuild`. May be used by Relay 1."""
  cachedGuildEdge(
    """The method to use when ordering `CachedGuild`."""
    orderBy: [CachedGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedGuildsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CachedUser` mutation."""
input CreateCachedUserInput {
  """The `CachedUser` to be created by this mutation."""
  cachedUser: CachedUserInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CachedUser` mutation."""
type CreateCachedUserPayload {
  """The `CachedUser` that was created by this mutation."""
  cachedUser: CachedUser

  """An edge for our `CachedUser`. May be used by Relay 1."""
  cachedUserEdge(
    """The method to use when ordering `CachedUser`."""
    orderBy: [CachedUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Feed` mutation."""
input CreateFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Feed` to be created by this mutation."""
  feed: FeedInput!
}

"""All input for the create `FeedItem` mutation."""
input CreateFeedItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FeedItem` to be created by this mutation."""
  feedItem: FeedItemInput!
}

"""The output of our create `FeedItem` mutation."""
type CreateFeedItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FeedItem` that was created by this mutation."""
  feedItem: FeedItem

  """An edge for our `FeedItem`. May be used by Relay 1."""
  feedItemEdge(
    """The method to use when ordering `FeedItem`."""
    orderBy: [FeedItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedItemsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `Feed` mutation."""
type CreateFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Feed` that was created by this mutation."""
  feed: Feed

  """An edge for our `Feed`. May be used by Relay 1."""
  feedEdge(
    """The method to use when ordering `Feed`."""
    orderBy: [FeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FeedSubscription` mutation."""
input CreateFeedSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FeedSubscription` to be created by this mutation."""
  feedSubscription: FeedSubscriptionInput!
}

"""The output of our create `FeedSubscription` mutation."""
type CreateFeedSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Feed` that is related to this `FeedSubscription`."""
  feedByFeedId: Feed

  """The `FeedSubscription` that was created by this mutation."""
  feedSubscription: FeedSubscription

  """An edge for our `FeedSubscription`. May be used by Relay 1."""
  feedSubscriptionEdge(
    """The method to use when ordering `FeedSubscription`."""
    orderBy: [FeedSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedSubscriptionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `GuildBan` mutation."""
input CreateGuildBanInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GuildBan` to be created by this mutation."""
  guildBan: GuildBanInput!
}

"""The output of our create `GuildBan` mutation."""
type CreateGuildBanPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GuildBan` that was created by this mutation."""
  guildBan: GuildBan

  """An edge for our `GuildBan`. May be used by Relay 1."""
  guildBanEdge(
    """The method to use when ordering `GuildBan`."""
    orderBy: [GuildBansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildBansEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `GuildConfig` mutation."""
input CreateGuildConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GuildConfig` to be created by this mutation."""
  guildConfig: GuildConfigInput!
}

"""The output of our create `GuildConfig` mutation."""
type CreateGuildConfigPayload {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GuildConfig` that was created by this mutation."""
  guildConfig: GuildConfig

  """An edge for our `GuildConfig`. May be used by Relay 1."""
  guildConfigEdge(
    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Member` mutation."""
input CreateMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Member` to be created by this mutation."""
  member: MemberInput!
}

"""The output of our create `Member` mutation."""
type CreateMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was created by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Message` mutation."""
input CreateMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Message` to be created by this mutation."""
  message: MessageInput!
}

"""The output of our create `Message` mutation."""
type CreateMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Message` that was created by this mutation."""
  message: Message

  """An edge for our `Message`. May be used by Relay 1."""
  messageEdge(
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [NATURAL]
  ): MessagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ModLog` mutation."""
input CreateModLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ModLog` to be created by this mutation."""
  modLog: ModLogInput!
}

"""The output of our create `ModLog` mutation."""
type CreateModLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ModLog` that was created by this mutation."""
  modLog: ModLog

  """An edge for our `ModLog`. May be used by Relay 1."""
  modLogEdge(
    """The method to use when ordering `ModLog`."""
    orderBy: [ModLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ModLogsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Mute` mutation."""
input CreateMuteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Mute` to be created by this mutation."""
  mute: MuteInput!
}

"""The output of our create `Mute` mutation."""
type CreateMutePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `ModLog` that is related to this `Mute`."""
  modLogByGuildIdAndCaseId: ModLog

  """The `Mute` that was created by this mutation."""
  mute: Mute

  """An edge for our `Mute`. May be used by Relay 1."""
  muteEdge(
    """The method to use when ordering `Mute`."""
    orderBy: [MutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MutesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Notification` mutation."""
input CreateNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Notification` to be created by this mutation."""
  notification: NotificationInput!
}

"""The output of our create `Notification` mutation."""
type CreateNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was created by this mutation."""
  notification: Notification

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Reminder` mutation."""
input CreateReminderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Reminder` to be created by this mutation."""
  reminder: ReminderInput!
}

"""The output of our create `Reminder` mutation."""
type CreateReminderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Reminder` that was created by this mutation."""
  reminder: Reminder

  """An edge for our `Reminder`. May be used by Relay 1."""
  reminderEdge(
    """The method to use when ordering `Reminder`."""
    orderBy: [RemindersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RemindersEdge
}

"""All input for the create `RoleMenu` mutation."""
input CreateRoleMenuInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoleMenu` to be created by this mutation."""
  roleMenu: RoleMenuInput!
}

"""The output of our create `RoleMenu` mutation."""
type CreateRoleMenuPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RoleMenu` that was created by this mutation."""
  roleMenu: RoleMenu

  """An edge for our `RoleMenu`. May be used by Relay 1."""
  roleMenuEdge(
    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusEdge
}

"""All input for the create `RoleMenuRole` mutation."""
input CreateRoleMenuRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoleMenuRole` to be created by this mutation."""
  roleMenuRole: RoleMenuRoleInput!
}

"""The output of our create `RoleMenuRole` mutation."""
type CreateRoleMenuRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RoleMenu` that is related to this `RoleMenuRole`."""
  roleMenuByGuildIdAndMenuName: RoleMenu

  """The `RoleMenuRole` that was created by this mutation."""
  roleMenuRole: RoleMenuRole

  """An edge for our `RoleMenuRole`. May be used by Relay 1."""
  roleMenuRoleEdge(
    """The method to use when ordering `RoleMenuRole`."""
    orderBy: [RoleMenuRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenuRolesEdge
}

"""All input for the create `Tag` mutation."""
input CreateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tag` to be created by this mutation."""
  tag: TagInput!
}

"""The output of our create `Tag` mutation."""
type CreateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was created by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""All input for the create `UserLevel` mutation."""
input CreateUserLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserLevel` to be created by this mutation."""
  userLevel: UserLevelInput!
}

"""The output of our create `UserLevel` mutation."""
type CreateUserLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `UserLevel` that was created by this mutation."""
  userLevel: UserLevel

  """An edge for our `UserLevel`. May be used by Relay 1."""
  userLevelEdge(
    """The method to use when ordering `UserLevel`."""
    orderBy: [UserLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLevelsEdge
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `WebUserGuild` mutation."""
input CreateWebUserGuildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `WebUserGuild` to be created by this mutation."""
  webUserGuild: WebUserGuildInput!
}

"""The output of our create `WebUserGuild` mutation."""
type CreateWebUserGuildPayload {
  """Reads a single `CachedGuild` that is related to this `WebUserGuild`."""
  cachedGuildByGuildId: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `WebUser` that is related to this `WebUserGuild`."""
  webUserByUserId: WebUser

  """The `WebUserGuild` that was created by this mutation."""
  webUserGuild: WebUserGuild

  """An edge for our `WebUserGuild`. May be used by Relay 1."""
  webUserGuildEdge(
    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsEdge
}

"""All input for the create `WebUser` mutation."""
input CreateWebUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `WebUser` to be created by this mutation."""
  webUser: WebUserInput!
}

"""The output of our create `WebUser` mutation."""
type CreateWebUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `WebUser` that was created by this mutation."""
  webUser: WebUser

  """An edge for our `WebUser`. May be used by Relay 1."""
  webUserEdge(
    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersEdge
}

"""A `BigInt` edge in the connection."""
type CurrentUserManagedGuildIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BigInt` at the end of the edge."""
  node: BigInt
}

"""A connection to a list of `BigInt` values."""
type CurrentUserManagedGuildIdsConnection {
  """
  A list of edges which contains the `BigInt` and cursor to aid in pagination.
  """
  edges: [CurrentUserManagedGuildIdEdge!]!

  """A list of `BigInt` objects."""
  nodes: [BigInt]!

  """The count of *all* `BigInt` you could get from the connection."""
  totalCount: Int!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteBotStatByNameAndCategory` mutation."""
input DeleteBotStatByNameAndCategoryInput {
  category: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteBotStat` mutation."""
input DeleteBotStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BotStat` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `BotStat` mutation."""
type DeleteBotStatPayload {
  """The `BotStat` that was deleted by this mutation."""
  botStat: BotStat

  """An edge for our `BotStat`. May be used by Relay 1."""
  botStatEdge(
    """The method to use when ordering `BotStat`."""
    orderBy: [BotStatsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotStatsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedBotStatId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCachedGuildById` mutation."""
input DeleteCachedGuildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteCachedGuild` mutation."""
input DeleteCachedGuildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CachedGuild` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CachedGuild` mutation."""
type DeleteCachedGuildPayload {
  """The `CachedGuild` that was deleted by this mutation."""
  cachedGuild: CachedGuild

  """An edge for our `CachedGuild`. May be used by Relay 1."""
  cachedGuildEdge(
    """The method to use when ordering `CachedGuild`."""
    orderBy: [CachedGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedGuildsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCachedGuildId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCachedUserById` mutation."""
input DeleteCachedUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteCachedUser` mutation."""
input DeleteCachedUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CachedUser` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CachedUser` mutation."""
type DeleteCachedUserPayload {
  """The `CachedUser` that was deleted by this mutation."""
  cachedUser: CachedUser

  """An edge for our `CachedUser`. May be used by Relay 1."""
  cachedUserEdge(
    """The method to use when ordering `CachedUser`."""
    orderBy: [CachedUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCachedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFeedByFeedId` mutation."""
input DeleteFeedByFeedIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  feedId: String!
}

"""All input for the `deleteFeed` mutation."""
input DeleteFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Feed` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFeedItemByFeedIdAndItemId` mutation."""
input DeleteFeedItemByFeedIdAndItemIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  feedId: String!
  itemId: String!
}

"""All input for the `deleteFeedItem` mutation."""
input DeleteFeedItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FeedItem` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `FeedItem` mutation."""
type DeleteFeedItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFeedItemId: ID

  """The `FeedItem` that was deleted by this mutation."""
  feedItem: FeedItem

  """An edge for our `FeedItem`. May be used by Relay 1."""
  feedItemEdge(
    """The method to use when ordering `FeedItem`."""
    orderBy: [FeedItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedItemsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our delete `Feed` mutation."""
type DeleteFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFeedId: ID

  """The `Feed` that was deleted by this mutation."""
  feed: Feed

  """An edge for our `Feed`. May be used by Relay 1."""
  feedEdge(
    """The method to use when ordering `Feed`."""
    orderBy: [FeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteFeedSubscriptionByFeedIdAndChannelId` mutation.
"""
input DeleteFeedSubscriptionByFeedIdAndChannelIdInput {
  channelId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  feedId: String!
}

"""All input for the `deleteFeedSubscription` mutation."""
input DeleteFeedSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FeedSubscription` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `FeedSubscription` mutation."""
type DeleteFeedSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFeedSubscriptionId: ID

  """Reads a single `Feed` that is related to this `FeedSubscription`."""
  feedByFeedId: Feed

  """The `FeedSubscription` that was deleted by this mutation."""
  feedSubscription: FeedSubscription

  """An edge for our `FeedSubscription`. May be used by Relay 1."""
  feedSubscriptionEdge(
    """The method to use when ordering `FeedSubscription`."""
    orderBy: [FeedSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedSubscriptionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGuildBanByGuildIdAndUserId` mutation."""
input DeleteGuildBanByGuildIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!
}

"""All input for the `deleteGuildBan` mutation."""
input DeleteGuildBanInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GuildBan` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `GuildBan` mutation."""
type DeleteGuildBanPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGuildBanId: ID

  """The `GuildBan` that was deleted by this mutation."""
  guildBan: GuildBan

  """An edge for our `GuildBan`. May be used by Relay 1."""
  guildBanEdge(
    """The method to use when ordering `GuildBan`."""
    orderBy: [GuildBansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildBansEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGuildConfigById` mutation."""
input DeleteGuildConfigByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteGuildConfig` mutation."""
input DeleteGuildConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GuildConfig` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `GuildConfig` mutation."""
type DeleteGuildConfigPayload {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGuildConfigId: ID

  """The `GuildConfig` that was deleted by this mutation."""
  guildConfig: GuildConfig

  """An edge for our `GuildConfig`. May be used by Relay 1."""
  guildConfigEdge(
    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMemberByGuildIdAndUserId` mutation."""
input DeleteMemberByGuildIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!
}

"""All input for the `deleteMember` mutation."""
input DeleteMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Member` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Member` mutation."""
type DeleteMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMemberId: ID

  """The `Member` that was deleted by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteModLogByGuildIdAndCaseId` mutation."""
input DeleteModLogByGuildIdAndCaseIdInput {
  caseId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
}

"""All input for the `deleteModLog` mutation."""
input DeleteModLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ModLog` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ModLog` mutation."""
type DeleteModLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedModLogId: ID

  """The `ModLog` that was deleted by this mutation."""
  modLog: ModLog

  """An edge for our `ModLog`. May be used by Relay 1."""
  modLogEdge(
    """The method to use when ordering `ModLog`."""
    orderBy: [ModLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ModLogsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMuteByGuildIdAndUserId` mutation."""
input DeleteMuteByGuildIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!
}

"""All input for the `deleteMute` mutation."""
input DeleteMuteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Mute` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Mute` mutation."""
type DeleteMutePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMuteId: ID

  """Reads a single `ModLog` that is related to this `Mute`."""
  modLogByGuildIdAndCaseId: ModLog

  """The `Mute` that was deleted by this mutation."""
  mute: Mute

  """An edge for our `Mute`. May be used by Relay 1."""
  muteEdge(
    """The method to use when ordering `Mute`."""
    orderBy: [MutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MutesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteNotificationByUserIdAndGuildIdAndKeyword` mutation.
"""
input DeleteNotificationByUserIdAndGuildIdAndKeywordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  keyword: String!
  userId: BigInt!
}

"""All input for the `deleteNotification` mutation."""
input DeleteNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Notification` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Notification` mutation."""
type DeleteNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNotificationId: ID

  """The `Notification` that was deleted by this mutation."""
  notification: Notification

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteReminderByUserIdAndSetAt` mutation."""
input DeleteReminderByUserIdAndSetAtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  setAt: Datetime!
  userId: BigInt!
}

"""All input for the `deleteReminder` mutation."""
input DeleteReminderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Reminder` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Reminder` mutation."""
type DeleteReminderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedReminderId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Reminder` that was deleted by this mutation."""
  reminder: Reminder

  """An edge for our `Reminder`. May be used by Relay 1."""
  reminderEdge(
    """The method to use when ordering `Reminder`."""
    orderBy: [RemindersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RemindersEdge
}

"""All input for the `deleteRoleMenuByGuildIdAndMenuName` mutation."""
input DeleteRoleMenuByGuildIdAndMenuNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  menuName: String!
}

"""All input for the `deleteRoleMenu` mutation."""
input DeleteRoleMenuInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoleMenu` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RoleMenu` mutation."""
type DeleteRoleMenuPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoleMenuId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RoleMenu` that was deleted by this mutation."""
  roleMenu: RoleMenu

  """An edge for our `RoleMenu`. May be used by Relay 1."""
  roleMenuEdge(
    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusEdge
}

"""
All input for the `deleteRoleMenuRoleByGuildIdAndMenuNameAndRoleId` mutation.
"""
input DeleteRoleMenuRoleByGuildIdAndMenuNameAndRoleIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  menuName: String!
  roleId: BigInt!
}

"""All input for the `deleteRoleMenuRole` mutation."""
input DeleteRoleMenuRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoleMenuRole` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RoleMenuRole` mutation."""
type DeleteRoleMenuRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoleMenuRoleId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RoleMenu` that is related to this `RoleMenuRole`."""
  roleMenuByGuildIdAndMenuName: RoleMenu

  """The `RoleMenuRole` that was deleted by this mutation."""
  roleMenuRole: RoleMenuRole

  """An edge for our `RoleMenuRole`. May be used by Relay 1."""
  roleMenuRoleEdge(
    """The method to use when ordering `RoleMenuRole`."""
    orderBy: [RoleMenuRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenuRolesEdge
}

"""All input for the `deleteRoleMenuRoles` mutation."""
input DeleteRoleMenuRolesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt
  menuName: String
  roleIds: [BigInt]
}

"""The output of our `deleteRoleMenuRoles` mutation."""
type DeleteRoleMenuRolesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  roleMenuRoles: [RoleMenuRole!]
}

"""All input for the `deleteTagByGuildIdAndTagName` mutation."""
input DeleteTagByGuildIdAndTagNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  tagName: String!
}

"""All input for the `deleteTag` mutation."""
input DeleteTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Tag` mutation."""
type DeleteTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTagId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was deleted by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserLevelByUserIdAndGuildId` mutation."""
input DeleteUserLevelByUserIdAndGuildIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!
}

"""All input for the `deleteUserLevel` mutation."""
input DeleteUserLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserLevel` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserLevel` mutation."""
type DeleteUserLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserLevelId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `UserLevel` that was deleted by this mutation."""
  userLevel: UserLevel

  """An edge for our `UserLevel`. May be used by Relay 1."""
  userLevelEdge(
    """The method to use when ordering `UserLevel`."""
    orderBy: [UserLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLevelsEdge
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteWebUserById` mutation."""
input DeleteWebUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt!
}

"""All input for the `deleteWebUserGuildByUserIdAndGuildId` mutation."""
input DeleteWebUserGuildByUserIdAndGuildIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!
}

"""All input for the `deleteWebUserGuild` mutation."""
input DeleteWebUserGuildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WebUserGuild` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `WebUserGuild` mutation."""
type DeleteWebUserGuildPayload {
  """Reads a single `CachedGuild` that is related to this `WebUserGuild`."""
  cachedGuildByGuildId: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedWebUserGuildId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `WebUser` that is related to this `WebUserGuild`."""
  webUserByUserId: WebUser

  """The `WebUserGuild` that was deleted by this mutation."""
  webUserGuild: WebUserGuild

  """An edge for our `WebUserGuild`. May be used by Relay 1."""
  webUserGuildEdge(
    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsEdge
}

"""All input for the `deleteWebUser` mutation."""
input DeleteWebUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WebUser` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `WebUser` mutation."""
type DeleteWebUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedWebUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `WebUser` that was deleted by this mutation."""
  webUser: WebUser

  """An edge for our `WebUser`. May be used by Relay 1."""
  webUserEdge(
    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersEdge
}

type Feed implements Node {
  feedId: String!

  """Reads and enables pagination through a set of `FeedSubscription`."""
  feedSubscriptionsByFeedId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FeedSubscriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FeedSubscriptionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FeedSubscription`."""
    orderBy: [FeedSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedSubscriptionsConnection!
  metadata: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type FeedAggregates {
  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: FeedDistinctCountAggregates
  keys: [String!]
}

"""
A condition to be used against `Feed` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FeedCondition {
  """Checks for equality with the object’s `feedId` field."""
  feedId: String

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON
}

type FeedDistinctCountAggregates {
  """Distinct count of feedId across the matching connection"""
  feedId: BigInt

  """Distinct count of metadata across the matching connection"""
  metadata: BigInt
}

"""
A filter to be used against `Feed` object types. All fields are combined with a logical ‘and.’
"""
input FeedFilter {
  """Checks for all expressions in this list."""
  and: [FeedFilter!]

  """Filter by the object’s `feedId` field."""
  feedId: StringFilter

  """Filter by the object’s `metadata` field."""
  metadata: JSONFilter

  """Negates the expression."""
  not: FeedFilter

  """Checks for any expressions in this list."""
  or: [FeedFilter!]
}

"""An input for mutations affecting `Feed`"""
input FeedInput {
  feedId: String!
  metadata: JSON
}

type FeedItem implements Node {
  feedId: String!
  itemId: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type FeedItemAggregates {
  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: FeedItemDistinctCountAggregates
  keys: [String!]
}

"""
A condition to be used against `FeedItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FeedItemCondition {
  """Checks for equality with the object’s `feedId` field."""
  feedId: String

  """Checks for equality with the object’s `itemId` field."""
  itemId: String
}

type FeedItemDistinctCountAggregates {
  """Distinct count of feedId across the matching connection"""
  feedId: BigInt

  """Distinct count of itemId across the matching connection"""
  itemId: BigInt
}

"""
A filter to be used against `FeedItem` object types. All fields are combined with a logical ‘and.’
"""
input FeedItemFilter {
  """Checks for all expressions in this list."""
  and: [FeedItemFilter!]

  """Filter by the object’s `feedId` field."""
  feedId: StringFilter

  """Filter by the object’s `itemId` field."""
  itemId: StringFilter

  """Negates the expression."""
  not: FeedItemFilter

  """Checks for any expressions in this list."""
  or: [FeedItemFilter!]
}

"""An input for mutations affecting `FeedItem`"""
input FeedItemInput {
  feedId: String!
  itemId: String!
}

"""
Represents an update to a `FeedItem`. Fields that are set will be updated.
"""
input FeedItemPatch {
  feedId: String
  itemId: String
}

"""A connection to a list of `FeedItem` values."""
type FeedItemsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: FeedItemAggregates

  """
  A list of edges which contains the `FeedItem` and cursor to aid in pagination.
  """
  edges: [FeedItemsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `FeedItem` for these aggregates."""
    groupBy: [FeedItemsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: FeedItemsHavingInput
  ): [FeedItemAggregates!]

  """A list of `FeedItem` objects."""
  nodes: [FeedItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FeedItem` you could get from the connection."""
  totalCount: Int!
}

"""A `FeedItem` edge in the connection."""
type FeedItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FeedItem` at the end of the edge."""
  node: FeedItem!
}

"""Grouping methods for `FeedItem` for usage during aggregation."""
enum FeedItemsGroupBy {
  FEED_ID
  ITEM_ID
}

"""Conditions for `FeedItem` aggregates."""
input FeedItemsHavingInput {
  AND: [FeedItemsHavingInput!]
  OR: [FeedItemsHavingInput!]
}

"""Methods to use when ordering `FeedItem`."""
enum FeedItemsOrderBy {
  FEED_ID_ASC
  FEED_ID_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Represents an update to a `Feed`. Fields that are set will be updated."""
input FeedPatch {
  feedId: String
  metadata: JSON
}

type FeedSubscription implements Node {
  channelId: BigInt!

  """Reads a single `Feed` that is related to this `FeedSubscription`."""
  feedByFeedId: Feed
  feedId: String!
  guildId: BigInt!
  mentionRole: BigInt

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type FeedSubscriptionAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: FeedSubscriptionAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: FeedSubscriptionDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: FeedSubscriptionMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: FeedSubscriptionMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: FeedSubscriptionStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: FeedSubscriptionStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: FeedSubscriptionSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: FeedSubscriptionVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: FeedSubscriptionVarianceSampleAggregates
}

type FeedSubscriptionAverageAggregates {
  """Mean average of channelId across the matching connection"""
  channelId: BigFloat

  """Mean average of guildId across the matching connection"""
  guildId: BigFloat

  """Mean average of mentionRole across the matching connection"""
  mentionRole: BigFloat
}

"""
A condition to be used against `FeedSubscription` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FeedSubscriptionCondition {
  """Checks for equality with the object’s `channelId` field."""
  channelId: BigInt

  """Checks for equality with the object’s `feedId` field."""
  feedId: String

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `mentionRole` field."""
  mentionRole: BigInt
}

type FeedSubscriptionDistinctCountAggregates {
  """Distinct count of channelId across the matching connection"""
  channelId: BigInt

  """Distinct count of feedId across the matching connection"""
  feedId: BigInt

  """Distinct count of guildId across the matching connection"""
  guildId: BigInt

  """Distinct count of mentionRole across the matching connection"""
  mentionRole: BigInt
}

"""
A filter to be used against `FeedSubscription` object types. All fields are combined with a logical ‘and.’
"""
input FeedSubscriptionFilter {
  """Checks for all expressions in this list."""
  and: [FeedSubscriptionFilter!]

  """Filter by the object’s `channelId` field."""
  channelId: BigIntFilter

  """Filter by the object’s `feedId` field."""
  feedId: StringFilter

  """Filter by the object’s `guildId` field."""
  guildId: BigIntFilter

  """Filter by the object’s `mentionRole` field."""
  mentionRole: BigIntFilter

  """Negates the expression."""
  not: FeedSubscriptionFilter

  """Checks for any expressions in this list."""
  or: [FeedSubscriptionFilter!]
}

"""An input for mutations affecting `FeedSubscription`"""
input FeedSubscriptionInput {
  channelId: BigInt!
  feedId: String!
  guildId: BigInt!
  mentionRole: BigInt
}

type FeedSubscriptionMaxAggregates {
  """Maximum of channelId across the matching connection"""
  channelId: BigInt

  """Maximum of guildId across the matching connection"""
  guildId: BigInt

  """Maximum of mentionRole across the matching connection"""
  mentionRole: BigInt
}

type FeedSubscriptionMinAggregates {
  """Minimum of channelId across the matching connection"""
  channelId: BigInt

  """Minimum of guildId across the matching connection"""
  guildId: BigInt

  """Minimum of mentionRole across the matching connection"""
  mentionRole: BigInt
}

"""
Represents an update to a `FeedSubscription`. Fields that are set will be updated.
"""
input FeedSubscriptionPatch {
  channelId: BigInt
  feedId: String
  guildId: BigInt
  mentionRole: BigInt
}

type FeedSubscriptionStddevPopulationAggregates {
  """
  Population standard deviation of channelId across the matching connection
  """
  channelId: BigFloat

  """
  Population standard deviation of guildId across the matching connection
  """
  guildId: BigFloat

  """
  Population standard deviation of mentionRole across the matching connection
  """
  mentionRole: BigFloat
}

type FeedSubscriptionStddevSampleAggregates {
  """Sample standard deviation of channelId across the matching connection"""
  channelId: BigFloat

  """Sample standard deviation of guildId across the matching connection"""
  guildId: BigFloat

  """
  Sample standard deviation of mentionRole across the matching connection
  """
  mentionRole: BigFloat
}

type FeedSubscriptionSumAggregates {
  """Sum of channelId across the matching connection"""
  channelId: BigFloat!

  """Sum of guildId across the matching connection"""
  guildId: BigFloat!

  """Sum of mentionRole across the matching connection"""
  mentionRole: BigFloat!
}

type FeedSubscriptionVariancePopulationAggregates {
  """Population variance of channelId across the matching connection"""
  channelId: BigFloat

  """Population variance of guildId across the matching connection"""
  guildId: BigFloat

  """Population variance of mentionRole across the matching connection"""
  mentionRole: BigFloat
}

type FeedSubscriptionVarianceSampleAggregates {
  """Sample variance of channelId across the matching connection"""
  channelId: BigFloat

  """Sample variance of guildId across the matching connection"""
  guildId: BigFloat

  """Sample variance of mentionRole across the matching connection"""
  mentionRole: BigFloat
}

"""A connection to a list of `FeedSubscription` values."""
type FeedSubscriptionsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: FeedSubscriptionAggregates

  """
  A list of edges which contains the `FeedSubscription` and cursor to aid in pagination.
  """
  edges: [FeedSubscriptionsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """
    The method to use when grouping `FeedSubscription` for these aggregates.
    """
    groupBy: [FeedSubscriptionsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: FeedSubscriptionsHavingInput
  ): [FeedSubscriptionAggregates!]

  """A list of `FeedSubscription` objects."""
  nodes: [FeedSubscription!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FeedSubscription` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FeedSubscription` edge in the connection."""
type FeedSubscriptionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FeedSubscription` at the end of the edge."""
  node: FeedSubscription!
}

"""Grouping methods for `FeedSubscription` for usage during aggregation."""
enum FeedSubscriptionsGroupBy {
  CHANNEL_ID
  FEED_ID
  GUILD_ID
  MENTION_ROLE
}

input FeedSubscriptionsHavingAverageInput {
  channelId: HavingBigintFilter
  guildId: HavingBigintFilter
  mentionRole: HavingBigintFilter
}

input FeedSubscriptionsHavingDistinctCountInput {
  channelId: HavingBigintFilter
  guildId: HavingBigintFilter
  mentionRole: HavingBigintFilter
}

"""Conditions for `FeedSubscription` aggregates."""
input FeedSubscriptionsHavingInput {
  AND: [FeedSubscriptionsHavingInput!]
  OR: [FeedSubscriptionsHavingInput!]
  average: FeedSubscriptionsHavingAverageInput
  distinctCount: FeedSubscriptionsHavingDistinctCountInput
  max: FeedSubscriptionsHavingMaxInput
  min: FeedSubscriptionsHavingMinInput
  stddevPopulation: FeedSubscriptionsHavingStddevPopulationInput
  stddevSample: FeedSubscriptionsHavingStddevSampleInput
  sum: FeedSubscriptionsHavingSumInput
  variancePopulation: FeedSubscriptionsHavingVariancePopulationInput
  varianceSample: FeedSubscriptionsHavingVarianceSampleInput
}

input FeedSubscriptionsHavingMaxInput {
  channelId: HavingBigintFilter
  guildId: HavingBigintFilter
  mentionRole: HavingBigintFilter
}

input FeedSubscriptionsHavingMinInput {
  channelId: HavingBigintFilter
  guildId: HavingBigintFilter
  mentionRole: HavingBigintFilter
}

input FeedSubscriptionsHavingStddevPopulationInput {
  channelId: HavingBigintFilter
  guildId: HavingBigintFilter
  mentionRole: HavingBigintFilter
}

input FeedSubscriptionsHavingStddevSampleInput {
  channelId: HavingBigintFilter
  guildId: HavingBigintFilter
  mentionRole: HavingBigintFilter
}

input FeedSubscriptionsHavingSumInput {
  channelId: HavingBigintFilter
  guildId: HavingBigintFilter
  mentionRole: HavingBigintFilter
}

input FeedSubscriptionsHavingVariancePopulationInput {
  channelId: HavingBigintFilter
  guildId: HavingBigintFilter
  mentionRole: HavingBigintFilter
}

input FeedSubscriptionsHavingVarianceSampleInput {
  channelId: HavingBigintFilter
  guildId: HavingBigintFilter
  mentionRole: HavingBigintFilter
}

"""Methods to use when ordering `FeedSubscription`."""
enum FeedSubscriptionsOrderBy {
  CHANNEL_ID_ASC
  CHANNEL_ID_DESC
  FEED_ID_ASC
  FEED_ID_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  MENTION_ROLE_ASC
  MENTION_ROLE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Feed` values."""
type FeedsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: FeedAggregates

  """
  A list of edges which contains the `Feed` and cursor to aid in pagination.
  """
  edges: [FeedsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Feed` for these aggregates."""
    groupBy: [FeedsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: FeedsHavingInput
  ): [FeedAggregates!]

  """A list of `Feed` objects."""
  nodes: [Feed!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Feed` you could get from the connection."""
  totalCount: Int!
}

"""A `Feed` edge in the connection."""
type FeedsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Feed` at the end of the edge."""
  node: Feed!
}

"""Grouping methods for `Feed` for usage during aggregation."""
enum FeedsGroupBy {
  METADATA
}

"""Conditions for `Feed` aggregates."""
input FeedsHavingInput {
  AND: [FeedsHavingInput!]
  OR: [FeedsHavingInput!]
}

"""Methods to use when ordering `Feed`."""
enum FeedsOrderBy {
  FEED_ID_ASC
  FEED_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_AVERAGE_CHANNEL_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_AVERAGE_CHANNEL_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_AVERAGE_FEED_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_AVERAGE_FEED_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_AVERAGE_GUILD_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_AVERAGE_GUILD_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_AVERAGE_MENTION_ROLE_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_AVERAGE_MENTION_ROLE_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_COUNT_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_COUNT_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_DISTINCT_COUNT_CHANNEL_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_DISTINCT_COUNT_CHANNEL_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_DISTINCT_COUNT_FEED_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_DISTINCT_COUNT_FEED_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_DISTINCT_COUNT_GUILD_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_DISTINCT_COUNT_GUILD_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_DISTINCT_COUNT_MENTION_ROLE_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_DISTINCT_COUNT_MENTION_ROLE_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MAX_CHANNEL_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MAX_CHANNEL_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MAX_FEED_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MAX_FEED_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MAX_GUILD_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MAX_GUILD_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MAX_MENTION_ROLE_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MAX_MENTION_ROLE_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MIN_CHANNEL_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MIN_CHANNEL_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MIN_FEED_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MIN_FEED_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MIN_GUILD_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MIN_GUILD_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MIN_MENTION_ROLE_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_MIN_MENTION_ROLE_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_POPULATION_CHANNEL_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_POPULATION_CHANNEL_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_POPULATION_FEED_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_POPULATION_FEED_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_POPULATION_GUILD_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_POPULATION_GUILD_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_POPULATION_MENTION_ROLE_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_POPULATION_MENTION_ROLE_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_SAMPLE_CHANNEL_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_SAMPLE_CHANNEL_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_SAMPLE_FEED_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_SAMPLE_FEED_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_SAMPLE_GUILD_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_SAMPLE_GUILD_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_SAMPLE_MENTION_ROLE_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_STDDEV_SAMPLE_MENTION_ROLE_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_SUM_CHANNEL_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_SUM_CHANNEL_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_SUM_FEED_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_SUM_FEED_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_SUM_GUILD_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_SUM_GUILD_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_SUM_MENTION_ROLE_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_SUM_MENTION_ROLE_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_POPULATION_CHANNEL_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_POPULATION_CHANNEL_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_POPULATION_FEED_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_POPULATION_FEED_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_POPULATION_GUILD_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_POPULATION_GUILD_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_POPULATION_MENTION_ROLE_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_POPULATION_MENTION_ROLE_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_SAMPLE_CHANNEL_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_SAMPLE_CHANNEL_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_SAMPLE_FEED_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_SAMPLE_FEED_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_SAMPLE_GUILD_ID_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_SAMPLE_GUILD_ID_DESC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_SAMPLE_MENTION_ROLE_ASC
  FEED_SUBSCRIPTIONS_BY_FEED_ID_VARIANCE_SAMPLE_MENTION_ROLE_DESC
  METADATA_ASC
  METADATA_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `graphql` mutation."""
input GraphqlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  extensions: JSON
  operationName: String
  query: String
  variables: JSON
}

"""The output of our `graphql` mutation."""
type GraphqlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type GuildBan implements Node {
  guildId: BigInt!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: BigInt!
}

type GuildBanAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: GuildBanAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: GuildBanDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: GuildBanMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: GuildBanMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: GuildBanStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: GuildBanStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: GuildBanSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: GuildBanVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: GuildBanVarianceSampleAggregates
}

type GuildBanAverageAggregates {
  """Mean average of guildId across the matching connection"""
  guildId: BigFloat

  """Mean average of userId across the matching connection"""
  userId: BigFloat
}

"""
A condition to be used against `GuildBan` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GuildBanCondition {
  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

type GuildBanDistinctCountAggregates {
  """Distinct count of guildId across the matching connection"""
  guildId: BigInt

  """Distinct count of userId across the matching connection"""
  userId: BigInt
}

"""
A filter to be used against `GuildBan` object types. All fields are combined with a logical ‘and.’
"""
input GuildBanFilter {
  """Checks for all expressions in this list."""
  and: [GuildBanFilter!]

  """Filter by the object’s `guildId` field."""
  guildId: BigIntFilter

  """Negates the expression."""
  not: GuildBanFilter

  """Checks for any expressions in this list."""
  or: [GuildBanFilter!]

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter
}

"""An input for mutations affecting `GuildBan`"""
input GuildBanInput {
  guildId: BigInt!
  userId: BigInt!
}

type GuildBanMaxAggregates {
  """Maximum of guildId across the matching connection"""
  guildId: BigInt

  """Maximum of userId across the matching connection"""
  userId: BigInt
}

type GuildBanMinAggregates {
  """Minimum of guildId across the matching connection"""
  guildId: BigInt

  """Minimum of userId across the matching connection"""
  userId: BigInt
}

"""
Represents an update to a `GuildBan`. Fields that are set will be updated.
"""
input GuildBanPatch {
  guildId: BigInt
  userId: BigInt
}

type GuildBanStddevPopulationAggregates {
  """
  Population standard deviation of guildId across the matching connection
  """
  guildId: BigFloat

  """Population standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type GuildBanStddevSampleAggregates {
  """Sample standard deviation of guildId across the matching connection"""
  guildId: BigFloat

  """Sample standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type GuildBanSumAggregates {
  """Sum of guildId across the matching connection"""
  guildId: BigFloat!

  """Sum of userId across the matching connection"""
  userId: BigFloat!
}

type GuildBanVariancePopulationAggregates {
  """Population variance of guildId across the matching connection"""
  guildId: BigFloat

  """Population variance of userId across the matching connection"""
  userId: BigFloat
}

type GuildBanVarianceSampleAggregates {
  """Sample variance of guildId across the matching connection"""
  guildId: BigFloat

  """Sample variance of userId across the matching connection"""
  userId: BigFloat
}

"""A connection to a list of `GuildBan` values."""
type GuildBansConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: GuildBanAggregates

  """
  A list of edges which contains the `GuildBan` and cursor to aid in pagination.
  """
  edges: [GuildBansEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `GuildBan` for these aggregates."""
    groupBy: [GuildBansGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: GuildBansHavingInput
  ): [GuildBanAggregates!]

  """A list of `GuildBan` objects."""
  nodes: [GuildBan!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GuildBan` you could get from the connection."""
  totalCount: Int!
}

"""A `GuildBan` edge in the connection."""
type GuildBansEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GuildBan` at the end of the edge."""
  node: GuildBan!
}

"""Grouping methods for `GuildBan` for usage during aggregation."""
enum GuildBansGroupBy {
  GUILD_ID
  USER_ID
}

input GuildBansHavingAverageInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input GuildBansHavingDistinctCountInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

"""Conditions for `GuildBan` aggregates."""
input GuildBansHavingInput {
  AND: [GuildBansHavingInput!]
  OR: [GuildBansHavingInput!]
  average: GuildBansHavingAverageInput
  distinctCount: GuildBansHavingDistinctCountInput
  max: GuildBansHavingMaxInput
  min: GuildBansHavingMinInput
  stddevPopulation: GuildBansHavingStddevPopulationInput
  stddevSample: GuildBansHavingStddevSampleInput
  sum: GuildBansHavingSumInput
  variancePopulation: GuildBansHavingVariancePopulationInput
  varianceSample: GuildBansHavingVarianceSampleInput
}

input GuildBansHavingMaxInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input GuildBansHavingMinInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input GuildBansHavingStddevPopulationInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input GuildBansHavingStddevSampleInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input GuildBansHavingSumInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input GuildBansHavingVariancePopulationInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input GuildBansHavingVarianceSampleInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

"""Methods to use when ordering `GuildBan`."""
enum GuildBansOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type GuildConfig implements Node {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild
  data: JSON!
  disabledChannels: [BigInt]
  id: BigInt!
  inviteGuard: Boolean!
  joinMsg: String
  joinMsgEnabled: Boolean!
  joinReact: String
  leaveMsg: String
  leaveMsgEnabled: Boolean!
  logMember: BigInt
  logMemberEnabled: Boolean!
  logMod: BigInt
  logModEnabled: Boolean!
  logMsg: BigInt
  logMsgEnabled: Boolean!
  maxMention: Int
  msgChannel: BigInt
  muteDmEnabled: Boolean!
  muteDmText: String
  muteDuration: BigInt
  muteRole: BigInt

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  prefix: String
  roleChannel: BigInt
  roleConfig: JSON
  roleEnabled: Boolean!
  warnDmEnabled: Boolean!
  warnDmText: String
}

type GuildConfigAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: GuildConfigAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: GuildConfigDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: GuildConfigMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: GuildConfigMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: GuildConfigStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: GuildConfigStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: GuildConfigSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: GuildConfigVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: GuildConfigVarianceSampleAggregates
}

type GuildConfigAverageAggregates {
  """Mean average of id across the matching connection"""
  id: BigFloat

  """Mean average of logMember across the matching connection"""
  logMember: BigFloat

  """Mean average of logMod across the matching connection"""
  logMod: BigFloat

  """Mean average of logMsg across the matching connection"""
  logMsg: BigFloat

  """Mean average of maxMention across the matching connection"""
  maxMention: BigFloat

  """Mean average of msgChannel across the matching connection"""
  msgChannel: BigFloat

  """Mean average of muteDuration across the matching connection"""
  muteDuration: BigFloat

  """Mean average of muteRole across the matching connection"""
  muteRole: BigFloat

  """Mean average of roleChannel across the matching connection"""
  roleChannel: BigFloat
}

"""
A condition to be used against `GuildConfig` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GuildConfigCondition {
  """Checks for equality with the object’s `data` field."""
  data: JSON

  """Checks for equality with the object’s `disabledChannels` field."""
  disabledChannels: [BigInt]

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `inviteGuard` field."""
  inviteGuard: Boolean

  """Checks for equality with the object’s `joinMsg` field."""
  joinMsg: String

  """Checks for equality with the object’s `joinMsgEnabled` field."""
  joinMsgEnabled: Boolean

  """Checks for equality with the object’s `joinReact` field."""
  joinReact: String

  """Checks for equality with the object’s `leaveMsg` field."""
  leaveMsg: String

  """Checks for equality with the object’s `leaveMsgEnabled` field."""
  leaveMsgEnabled: Boolean

  """Checks for equality with the object’s `logMember` field."""
  logMember: BigInt

  """Checks for equality with the object’s `logMemberEnabled` field."""
  logMemberEnabled: Boolean

  """Checks for equality with the object’s `logMod` field."""
  logMod: BigInt

  """Checks for equality with the object’s `logModEnabled` field."""
  logModEnabled: Boolean

  """Checks for equality with the object’s `logMsg` field."""
  logMsg: BigInt

  """Checks for equality with the object’s `logMsgEnabled` field."""
  logMsgEnabled: Boolean

  """Checks for equality with the object’s `maxMention` field."""
  maxMention: Int

  """Checks for equality with the object’s `msgChannel` field."""
  msgChannel: BigInt

  """Checks for equality with the object’s `muteDmEnabled` field."""
  muteDmEnabled: Boolean

  """Checks for equality with the object’s `muteDmText` field."""
  muteDmText: String

  """Checks for equality with the object’s `muteDuration` field."""
  muteDuration: BigInt

  """Checks for equality with the object’s `muteRole` field."""
  muteRole: BigInt

  """Checks for equality with the object’s `prefix` field."""
  prefix: String

  """Checks for equality with the object’s `roleChannel` field."""
  roleChannel: BigInt

  """Checks for equality with the object’s `roleConfig` field."""
  roleConfig: JSON

  """Checks for equality with the object’s `roleEnabled` field."""
  roleEnabled: Boolean

  """Checks for equality with the object’s `warnDmEnabled` field."""
  warnDmEnabled: Boolean

  """Checks for equality with the object’s `warnDmText` field."""
  warnDmText: String
}

type GuildConfigDistinctCountAggregates {
  """Distinct count of data across the matching connection"""
  data: BigInt

  """Distinct count of disabledChannels across the matching connection"""
  disabledChannels: BigInt

  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of inviteGuard across the matching connection"""
  inviteGuard: BigInt

  """Distinct count of joinMsg across the matching connection"""
  joinMsg: BigInt

  """Distinct count of joinMsgEnabled across the matching connection"""
  joinMsgEnabled: BigInt

  """Distinct count of joinReact across the matching connection"""
  joinReact: BigInt

  """Distinct count of leaveMsg across the matching connection"""
  leaveMsg: BigInt

  """Distinct count of leaveMsgEnabled across the matching connection"""
  leaveMsgEnabled: BigInt

  """Distinct count of logMember across the matching connection"""
  logMember: BigInt

  """Distinct count of logMemberEnabled across the matching connection"""
  logMemberEnabled: BigInt

  """Distinct count of logMod across the matching connection"""
  logMod: BigInt

  """Distinct count of logModEnabled across the matching connection"""
  logModEnabled: BigInt

  """Distinct count of logMsg across the matching connection"""
  logMsg: BigInt

  """Distinct count of logMsgEnabled across the matching connection"""
  logMsgEnabled: BigInt

  """Distinct count of maxMention across the matching connection"""
  maxMention: BigInt

  """Distinct count of msgChannel across the matching connection"""
  msgChannel: BigInt

  """Distinct count of muteDmEnabled across the matching connection"""
  muteDmEnabled: BigInt

  """Distinct count of muteDmText across the matching connection"""
  muteDmText: BigInt

  """Distinct count of muteDuration across the matching connection"""
  muteDuration: BigInt

  """Distinct count of muteRole across the matching connection"""
  muteRole: BigInt

  """Distinct count of prefix across the matching connection"""
  prefix: BigInt

  """Distinct count of roleChannel across the matching connection"""
  roleChannel: BigInt

  """Distinct count of roleConfig across the matching connection"""
  roleConfig: BigInt

  """Distinct count of roleEnabled across the matching connection"""
  roleEnabled: BigInt

  """Distinct count of warnDmEnabled across the matching connection"""
  warnDmEnabled: BigInt

  """Distinct count of warnDmText across the matching connection"""
  warnDmText: BigInt
}

"""
A filter to be used against `GuildConfig` object types. All fields are combined with a logical ‘and.’
"""
input GuildConfigFilter {
  """Checks for all expressions in this list."""
  and: [GuildConfigFilter!]

  """Filter by the object’s `data` field."""
  data: JSONFilter

  """Filter by the object’s `disabledChannels` field."""
  disabledChannels: BigIntListFilter

  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `inviteGuard` field."""
  inviteGuard: BooleanFilter

  """Filter by the object’s `joinMsg` field."""
  joinMsg: StringFilter

  """Filter by the object’s `joinMsgEnabled` field."""
  joinMsgEnabled: BooleanFilter

  """Filter by the object’s `joinReact` field."""
  joinReact: StringFilter

  """Filter by the object’s `leaveMsg` field."""
  leaveMsg: StringFilter

  """Filter by the object’s `leaveMsgEnabled` field."""
  leaveMsgEnabled: BooleanFilter

  """Filter by the object’s `logMember` field."""
  logMember: BigIntFilter

  """Filter by the object’s `logMemberEnabled` field."""
  logMemberEnabled: BooleanFilter

  """Filter by the object’s `logMod` field."""
  logMod: BigIntFilter

  """Filter by the object’s `logModEnabled` field."""
  logModEnabled: BooleanFilter

  """Filter by the object’s `logMsg` field."""
  logMsg: BigIntFilter

  """Filter by the object’s `logMsgEnabled` field."""
  logMsgEnabled: BooleanFilter

  """Filter by the object’s `maxMention` field."""
  maxMention: IntFilter

  """Filter by the object’s `msgChannel` field."""
  msgChannel: BigIntFilter

  """Filter by the object’s `muteDmEnabled` field."""
  muteDmEnabled: BooleanFilter

  """Filter by the object’s `muteDmText` field."""
  muteDmText: StringFilter

  """Filter by the object’s `muteDuration` field."""
  muteDuration: BigIntFilter

  """Filter by the object’s `muteRole` field."""
  muteRole: BigIntFilter

  """Negates the expression."""
  not: GuildConfigFilter

  """Checks for any expressions in this list."""
  or: [GuildConfigFilter!]

  """Filter by the object’s `prefix` field."""
  prefix: StringFilter

  """Filter by the object’s `roleChannel` field."""
  roleChannel: BigIntFilter

  """Filter by the object’s `roleConfig` field."""
  roleConfig: JSONFilter

  """Filter by the object’s `roleEnabled` field."""
  roleEnabled: BooleanFilter

  """Filter by the object’s `warnDmEnabled` field."""
  warnDmEnabled: BooleanFilter

  """Filter by the object’s `warnDmText` field."""
  warnDmText: StringFilter
}

"""An input for mutations affecting `GuildConfig`"""
input GuildConfigInput {
  data: JSON
  disabledChannels: [BigInt]
  id: BigInt!
  inviteGuard: Boolean
  joinMsg: String
  joinMsgEnabled: Boolean
  joinReact: String
  leaveMsg: String
  leaveMsgEnabled: Boolean
  logMember: BigInt
  logMemberEnabled: Boolean
  logMod: BigInt
  logModEnabled: Boolean
  logMsg: BigInt
  logMsgEnabled: Boolean
  maxMention: Int
  msgChannel: BigInt
  muteDmEnabled: Boolean
  muteDmText: String
  muteDuration: BigInt
  muteRole: BigInt
  prefix: String
  roleChannel: BigInt
  roleConfig: JSON
  roleEnabled: Boolean
  warnDmEnabled: Boolean
  warnDmText: String
}

type GuildConfigMaxAggregates {
  """Maximum of id across the matching connection"""
  id: BigInt

  """Maximum of logMember across the matching connection"""
  logMember: BigInt

  """Maximum of logMod across the matching connection"""
  logMod: BigInt

  """Maximum of logMsg across the matching connection"""
  logMsg: BigInt

  """Maximum of maxMention across the matching connection"""
  maxMention: Int

  """Maximum of msgChannel across the matching connection"""
  msgChannel: BigInt

  """Maximum of muteDuration across the matching connection"""
  muteDuration: BigInt

  """Maximum of muteRole across the matching connection"""
  muteRole: BigInt

  """Maximum of roleChannel across the matching connection"""
  roleChannel: BigInt
}

type GuildConfigMinAggregates {
  """Minimum of id across the matching connection"""
  id: BigInt

  """Minimum of logMember across the matching connection"""
  logMember: BigInt

  """Minimum of logMod across the matching connection"""
  logMod: BigInt

  """Minimum of logMsg across the matching connection"""
  logMsg: BigInt

  """Minimum of maxMention across the matching connection"""
  maxMention: Int

  """Minimum of msgChannel across the matching connection"""
  msgChannel: BigInt

  """Minimum of muteDuration across the matching connection"""
  muteDuration: BigInt

  """Minimum of muteRole across the matching connection"""
  muteRole: BigInt

  """Minimum of roleChannel across the matching connection"""
  roleChannel: BigInt
}

"""
Represents an update to a `GuildConfig`. Fields that are set will be updated.
"""
input GuildConfigPatch {
  data: JSON
  disabledChannels: [BigInt]
  id: BigInt
  inviteGuard: Boolean
  joinMsg: String
  joinMsgEnabled: Boolean
  joinReact: String
  leaveMsg: String
  leaveMsgEnabled: Boolean
  logMember: BigInt
  logMemberEnabled: Boolean
  logMod: BigInt
  logModEnabled: Boolean
  logMsg: BigInt
  logMsgEnabled: Boolean
  maxMention: Int
  msgChannel: BigInt
  muteDmEnabled: Boolean
  muteDmText: String
  muteDuration: BigInt
  muteRole: BigInt
  prefix: String
  roleChannel: BigInt
  roleConfig: JSON
  roleEnabled: Boolean
  warnDmEnabled: Boolean
  warnDmText: String
}

type GuildConfigStddevPopulationAggregates {
  """Population standard deviation of id across the matching connection"""
  id: BigFloat

  """
  Population standard deviation of logMember across the matching connection
  """
  logMember: BigFloat

  """Population standard deviation of logMod across the matching connection"""
  logMod: BigFloat

  """Population standard deviation of logMsg across the matching connection"""
  logMsg: BigFloat

  """
  Population standard deviation of maxMention across the matching connection
  """
  maxMention: BigFloat

  """
  Population standard deviation of msgChannel across the matching connection
  """
  msgChannel: BigFloat

  """
  Population standard deviation of muteDuration across the matching connection
  """
  muteDuration: BigFloat

  """
  Population standard deviation of muteRole across the matching connection
  """
  muteRole: BigFloat

  """
  Population standard deviation of roleChannel across the matching connection
  """
  roleChannel: BigFloat
}

type GuildConfigStddevSampleAggregates {
  """Sample standard deviation of id across the matching connection"""
  id: BigFloat

  """Sample standard deviation of logMember across the matching connection"""
  logMember: BigFloat

  """Sample standard deviation of logMod across the matching connection"""
  logMod: BigFloat

  """Sample standard deviation of logMsg across the matching connection"""
  logMsg: BigFloat

  """Sample standard deviation of maxMention across the matching connection"""
  maxMention: BigFloat

  """Sample standard deviation of msgChannel across the matching connection"""
  msgChannel: BigFloat

  """
  Sample standard deviation of muteDuration across the matching connection
  """
  muteDuration: BigFloat

  """Sample standard deviation of muteRole across the matching connection"""
  muteRole: BigFloat

  """
  Sample standard deviation of roleChannel across the matching connection
  """
  roleChannel: BigFloat
}

type GuildConfigSumAggregates {
  """Sum of id across the matching connection"""
  id: BigFloat!

  """Sum of logMember across the matching connection"""
  logMember: BigFloat!

  """Sum of logMod across the matching connection"""
  logMod: BigFloat!

  """Sum of logMsg across the matching connection"""
  logMsg: BigFloat!

  """Sum of maxMention across the matching connection"""
  maxMention: BigInt!

  """Sum of msgChannel across the matching connection"""
  msgChannel: BigFloat!

  """Sum of muteDuration across the matching connection"""
  muteDuration: BigFloat!

  """Sum of muteRole across the matching connection"""
  muteRole: BigFloat!

  """Sum of roleChannel across the matching connection"""
  roleChannel: BigFloat!
}

type GuildConfigVariancePopulationAggregates {
  """Population variance of id across the matching connection"""
  id: BigFloat

  """Population variance of logMember across the matching connection"""
  logMember: BigFloat

  """Population variance of logMod across the matching connection"""
  logMod: BigFloat

  """Population variance of logMsg across the matching connection"""
  logMsg: BigFloat

  """Population variance of maxMention across the matching connection"""
  maxMention: BigFloat

  """Population variance of msgChannel across the matching connection"""
  msgChannel: BigFloat

  """Population variance of muteDuration across the matching connection"""
  muteDuration: BigFloat

  """Population variance of muteRole across the matching connection"""
  muteRole: BigFloat

  """Population variance of roleChannel across the matching connection"""
  roleChannel: BigFloat
}

type GuildConfigVarianceSampleAggregates {
  """Sample variance of id across the matching connection"""
  id: BigFloat

  """Sample variance of logMember across the matching connection"""
  logMember: BigFloat

  """Sample variance of logMod across the matching connection"""
  logMod: BigFloat

  """Sample variance of logMsg across the matching connection"""
  logMsg: BigFloat

  """Sample variance of maxMention across the matching connection"""
  maxMention: BigFloat

  """Sample variance of msgChannel across the matching connection"""
  msgChannel: BigFloat

  """Sample variance of muteDuration across the matching connection"""
  muteDuration: BigFloat

  """Sample variance of muteRole across the matching connection"""
  muteRole: BigFloat

  """Sample variance of roleChannel across the matching connection"""
  roleChannel: BigFloat
}

"""A connection to a list of `GuildConfig` values."""
type GuildConfigsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: GuildConfigAggregates

  """
  A list of edges which contains the `GuildConfig` and cursor to aid in pagination.
  """
  edges: [GuildConfigsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `GuildConfig` for these aggregates."""
    groupBy: [GuildConfigsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: GuildConfigsHavingInput
  ): [GuildConfigAggregates!]

  """A list of `GuildConfig` objects."""
  nodes: [GuildConfig!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GuildConfig` you could get from the connection."""
  totalCount: Int!
}

"""A `GuildConfig` edge in the connection."""
type GuildConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GuildConfig` at the end of the edge."""
  node: GuildConfig!
}

"""Grouping methods for `GuildConfig` for usage during aggregation."""
enum GuildConfigsGroupBy {
  DATA
  DISABLED_CHANNELS
  INVITE_GUARD
  JOIN_MSG
  JOIN_MSG_ENABLED
  JOIN_REACT
  LEAVE_MSG
  LEAVE_MSG_ENABLED
  LOG_MEMBER
  LOG_MEMBER_ENABLED
  LOG_MOD
  LOG_MOD_ENABLED
  LOG_MSG
  LOG_MSG_ENABLED
  MAX_MENTION
  MSG_CHANNEL
  MUTE_DM_ENABLED
  MUTE_DM_TEXT
  MUTE_DURATION
  MUTE_ROLE
  PREFIX
  ROLE_CHANNEL
  ROLE_CONFIG
  ROLE_ENABLED
  WARN_DM_ENABLED
  WARN_DM_TEXT
}

input GuildConfigsHavingAverageInput {
  id: HavingBigintFilter
  logMember: HavingBigintFilter
  logMod: HavingBigintFilter
  logMsg: HavingBigintFilter
  maxMention: HavingIntFilter
  msgChannel: HavingBigintFilter
  muteDuration: HavingBigintFilter
  muteRole: HavingBigintFilter
  roleChannel: HavingBigintFilter
}

input GuildConfigsHavingDistinctCountInput {
  id: HavingBigintFilter
  logMember: HavingBigintFilter
  logMod: HavingBigintFilter
  logMsg: HavingBigintFilter
  maxMention: HavingIntFilter
  msgChannel: HavingBigintFilter
  muteDuration: HavingBigintFilter
  muteRole: HavingBigintFilter
  roleChannel: HavingBigintFilter
}

"""Conditions for `GuildConfig` aggregates."""
input GuildConfigsHavingInput {
  AND: [GuildConfigsHavingInput!]
  OR: [GuildConfigsHavingInput!]
  average: GuildConfigsHavingAverageInput
  distinctCount: GuildConfigsHavingDistinctCountInput
  max: GuildConfigsHavingMaxInput
  min: GuildConfigsHavingMinInput
  stddevPopulation: GuildConfigsHavingStddevPopulationInput
  stddevSample: GuildConfigsHavingStddevSampleInput
  sum: GuildConfigsHavingSumInput
  variancePopulation: GuildConfigsHavingVariancePopulationInput
  varianceSample: GuildConfigsHavingVarianceSampleInput
}

input GuildConfigsHavingMaxInput {
  id: HavingBigintFilter
  logMember: HavingBigintFilter
  logMod: HavingBigintFilter
  logMsg: HavingBigintFilter
  maxMention: HavingIntFilter
  msgChannel: HavingBigintFilter
  muteDuration: HavingBigintFilter
  muteRole: HavingBigintFilter
  roleChannel: HavingBigintFilter
}

input GuildConfigsHavingMinInput {
  id: HavingBigintFilter
  logMember: HavingBigintFilter
  logMod: HavingBigintFilter
  logMsg: HavingBigintFilter
  maxMention: HavingIntFilter
  msgChannel: HavingBigintFilter
  muteDuration: HavingBigintFilter
  muteRole: HavingBigintFilter
  roleChannel: HavingBigintFilter
}

input GuildConfigsHavingStddevPopulationInput {
  id: HavingBigintFilter
  logMember: HavingBigintFilter
  logMod: HavingBigintFilter
  logMsg: HavingBigintFilter
  maxMention: HavingIntFilter
  msgChannel: HavingBigintFilter
  muteDuration: HavingBigintFilter
  muteRole: HavingBigintFilter
  roleChannel: HavingBigintFilter
}

input GuildConfigsHavingStddevSampleInput {
  id: HavingBigintFilter
  logMember: HavingBigintFilter
  logMod: HavingBigintFilter
  logMsg: HavingBigintFilter
  maxMention: HavingIntFilter
  msgChannel: HavingBigintFilter
  muteDuration: HavingBigintFilter
  muteRole: HavingBigintFilter
  roleChannel: HavingBigintFilter
}

input GuildConfigsHavingSumInput {
  id: HavingBigintFilter
  logMember: HavingBigintFilter
  logMod: HavingBigintFilter
  logMsg: HavingBigintFilter
  maxMention: HavingIntFilter
  msgChannel: HavingBigintFilter
  muteDuration: HavingBigintFilter
  muteRole: HavingBigintFilter
  roleChannel: HavingBigintFilter
}

input GuildConfigsHavingVariancePopulationInput {
  id: HavingBigintFilter
  logMember: HavingBigintFilter
  logMod: HavingBigintFilter
  logMsg: HavingBigintFilter
  maxMention: HavingIntFilter
  msgChannel: HavingBigintFilter
  muteDuration: HavingBigintFilter
  muteRole: HavingBigintFilter
  roleChannel: HavingBigintFilter
}

input GuildConfigsHavingVarianceSampleInput {
  id: HavingBigintFilter
  logMember: HavingBigintFilter
  logMod: HavingBigintFilter
  logMsg: HavingBigintFilter
  maxMention: HavingIntFilter
  msgChannel: HavingBigintFilter
  muteDuration: HavingBigintFilter
  muteRole: HavingBigintFilter
  roleChannel: HavingBigintFilter
}

"""Methods to use when ordering `GuildConfig`."""
enum GuildConfigsOrderBy {
  DATA_ASC
  DATA_DESC
  DISABLED_CHANNELS_ASC
  DISABLED_CHANNELS_DESC
  ID_ASC
  ID_DESC
  INVITE_GUARD_ASC
  INVITE_GUARD_DESC
  JOIN_MSG_ASC
  JOIN_MSG_DESC
  JOIN_MSG_ENABLED_ASC
  JOIN_MSG_ENABLED_DESC
  JOIN_REACT_ASC
  JOIN_REACT_DESC
  LEAVE_MSG_ASC
  LEAVE_MSG_DESC
  LEAVE_MSG_ENABLED_ASC
  LEAVE_MSG_ENABLED_DESC
  LOG_MEMBER_ASC
  LOG_MEMBER_DESC
  LOG_MEMBER_ENABLED_ASC
  LOG_MEMBER_ENABLED_DESC
  LOG_MOD_ASC
  LOG_MOD_DESC
  LOG_MOD_ENABLED_ASC
  LOG_MOD_ENABLED_DESC
  LOG_MSG_ASC
  LOG_MSG_DESC
  LOG_MSG_ENABLED_ASC
  LOG_MSG_ENABLED_DESC
  MAX_MENTION_ASC
  MAX_MENTION_DESC
  MSG_CHANNEL_ASC
  MSG_CHANNEL_DESC
  MUTE_DM_ENABLED_ASC
  MUTE_DM_ENABLED_DESC
  MUTE_DM_TEXT_ASC
  MUTE_DM_TEXT_DESC
  MUTE_DURATION_ASC
  MUTE_DURATION_DESC
  MUTE_ROLE_ASC
  MUTE_ROLE_DESC
  NATURAL
  PREFIX_ASC
  PREFIX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_CHANNEL_ASC
  ROLE_CHANNEL_DESC
  ROLE_CONFIG_ASC
  ROLE_CONFIG_DESC
  ROLE_ENABLED_ASC
  ROLE_ENABLED_DESC
  WARN_DM_ENABLED_ASC
  WARN_DM_ENABLED_DESC
  WARN_DM_TEXT_ASC
  WARN_DM_TEXT_DESC
}

input HavingBigintFilter {
  equalTo: BigInt
  greaterThan: BigInt
  greaterThanOrEqualTo: BigInt
  lessThan: BigInt
  lessThanOrEqualTo: BigInt
  notEqualTo: BigInt
}

input HavingDatetimeFilter {
  equalTo: Datetime
  greaterThan: Datetime
  greaterThanOrEqualTo: Datetime
  lessThan: Datetime
  lessThanOrEqualTo: Datetime
  notEqualTo: Datetime
}

input HavingIntFilter {
  equalTo: Int
  greaterThan: Int
  greaterThanOrEqualTo: Int
  lessThan: Int
  lessThanOrEqualTo: Int
  notEqualTo: Int
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

enum LevelTimeframe {
  ALL_TIME
  DAY
  MONTH
  WEEK
}

"""All input for the `logout` mutation."""
input LogoutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `logout` mutation."""
type LogoutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Member implements Node {
  guildId: BigInt!
  joinTime: Datetime!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: BigInt!
}

type MemberAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: MemberAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: MemberDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: MemberMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: MemberMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: MemberStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: MemberStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: MemberSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: MemberVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: MemberVarianceSampleAggregates
}

type MemberAverageAggregates {
  """Mean average of guildId across the matching connection"""
  guildId: BigFloat

  """Mean average of userId across the matching connection"""
  userId: BigFloat
}

"""
A condition to be used against `Member` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MemberCondition {
  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `joinTime` field."""
  joinTime: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

type MemberDistinctCountAggregates {
  """Distinct count of guildId across the matching connection"""
  guildId: BigInt

  """Distinct count of joinTime across the matching connection"""
  joinTime: BigInt

  """Distinct count of userId across the matching connection"""
  userId: BigInt
}

"""
A filter to be used against `Member` object types. All fields are combined with a logical ‘and.’
"""
input MemberFilter {
  """Checks for all expressions in this list."""
  and: [MemberFilter!]

  """Filter by the object’s `guildId` field."""
  guildId: BigIntFilter

  """Filter by the object’s `joinTime` field."""
  joinTime: DatetimeFilter

  """Negates the expression."""
  not: MemberFilter

  """Checks for any expressions in this list."""
  or: [MemberFilter!]

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter
}

"""An input for mutations affecting `Member`"""
input MemberInput {
  guildId: BigInt!
  joinTime: Datetime!
  userId: BigInt!
}

type MemberMaxAggregates {
  """Maximum of guildId across the matching connection"""
  guildId: BigInt

  """Maximum of userId across the matching connection"""
  userId: BigInt
}

type MemberMinAggregates {
  """Minimum of guildId across the matching connection"""
  guildId: BigInt

  """Minimum of userId across the matching connection"""
  userId: BigInt
}

"""
Represents an update to a `Member`. Fields that are set will be updated.
"""
input MemberPatch {
  guildId: BigInt
  joinTime: Datetime
  userId: BigInt
}

type MemberStddevPopulationAggregates {
  """
  Population standard deviation of guildId across the matching connection
  """
  guildId: BigFloat

  """Population standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type MemberStddevSampleAggregates {
  """Sample standard deviation of guildId across the matching connection"""
  guildId: BigFloat

  """Sample standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type MemberSumAggregates {
  """Sum of guildId across the matching connection"""
  guildId: BigFloat!

  """Sum of userId across the matching connection"""
  userId: BigFloat!
}

type MemberVariancePopulationAggregates {
  """Population variance of guildId across the matching connection"""
  guildId: BigFloat

  """Population variance of userId across the matching connection"""
  userId: BigFloat
}

type MemberVarianceSampleAggregates {
  """Sample variance of guildId across the matching connection"""
  guildId: BigFloat

  """Sample variance of userId across the matching connection"""
  userId: BigFloat
}

"""A connection to a list of `Member` values."""
type MembersConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: MemberAggregates

  """
  A list of edges which contains the `Member` and cursor to aid in pagination.
  """
  edges: [MembersEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Member` for these aggregates."""
    groupBy: [MembersGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: MembersHavingInput
  ): [MemberAggregates!]

  """A list of `Member` objects."""
  nodes: [Member!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Member` you could get from the connection."""
  totalCount: Int!
}

"""A `Member` edge in the connection."""
type MembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Member` at the end of the edge."""
  node: Member!
}

"""Grouping methods for `Member` for usage during aggregation."""
enum MembersGroupBy {
  GUILD_ID
  JOIN_TIME
  JOIN_TIME_TRUNCATED_TO_DAY
  JOIN_TIME_TRUNCATED_TO_HOUR
  USER_ID
}

input MembersHavingAverageInput {
  guildId: HavingBigintFilter
  joinTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MembersHavingDistinctCountInput {
  guildId: HavingBigintFilter
  joinTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

"""Conditions for `Member` aggregates."""
input MembersHavingInput {
  AND: [MembersHavingInput!]
  OR: [MembersHavingInput!]
  average: MembersHavingAverageInput
  distinctCount: MembersHavingDistinctCountInput
  max: MembersHavingMaxInput
  min: MembersHavingMinInput
  stddevPopulation: MembersHavingStddevPopulationInput
  stddevSample: MembersHavingStddevSampleInput
  sum: MembersHavingSumInput
  variancePopulation: MembersHavingVariancePopulationInput
  varianceSample: MembersHavingVarianceSampleInput
}

input MembersHavingMaxInput {
  guildId: HavingBigintFilter
  joinTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MembersHavingMinInput {
  guildId: HavingBigintFilter
  joinTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MembersHavingStddevPopulationInput {
  guildId: HavingBigintFilter
  joinTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MembersHavingStddevSampleInput {
  guildId: HavingBigintFilter
  joinTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MembersHavingSumInput {
  guildId: HavingBigintFilter
  joinTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MembersHavingVariancePopulationInput {
  guildId: HavingBigintFilter
  joinTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MembersHavingVarianceSampleInput {
  guildId: HavingBigintFilter
  joinTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

"""Methods to use when ordering `Member`."""
enum MembersOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  JOIN_TIME_ASC
  JOIN_TIME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type Message {
  authorId: BigInt!
  channelId: BigInt!
  content: String!
  created: Datetime!
  guildId: BigInt!
  messageId: BigInt!
  msg: JSON!
}

type MessageAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: MessageAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: MessageDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: MessageMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: MessageMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: MessageStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: MessageStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: MessageSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: MessageVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: MessageVarianceSampleAggregates
}

type MessageAverageAggregates {
  """Mean average of authorId across the matching connection"""
  authorId: BigFloat

  """Mean average of channelId across the matching connection"""
  channelId: BigFloat

  """Mean average of guildId across the matching connection"""
  guildId: BigFloat

  """Mean average of messageId across the matching connection"""
  messageId: BigFloat
}

"""
A condition to be used against `Message` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MessageCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: BigInt

  """Checks for equality with the object’s `channelId` field."""
  channelId: BigInt

  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `messageId` field."""
  messageId: BigInt

  """Checks for equality with the object’s `msg` field."""
  msg: JSON
}

type MessageDistinctCountAggregates {
  """Distinct count of authorId across the matching connection"""
  authorId: BigInt

  """Distinct count of channelId across the matching connection"""
  channelId: BigInt

  """Distinct count of content across the matching connection"""
  content: BigInt

  """Distinct count of created across the matching connection"""
  created: BigInt

  """Distinct count of guildId across the matching connection"""
  guildId: BigInt

  """Distinct count of messageId across the matching connection"""
  messageId: BigInt

  """Distinct count of msg across the matching connection"""
  msg: BigInt
}

"""
A filter to be used against `Message` object types. All fields are combined with a logical ‘and.’
"""
input MessageFilter {
  """Checks for all expressions in this list."""
  and: [MessageFilter!]

  """Filter by the object’s `authorId` field."""
  authorId: BigIntFilter

  """Filter by the object’s `channelId` field."""
  channelId: BigIntFilter

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `guildId` field."""
  guildId: BigIntFilter

  """Filter by the object’s `messageId` field."""
  messageId: BigIntFilter

  """Filter by the object’s `msg` field."""
  msg: JSONFilter

  """Negates the expression."""
  not: MessageFilter

  """Checks for any expressions in this list."""
  or: [MessageFilter!]
}

"""An input for mutations affecting `Message`"""
input MessageInput {
  authorId: BigInt!
  channelId: BigInt!
  content: String!
  created: Datetime!
  guildId: BigInt!
  messageId: BigInt!
  msg: JSON!
}

type MessageMaxAggregates {
  """Maximum of authorId across the matching connection"""
  authorId: BigInt

  """Maximum of channelId across the matching connection"""
  channelId: BigInt

  """Maximum of guildId across the matching connection"""
  guildId: BigInt

  """Maximum of messageId across the matching connection"""
  messageId: BigInt
}

type MessageMinAggregates {
  """Minimum of authorId across the matching connection"""
  authorId: BigInt

  """Minimum of channelId across the matching connection"""
  channelId: BigInt

  """Minimum of guildId across the matching connection"""
  guildId: BigInt

  """Minimum of messageId across the matching connection"""
  messageId: BigInt
}

type MessageStddevPopulationAggregates {
  """
  Population standard deviation of authorId across the matching connection
  """
  authorId: BigFloat

  """
  Population standard deviation of channelId across the matching connection
  """
  channelId: BigFloat

  """
  Population standard deviation of guildId across the matching connection
  """
  guildId: BigFloat

  """
  Population standard deviation of messageId across the matching connection
  """
  messageId: BigFloat
}

type MessageStddevSampleAggregates {
  """Sample standard deviation of authorId across the matching connection"""
  authorId: BigFloat

  """Sample standard deviation of channelId across the matching connection"""
  channelId: BigFloat

  """Sample standard deviation of guildId across the matching connection"""
  guildId: BigFloat

  """Sample standard deviation of messageId across the matching connection"""
  messageId: BigFloat
}

type MessageSumAggregates {
  """Sum of authorId across the matching connection"""
  authorId: BigFloat!

  """Sum of channelId across the matching connection"""
  channelId: BigFloat!

  """Sum of guildId across the matching connection"""
  guildId: BigFloat!

  """Sum of messageId across the matching connection"""
  messageId: BigFloat!
}

type MessageVariancePopulationAggregates {
  """Population variance of authorId across the matching connection"""
  authorId: BigFloat

  """Population variance of channelId across the matching connection"""
  channelId: BigFloat

  """Population variance of guildId across the matching connection"""
  guildId: BigFloat

  """Population variance of messageId across the matching connection"""
  messageId: BigFloat
}

type MessageVarianceSampleAggregates {
  """Sample variance of authorId across the matching connection"""
  authorId: BigFloat

  """Sample variance of channelId across the matching connection"""
  channelId: BigFloat

  """Sample variance of guildId across the matching connection"""
  guildId: BigFloat

  """Sample variance of messageId across the matching connection"""
  messageId: BigFloat
}

"""A connection to a list of `Message` values."""
type MessagesConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: MessageAggregates

  """
  A list of edges which contains the `Message` and cursor to aid in pagination.
  """
  edges: [MessagesEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Message` for these aggregates."""
    groupBy: [MessagesGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: MessagesHavingInput
  ): [MessageAggregates!]

  """A list of `Message` objects."""
  nodes: [Message!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Message` you could get from the connection."""
  totalCount: Int!
}

"""A `Message` edge in the connection."""
type MessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Message` at the end of the edge."""
  node: Message!
}

"""Grouping methods for `Message` for usage during aggregation."""
enum MessagesGroupBy {
  AUTHOR_ID
  CHANNEL_ID
  CONTENT
  CREATED
  CREATED_TRUNCATED_TO_DAY
  CREATED_TRUNCATED_TO_HOUR
  GUILD_ID
  MESSAGE_ID
  MSG
}

input MessagesHavingAverageInput {
  authorId: HavingBigintFilter
  channelId: HavingBigintFilter
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  messageId: HavingBigintFilter
}

input MessagesHavingDistinctCountInput {
  authorId: HavingBigintFilter
  channelId: HavingBigintFilter
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  messageId: HavingBigintFilter
}

"""Conditions for `Message` aggregates."""
input MessagesHavingInput {
  AND: [MessagesHavingInput!]
  OR: [MessagesHavingInput!]
  average: MessagesHavingAverageInput
  distinctCount: MessagesHavingDistinctCountInput
  max: MessagesHavingMaxInput
  min: MessagesHavingMinInput
  stddevPopulation: MessagesHavingStddevPopulationInput
  stddevSample: MessagesHavingStddevSampleInput
  sum: MessagesHavingSumInput
  variancePopulation: MessagesHavingVariancePopulationInput
  varianceSample: MessagesHavingVarianceSampleInput
}

input MessagesHavingMaxInput {
  authorId: HavingBigintFilter
  channelId: HavingBigintFilter
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  messageId: HavingBigintFilter
}

input MessagesHavingMinInput {
  authorId: HavingBigintFilter
  channelId: HavingBigintFilter
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  messageId: HavingBigintFilter
}

input MessagesHavingStddevPopulationInput {
  authorId: HavingBigintFilter
  channelId: HavingBigintFilter
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  messageId: HavingBigintFilter
}

input MessagesHavingStddevSampleInput {
  authorId: HavingBigintFilter
  channelId: HavingBigintFilter
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  messageId: HavingBigintFilter
}

input MessagesHavingSumInput {
  authorId: HavingBigintFilter
  channelId: HavingBigintFilter
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  messageId: HavingBigintFilter
}

input MessagesHavingVariancePopulationInput {
  authorId: HavingBigintFilter
  channelId: HavingBigintFilter
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  messageId: HavingBigintFilter
}

input MessagesHavingVarianceSampleInput {
  authorId: HavingBigintFilter
  channelId: HavingBigintFilter
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  messageId: HavingBigintFilter
}

"""Methods to use when ordering `Message`."""
enum MessagesOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CHANNEL_ID_ASC
  CHANNEL_ID_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_ASC
  CREATED_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  MESSAGE_ID_ASC
  MESSAGE_ID_DESC
  MSG_ASC
  MSG_DESC
  NATURAL
}

type ModLog implements Node {
  action: String!
  actionTime: Datetime!
  attachments: [String]!
  caseId: BigInt!
  executorId: BigInt
  guildId: BigInt!
  msgId: BigInt

  """Reads and enables pagination through a set of `Mute`."""
  mutesByGuildIdAndCaseId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MuteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MuteFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Mute`."""
    orderBy: [MutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MutesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pending: Boolean!
  reason: String
  userId: BigInt!
  userTag: String!
}

type ModLogAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: ModLogAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: ModLogDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: ModLogMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: ModLogMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: ModLogStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: ModLogStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: ModLogSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: ModLogVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: ModLogVarianceSampleAggregates
}

type ModLogAverageAggregates {
  """Mean average of caseId across the matching connection"""
  caseId: BigFloat

  """Mean average of executorId across the matching connection"""
  executorId: BigFloat

  """Mean average of guildId across the matching connection"""
  guildId: BigFloat

  """Mean average of msgId across the matching connection"""
  msgId: BigFloat

  """Mean average of userId across the matching connection"""
  userId: BigFloat
}

"""
A condition to be used against `ModLog` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ModLogCondition {
  """Checks for equality with the object’s `action` field."""
  action: String

  """Checks for equality with the object’s `actionTime` field."""
  actionTime: Datetime

  """Checks for equality with the object’s `attachments` field."""
  attachments: [String]

  """Checks for equality with the object’s `caseId` field."""
  caseId: BigInt

  """Checks for equality with the object’s `executorId` field."""
  executorId: BigInt

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `msgId` field."""
  msgId: BigInt

  """Checks for equality with the object’s `pending` field."""
  pending: Boolean

  """Checks for equality with the object’s `reason` field."""
  reason: String

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt

  """Checks for equality with the object’s `userTag` field."""
  userTag: String
}

type ModLogDistinctCountAggregates {
  """Distinct count of action across the matching connection"""
  action: BigInt

  """Distinct count of actionTime across the matching connection"""
  actionTime: BigInt

  """Distinct count of attachments across the matching connection"""
  attachments: BigInt

  """Distinct count of caseId across the matching connection"""
  caseId: BigInt

  """Distinct count of executorId across the matching connection"""
  executorId: BigInt

  """Distinct count of guildId across the matching connection"""
  guildId: BigInt

  """Distinct count of msgId across the matching connection"""
  msgId: BigInt

  """Distinct count of pending across the matching connection"""
  pending: BigInt

  """Distinct count of reason across the matching connection"""
  reason: BigInt

  """Distinct count of userId across the matching connection"""
  userId: BigInt

  """Distinct count of userTag across the matching connection"""
  userTag: BigInt
}

"""
A filter to be used against `ModLog` object types. All fields are combined with a logical ‘and.’
"""
input ModLogFilter {
  """Filter by the object’s `action` field."""
  action: StringFilter

  """Filter by the object’s `actionTime` field."""
  actionTime: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ModLogFilter!]

  """Filter by the object’s `attachments` field."""
  attachments: StringListFilter

  """Filter by the object’s `caseId` field."""
  caseId: BigIntFilter

  """Filter by the object’s `executorId` field."""
  executorId: BigIntFilter

  """Filter by the object’s `guildId` field."""
  guildId: BigIntFilter

  """Filter by the object’s `msgId` field."""
  msgId: BigIntFilter

  """Negates the expression."""
  not: ModLogFilter

  """Checks for any expressions in this list."""
  or: [ModLogFilter!]

  """Filter by the object’s `pending` field."""
  pending: BooleanFilter

  """Filter by the object’s `reason` field."""
  reason: StringFilter

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter

  """Filter by the object’s `userTag` field."""
  userTag: StringFilter
}

"""An input for mutations affecting `ModLog`"""
input ModLogInput {
  action: String!
  actionTime: Datetime!
  attachments: [String]
  caseId: BigInt!
  executorId: BigInt
  guildId: BigInt!
  msgId: BigInt
  pending: Boolean!
  reason: String
  userId: BigInt!
  userTag: String!
}

type ModLogMaxAggregates {
  """Maximum of caseId across the matching connection"""
  caseId: BigInt

  """Maximum of executorId across the matching connection"""
  executorId: BigInt

  """Maximum of guildId across the matching connection"""
  guildId: BigInt

  """Maximum of msgId across the matching connection"""
  msgId: BigInt

  """Maximum of userId across the matching connection"""
  userId: BigInt
}

type ModLogMinAggregates {
  """Minimum of caseId across the matching connection"""
  caseId: BigInt

  """Minimum of executorId across the matching connection"""
  executorId: BigInt

  """Minimum of guildId across the matching connection"""
  guildId: BigInt

  """Minimum of msgId across the matching connection"""
  msgId: BigInt

  """Minimum of userId across the matching connection"""
  userId: BigInt
}

"""
Represents an update to a `ModLog`. Fields that are set will be updated.
"""
input ModLogPatch {
  action: String
  actionTime: Datetime
  attachments: [String]
  caseId: BigInt
  executorId: BigInt
  guildId: BigInt
  msgId: BigInt
  pending: Boolean
  reason: String
  userId: BigInt
  userTag: String
}

type ModLogStddevPopulationAggregates {
  """Population standard deviation of caseId across the matching connection"""
  caseId: BigFloat

  """
  Population standard deviation of executorId across the matching connection
  """
  executorId: BigFloat

  """
  Population standard deviation of guildId across the matching connection
  """
  guildId: BigFloat

  """Population standard deviation of msgId across the matching connection"""
  msgId: BigFloat

  """Population standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type ModLogStddevSampleAggregates {
  """Sample standard deviation of caseId across the matching connection"""
  caseId: BigFloat

  """Sample standard deviation of executorId across the matching connection"""
  executorId: BigFloat

  """Sample standard deviation of guildId across the matching connection"""
  guildId: BigFloat

  """Sample standard deviation of msgId across the matching connection"""
  msgId: BigFloat

  """Sample standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type ModLogSumAggregates {
  """Sum of caseId across the matching connection"""
  caseId: BigFloat!

  """Sum of executorId across the matching connection"""
  executorId: BigFloat!

  """Sum of guildId across the matching connection"""
  guildId: BigFloat!

  """Sum of msgId across the matching connection"""
  msgId: BigFloat!

  """Sum of userId across the matching connection"""
  userId: BigFloat!
}

type ModLogVariancePopulationAggregates {
  """Population variance of caseId across the matching connection"""
  caseId: BigFloat

  """Population variance of executorId across the matching connection"""
  executorId: BigFloat

  """Population variance of guildId across the matching connection"""
  guildId: BigFloat

  """Population variance of msgId across the matching connection"""
  msgId: BigFloat

  """Population variance of userId across the matching connection"""
  userId: BigFloat
}

type ModLogVarianceSampleAggregates {
  """Sample variance of caseId across the matching connection"""
  caseId: BigFloat

  """Sample variance of executorId across the matching connection"""
  executorId: BigFloat

  """Sample variance of guildId across the matching connection"""
  guildId: BigFloat

  """Sample variance of msgId across the matching connection"""
  msgId: BigFloat

  """Sample variance of userId across the matching connection"""
  userId: BigFloat
}

"""A connection to a list of `ModLog` values."""
type ModLogsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: ModLogAggregates

  """
  A list of edges which contains the `ModLog` and cursor to aid in pagination.
  """
  edges: [ModLogsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `ModLog` for these aggregates."""
    groupBy: [ModLogsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: ModLogsHavingInput
  ): [ModLogAggregates!]

  """A list of `ModLog` objects."""
  nodes: [ModLog!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ModLog` you could get from the connection."""
  totalCount: Int!
}

"""A `ModLog` edge in the connection."""
type ModLogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ModLog` at the end of the edge."""
  node: ModLog!
}

"""Grouping methods for `ModLog` for usage during aggregation."""
enum ModLogsGroupBy {
  ACTION
  ACTION_TIME
  ACTION_TIME_TRUNCATED_TO_DAY
  ACTION_TIME_TRUNCATED_TO_HOUR
  ATTACHMENTS
  CASE_ID
  EXECUTOR_ID
  GUILD_ID
  MSG_ID
  PENDING
  REASON
  USER_ID
  USER_TAG
}

input ModLogsHavingAverageInput {
  actionTime: HavingDatetimeFilter
  caseId: HavingBigintFilter
  executorId: HavingBigintFilter
  guildId: HavingBigintFilter
  msgId: HavingBigintFilter
  userId: HavingBigintFilter
}

input ModLogsHavingDistinctCountInput {
  actionTime: HavingDatetimeFilter
  caseId: HavingBigintFilter
  executorId: HavingBigintFilter
  guildId: HavingBigintFilter
  msgId: HavingBigintFilter
  userId: HavingBigintFilter
}

"""Conditions for `ModLog` aggregates."""
input ModLogsHavingInput {
  AND: [ModLogsHavingInput!]
  OR: [ModLogsHavingInput!]
  average: ModLogsHavingAverageInput
  distinctCount: ModLogsHavingDistinctCountInput
  max: ModLogsHavingMaxInput
  min: ModLogsHavingMinInput
  stddevPopulation: ModLogsHavingStddevPopulationInput
  stddevSample: ModLogsHavingStddevSampleInput
  sum: ModLogsHavingSumInput
  variancePopulation: ModLogsHavingVariancePopulationInput
  varianceSample: ModLogsHavingVarianceSampleInput
}

input ModLogsHavingMaxInput {
  actionTime: HavingDatetimeFilter
  caseId: HavingBigintFilter
  executorId: HavingBigintFilter
  guildId: HavingBigintFilter
  msgId: HavingBigintFilter
  userId: HavingBigintFilter
}

input ModLogsHavingMinInput {
  actionTime: HavingDatetimeFilter
  caseId: HavingBigintFilter
  executorId: HavingBigintFilter
  guildId: HavingBigintFilter
  msgId: HavingBigintFilter
  userId: HavingBigintFilter
}

input ModLogsHavingStddevPopulationInput {
  actionTime: HavingDatetimeFilter
  caseId: HavingBigintFilter
  executorId: HavingBigintFilter
  guildId: HavingBigintFilter
  msgId: HavingBigintFilter
  userId: HavingBigintFilter
}

input ModLogsHavingStddevSampleInput {
  actionTime: HavingDatetimeFilter
  caseId: HavingBigintFilter
  executorId: HavingBigintFilter
  guildId: HavingBigintFilter
  msgId: HavingBigintFilter
  userId: HavingBigintFilter
}

input ModLogsHavingSumInput {
  actionTime: HavingDatetimeFilter
  caseId: HavingBigintFilter
  executorId: HavingBigintFilter
  guildId: HavingBigintFilter
  msgId: HavingBigintFilter
  userId: HavingBigintFilter
}

input ModLogsHavingVariancePopulationInput {
  actionTime: HavingDatetimeFilter
  caseId: HavingBigintFilter
  executorId: HavingBigintFilter
  guildId: HavingBigintFilter
  msgId: HavingBigintFilter
  userId: HavingBigintFilter
}

input ModLogsHavingVarianceSampleInput {
  actionTime: HavingDatetimeFilter
  caseId: HavingBigintFilter
  executorId: HavingBigintFilter
  guildId: HavingBigintFilter
  msgId: HavingBigintFilter
  userId: HavingBigintFilter
}

"""Methods to use when ordering `ModLog`."""
enum ModLogsOrderBy {
  ACTION_ASC
  ACTION_DESC
  ACTION_TIME_ASC
  ACTION_TIME_DESC
  ATTACHMENTS_ASC
  ATTACHMENTS_DESC
  CASE_ID_ASC
  CASE_ID_DESC
  EXECUTOR_ID_ASC
  EXECUTOR_ID_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  MSG_ID_ASC
  MSG_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_AVERAGE_CASE_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_AVERAGE_CASE_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_AVERAGE_END_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_AVERAGE_END_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_AVERAGE_GUILD_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_AVERAGE_GUILD_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_AVERAGE_PENDING_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_AVERAGE_PENDING_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_AVERAGE_START_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_AVERAGE_START_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_AVERAGE_USER_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_AVERAGE_USER_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_COUNT_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_COUNT_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_DISTINCT_COUNT_CASE_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_DISTINCT_COUNT_CASE_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_DISTINCT_COUNT_END_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_DISTINCT_COUNT_END_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_DISTINCT_COUNT_GUILD_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_DISTINCT_COUNT_GUILD_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_DISTINCT_COUNT_PENDING_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_DISTINCT_COUNT_PENDING_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_DISTINCT_COUNT_START_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_DISTINCT_COUNT_START_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_DISTINCT_COUNT_USER_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_DISTINCT_COUNT_USER_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MAX_CASE_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MAX_CASE_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MAX_END_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MAX_END_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MAX_GUILD_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MAX_GUILD_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MAX_PENDING_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MAX_PENDING_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MAX_START_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MAX_START_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MAX_USER_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MAX_USER_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MIN_CASE_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MIN_CASE_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MIN_END_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MIN_END_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MIN_GUILD_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MIN_GUILD_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MIN_PENDING_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MIN_PENDING_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MIN_START_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MIN_START_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MIN_USER_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_MIN_USER_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_POPULATION_CASE_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_POPULATION_CASE_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_POPULATION_END_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_POPULATION_END_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_POPULATION_GUILD_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_POPULATION_GUILD_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_POPULATION_PENDING_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_POPULATION_PENDING_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_POPULATION_START_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_POPULATION_START_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_POPULATION_USER_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_POPULATION_USER_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_SAMPLE_CASE_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_SAMPLE_CASE_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_SAMPLE_END_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_SAMPLE_END_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_SAMPLE_GUILD_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_SAMPLE_GUILD_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_SAMPLE_PENDING_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_SAMPLE_PENDING_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_SAMPLE_START_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_SAMPLE_START_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_SAMPLE_USER_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_STDDEV_SAMPLE_USER_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_SUM_CASE_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_SUM_CASE_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_SUM_END_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_SUM_END_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_SUM_GUILD_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_SUM_GUILD_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_SUM_PENDING_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_SUM_PENDING_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_SUM_START_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_SUM_START_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_SUM_USER_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_SUM_USER_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_POPULATION_CASE_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_POPULATION_CASE_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_POPULATION_END_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_POPULATION_END_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_POPULATION_GUILD_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_POPULATION_GUILD_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_POPULATION_PENDING_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_POPULATION_PENDING_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_POPULATION_START_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_POPULATION_START_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_POPULATION_USER_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_POPULATION_USER_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_SAMPLE_CASE_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_SAMPLE_CASE_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_SAMPLE_END_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_SAMPLE_END_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_SAMPLE_GUILD_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_SAMPLE_GUILD_ID_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_SAMPLE_PENDING_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_SAMPLE_PENDING_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_SAMPLE_START_TIME_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_SAMPLE_START_TIME_DESC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_SAMPLE_USER_ID_ASC
  MUTES_BY_GUILD_ID_AND_CASE_ID_VARIANCE_SAMPLE_USER_ID_DESC
  NATURAL
  PENDING_ASC
  PENDING_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REASON_ASC
  REASON_DESC
  USER_ID_ASC
  USER_ID_DESC
  USER_TAG_ASC
  USER_TAG_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  addRoleMenuRoles(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddRoleMenuRolesInput!
  ): AddRoleMenuRolesPayload

  """Creates a single `BotStat`."""
  createBotStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBotStatInput!
  ): CreateBotStatPayload

  """Creates a single `CachedGuild`."""
  createCachedGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCachedGuildInput!
  ): CreateCachedGuildPayload

  """Creates a single `CachedUser`."""
  createCachedUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCachedUserInput!
  ): CreateCachedUserPayload

  """Creates a single `Feed`."""
  createFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFeedInput!
  ): CreateFeedPayload

  """Creates a single `FeedItem`."""
  createFeedItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFeedItemInput!
  ): CreateFeedItemPayload

  """Creates a single `FeedSubscription`."""
  createFeedSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFeedSubscriptionInput!
  ): CreateFeedSubscriptionPayload

  """Creates a single `GuildBan`."""
  createGuildBan(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGuildBanInput!
  ): CreateGuildBanPayload

  """Creates a single `GuildConfig`."""
  createGuildConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGuildConfigInput!
  ): CreateGuildConfigPayload

  """Creates a single `Member`."""
  createMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMemberInput!
  ): CreateMemberPayload

  """Creates a single `Message`."""
  createMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMessageInput!
  ): CreateMessagePayload

  """Creates a single `ModLog`."""
  createModLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateModLogInput!
  ): CreateModLogPayload

  """Creates a single `Mute`."""
  createMute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMuteInput!
  ): CreateMutePayload

  """Creates a single `Notification`."""
  createNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNotificationInput!
  ): CreateNotificationPayload

  """Creates a single `Reminder`."""
  createReminder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReminderInput!
  ): CreateReminderPayload

  """Creates a single `RoleMenu`."""
  createRoleMenu(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoleMenuInput!
  ): CreateRoleMenuPayload

  """Creates a single `RoleMenuRole`."""
  createRoleMenuRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoleMenuRoleInput!
  ): CreateRoleMenuRolePayload

  """Creates a single `Tag`."""
  createTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTagInput!
  ): CreateTagPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserLevel`."""
  createUserLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserLevelInput!
  ): CreateUserLevelPayload

  """Creates a single `WebUser`."""
  createWebUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWebUserInput!
  ): CreateWebUserPayload

  """Creates a single `WebUserGuild`."""
  createWebUserGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWebUserGuildInput!
  ): CreateWebUserGuildPayload

  """Deletes a single `BotStat` using its globally unique id."""
  deleteBotStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBotStatInput!
  ): DeleteBotStatPayload

  """Deletes a single `BotStat` using a unique key."""
  deleteBotStatByNameAndCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBotStatByNameAndCategoryInput!
  ): DeleteBotStatPayload

  """Deletes a single `CachedGuild` using its globally unique id."""
  deleteCachedGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCachedGuildInput!
  ): DeleteCachedGuildPayload

  """Deletes a single `CachedGuild` using a unique key."""
  deleteCachedGuildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCachedGuildByIdInput!
  ): DeleteCachedGuildPayload

  """Deletes a single `CachedUser` using its globally unique id."""
  deleteCachedUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCachedUserInput!
  ): DeleteCachedUserPayload

  """Deletes a single `CachedUser` using a unique key."""
  deleteCachedUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCachedUserByIdInput!
  ): DeleteCachedUserPayload

  """Deletes a single `Feed` using its globally unique id."""
  deleteFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedInput!
  ): DeleteFeedPayload

  """Deletes a single `Feed` using a unique key."""
  deleteFeedByFeedId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedByFeedIdInput!
  ): DeleteFeedPayload

  """Deletes a single `FeedItem` using its globally unique id."""
  deleteFeedItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedItemInput!
  ): DeleteFeedItemPayload

  """Deletes a single `FeedItem` using a unique key."""
  deleteFeedItemByFeedIdAndItemId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedItemByFeedIdAndItemIdInput!
  ): DeleteFeedItemPayload

  """Deletes a single `FeedSubscription` using its globally unique id."""
  deleteFeedSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedSubscriptionInput!
  ): DeleteFeedSubscriptionPayload

  """Deletes a single `FeedSubscription` using a unique key."""
  deleteFeedSubscriptionByFeedIdAndChannelId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedSubscriptionByFeedIdAndChannelIdInput!
  ): DeleteFeedSubscriptionPayload

  """Deletes a single `GuildBan` using its globally unique id."""
  deleteGuildBan(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuildBanInput!
  ): DeleteGuildBanPayload

  """Deletes a single `GuildBan` using a unique key."""
  deleteGuildBanByGuildIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuildBanByGuildIdAndUserIdInput!
  ): DeleteGuildBanPayload

  """Deletes a single `GuildConfig` using its globally unique id."""
  deleteGuildConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuildConfigInput!
  ): DeleteGuildConfigPayload

  """Deletes a single `GuildConfig` using a unique key."""
  deleteGuildConfigById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuildConfigByIdInput!
  ): DeleteGuildConfigPayload

  """Deletes a single `Member` using its globally unique id."""
  deleteMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberInput!
  ): DeleteMemberPayload

  """Deletes a single `Member` using a unique key."""
  deleteMemberByGuildIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberByGuildIdAndUserIdInput!
  ): DeleteMemberPayload

  """Deletes a single `ModLog` using its globally unique id."""
  deleteModLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteModLogInput!
  ): DeleteModLogPayload

  """Deletes a single `ModLog` using a unique key."""
  deleteModLogByGuildIdAndCaseId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteModLogByGuildIdAndCaseIdInput!
  ): DeleteModLogPayload

  """Deletes a single `Mute` using its globally unique id."""
  deleteMute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMuteInput!
  ): DeleteMutePayload

  """Deletes a single `Mute` using a unique key."""
  deleteMuteByGuildIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMuteByGuildIdAndUserIdInput!
  ): DeleteMutePayload

  """Deletes a single `Notification` using its globally unique id."""
  deleteNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationInput!
  ): DeleteNotificationPayload

  """Deletes a single `Notification` using a unique key."""
  deleteNotificationByUserIdAndGuildIdAndKeyword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationByUserIdAndGuildIdAndKeywordInput!
  ): DeleteNotificationPayload

  """Deletes a single `Reminder` using its globally unique id."""
  deleteReminder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReminderInput!
  ): DeleteReminderPayload

  """Deletes a single `Reminder` using a unique key."""
  deleteReminderByUserIdAndSetAt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReminderByUserIdAndSetAtInput!
  ): DeleteReminderPayload

  """Deletes a single `RoleMenu` using its globally unique id."""
  deleteRoleMenu(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleMenuInput!
  ): DeleteRoleMenuPayload

  """Deletes a single `RoleMenu` using a unique key."""
  deleteRoleMenuByGuildIdAndMenuName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleMenuByGuildIdAndMenuNameInput!
  ): DeleteRoleMenuPayload

  """Deletes a single `RoleMenuRole` using its globally unique id."""
  deleteRoleMenuRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleMenuRoleInput!
  ): DeleteRoleMenuRolePayload

  """Deletes a single `RoleMenuRole` using a unique key."""
  deleteRoleMenuRoleByGuildIdAndMenuNameAndRoleId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleMenuRoleByGuildIdAndMenuNameAndRoleIdInput!
  ): DeleteRoleMenuRolePayload
  deleteRoleMenuRoles(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleMenuRolesInput!
  ): DeleteRoleMenuRolesPayload

  """Deletes a single `Tag` using its globally unique id."""
  deleteTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagInput!
  ): DeleteTagPayload

  """Deletes a single `Tag` using a unique key."""
  deleteTagByGuildIdAndTagName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagByGuildIdAndTagNameInput!
  ): DeleteTagPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `UserLevel` using its globally unique id."""
  deleteUserLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserLevelInput!
  ): DeleteUserLevelPayload

  """Deletes a single `UserLevel` using a unique key."""
  deleteUserLevelByUserIdAndGuildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserLevelByUserIdAndGuildIdInput!
  ): DeleteUserLevelPayload

  """Deletes a single `WebUser` using its globally unique id."""
  deleteWebUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWebUserInput!
  ): DeleteWebUserPayload

  """Deletes a single `WebUser` using a unique key."""
  deleteWebUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWebUserByIdInput!
  ): DeleteWebUserPayload

  """Deletes a single `WebUserGuild` using its globally unique id."""
  deleteWebUserGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWebUserGuildInput!
  ): DeleteWebUserGuildPayload

  """Deletes a single `WebUserGuild` using a unique key."""
  deleteWebUserGuildByUserIdAndGuildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWebUserGuildByUserIdAndGuildIdInput!
  ): DeleteWebUserGuildPayload
  graphql(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GraphqlInput!
  ): GraphqlPayload
  logout(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LogoutInput!
  ): LogoutPayload

  """Updates a single `BotStat` using its globally unique id and a patch."""
  updateBotStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBotStatInput!
  ): UpdateBotStatPayload

  """Updates a single `BotStat` using a unique key and a patch."""
  updateBotStatByNameAndCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBotStatByNameAndCategoryInput!
  ): UpdateBotStatPayload

  """
  Updates a single `CachedGuild` using its globally unique id and a patch.
  """
  updateCachedGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCachedGuildInput!
  ): UpdateCachedGuildPayload

  """Updates a single `CachedGuild` using a unique key and a patch."""
  updateCachedGuildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCachedGuildByIdInput!
  ): UpdateCachedGuildPayload

  """
  Updates a single `CachedUser` using its globally unique id and a patch.
  """
  updateCachedUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCachedUserInput!
  ): UpdateCachedUserPayload

  """Updates a single `CachedUser` using a unique key and a patch."""
  updateCachedUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCachedUserByIdInput!
  ): UpdateCachedUserPayload

  """Updates a single `Feed` using its globally unique id and a patch."""
  updateFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedInput!
  ): UpdateFeedPayload

  """Updates a single `Feed` using a unique key and a patch."""
  updateFeedByFeedId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedByFeedIdInput!
  ): UpdateFeedPayload

  """Updates a single `FeedItem` using its globally unique id and a patch."""
  updateFeedItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedItemInput!
  ): UpdateFeedItemPayload

  """Updates a single `FeedItem` using a unique key and a patch."""
  updateFeedItemByFeedIdAndItemId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedItemByFeedIdAndItemIdInput!
  ): UpdateFeedItemPayload

  """
  Updates a single `FeedSubscription` using its globally unique id and a patch.
  """
  updateFeedSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedSubscriptionInput!
  ): UpdateFeedSubscriptionPayload

  """Updates a single `FeedSubscription` using a unique key and a patch."""
  updateFeedSubscriptionByFeedIdAndChannelId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedSubscriptionByFeedIdAndChannelIdInput!
  ): UpdateFeedSubscriptionPayload

  """Updates a single `GuildBan` using its globally unique id and a patch."""
  updateGuildBan(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuildBanInput!
  ): UpdateGuildBanPayload

  """Updates a single `GuildBan` using a unique key and a patch."""
  updateGuildBanByGuildIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuildBanByGuildIdAndUserIdInput!
  ): UpdateGuildBanPayload

  """
  Updates a single `GuildConfig` using its globally unique id and a patch.
  """
  updateGuildConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuildConfigInput!
  ): UpdateGuildConfigPayload

  """Updates a single `GuildConfig` using a unique key and a patch."""
  updateGuildConfigById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuildConfigByIdInput!
  ): UpdateGuildConfigPayload

  """Updates a single `Member` using its globally unique id and a patch."""
  updateMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberInput!
  ): UpdateMemberPayload

  """Updates a single `Member` using a unique key and a patch."""
  updateMemberByGuildIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberByGuildIdAndUserIdInput!
  ): UpdateMemberPayload

  """Updates a single `ModLog` using its globally unique id and a patch."""
  updateModLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateModLogInput!
  ): UpdateModLogPayload

  """Updates a single `ModLog` using a unique key and a patch."""
  updateModLogByGuildIdAndCaseId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateModLogByGuildIdAndCaseIdInput!
  ): UpdateModLogPayload

  """Updates a single `Mute` using its globally unique id and a patch."""
  updateMute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMuteInput!
  ): UpdateMutePayload

  """Updates a single `Mute` using a unique key and a patch."""
  updateMuteByGuildIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMuteByGuildIdAndUserIdInput!
  ): UpdateMutePayload

  """
  Updates a single `Notification` using its globally unique id and a patch.
  """
  updateNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationInput!
  ): UpdateNotificationPayload

  """Updates a single `Notification` using a unique key and a patch."""
  updateNotificationByUserIdAndGuildIdAndKeyword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationByUserIdAndGuildIdAndKeywordInput!
  ): UpdateNotificationPayload

  """Updates a single `Reminder` using its globally unique id and a patch."""
  updateReminder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReminderInput!
  ): UpdateReminderPayload

  """Updates a single `Reminder` using a unique key and a patch."""
  updateReminderByUserIdAndSetAt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReminderByUserIdAndSetAtInput!
  ): UpdateReminderPayload

  """Updates a single `RoleMenu` using its globally unique id and a patch."""
  updateRoleMenu(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleMenuInput!
  ): UpdateRoleMenuPayload

  """Updates a single `RoleMenu` using a unique key and a patch."""
  updateRoleMenuByGuildIdAndMenuName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleMenuByGuildIdAndMenuNameInput!
  ): UpdateRoleMenuPayload

  """
  Updates a single `RoleMenuRole` using its globally unique id and a patch.
  """
  updateRoleMenuRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleMenuRoleInput!
  ): UpdateRoleMenuRolePayload

  """Updates a single `RoleMenuRole` using a unique key and a patch."""
  updateRoleMenuRoleByGuildIdAndMenuNameAndRoleId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleMenuRoleByGuildIdAndMenuNameAndRoleIdInput!
  ): UpdateRoleMenuRolePayload

  """Updates a single `Tag` using its globally unique id and a patch."""
  updateTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagInput!
  ): UpdateTagPayload

  """Updates a single `Tag` using a unique key and a patch."""
  updateTagByGuildIdAndTagName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagByGuildIdAndTagNameInput!
  ): UpdateTagPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """Updates a single `UserLevel` using its globally unique id and a patch."""
  updateUserLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserLevelInput!
  ): UpdateUserLevelPayload

  """Updates a single `UserLevel` using a unique key and a patch."""
  updateUserLevelByUserIdAndGuildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserLevelByUserIdAndGuildIdInput!
  ): UpdateUserLevelPayload

  """Updates a single `WebUser` using its globally unique id and a patch."""
  updateWebUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWebUserInput!
  ): UpdateWebUserPayload

  """Updates a single `WebUser` using a unique key and a patch."""
  updateWebUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWebUserByIdInput!
  ): UpdateWebUserPayload

  """
  Updates a single `WebUserGuild` using its globally unique id and a patch.
  """
  updateWebUserGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWebUserGuildInput!
  ): UpdateWebUserGuildPayload

  """Updates a single `WebUserGuild` using a unique key and a patch."""
  updateWebUserGuildByUserIdAndGuildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWebUserGuildByUserIdAndGuildIdInput!
  ): UpdateWebUserGuildPayload

  """Upserts a single `BotStat`."""
  upsertBotStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertBotStatInput!
    where: UpsertBotStatWhere
  ): UpsertBotStatPayload

  """Upserts a single `CachedGuild`."""
  upsertCachedGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertCachedGuildInput!
    where: UpsertCachedGuildWhere
  ): UpsertCachedGuildPayload

  """Upserts a single `CachedUser`."""
  upsertCachedUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertCachedUserInput!
    where: UpsertCachedUserWhere
  ): UpsertCachedUserPayload

  """Upserts a single `Feed`."""
  upsertFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertFeedInput!
    where: UpsertFeedWhere
  ): UpsertFeedPayload

  """Upserts a single `FeedItem`."""
  upsertFeedItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertFeedItemInput!
    where: UpsertFeedItemWhere
  ): UpsertFeedItemPayload

  """Upserts a single `FeedSubscription`."""
  upsertFeedSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertFeedSubscriptionInput!
    where: UpsertFeedSubscriptionWhere
  ): UpsertFeedSubscriptionPayload

  """Upserts a single `GuildBan`."""
  upsertGuildBan(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertGuildBanInput!
    where: UpsertGuildBanWhere
  ): UpsertGuildBanPayload

  """Upserts a single `GuildConfig`."""
  upsertGuildConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertGuildConfigInput!
    where: UpsertGuildConfigWhere
  ): UpsertGuildConfigPayload

  """Upserts a single `Member`."""
  upsertMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertMemberInput!
    where: UpsertMemberWhere
  ): UpsertMemberPayload

  """Upserts a single `ModLog`."""
  upsertModLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertModLogInput!
    where: UpsertModLogWhere
  ): UpsertModLogPayload

  """Upserts a single `Mute`."""
  upsertMute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertMuteInput!
    where: UpsertMuteWhere
  ): UpsertMutePayload

  """Upserts a single `Notification`."""
  upsertNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertNotificationInput!
    where: UpsertNotificationWhere
  ): UpsertNotificationPayload

  """Upserts a single `Reminder`."""
  upsertReminder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertReminderInput!
    where: UpsertReminderWhere
  ): UpsertReminderPayload

  """Upserts a single `RoleMenu`."""
  upsertRoleMenu(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertRoleMenuInput!
    where: UpsertRoleMenuWhere
  ): UpsertRoleMenuPayload

  """Upserts a single `RoleMenuRole`."""
  upsertRoleMenuRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertRoleMenuRoleInput!
    where: UpsertRoleMenuRoleWhere
  ): UpsertRoleMenuRolePayload

  """Upserts a single `Tag`."""
  upsertTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertTagInput!
    where: UpsertTagWhere
  ): UpsertTagPayload

  """Upserts a single `User`."""
  upsertUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertUserInput!
    where: UpsertUserWhere
  ): UpsertUserPayload

  """Upserts a single `UserLevel`."""
  upsertUserLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertUserLevelInput!
    where: UpsertUserLevelWhere
  ): UpsertUserLevelPayload

  """Upserts a single `WebUser`."""
  upsertWebUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertWebUserInput!
    where: UpsertWebUserWhere
  ): UpsertWebUserPayload

  """Upserts a single `WebUserGuild`."""
  upsertWebUserGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertWebUserGuildInput!
    where: UpsertWebUserGuildWhere
  ): UpsertWebUserGuildPayload
}

type Mute implements Node {
  caseId: BigInt
  endTime: Datetime
  guildId: BigInt!

  """Reads a single `ModLog` that is related to this `Mute`."""
  modLogByGuildIdAndCaseId: ModLog

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pending: Boolean!
  startTime: Datetime!
  userId: BigInt!
}

type MuteAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: MuteAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: MuteDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: MuteMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: MuteMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: MuteStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: MuteStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: MuteSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: MuteVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: MuteVarianceSampleAggregates
}

type MuteAverageAggregates {
  """Mean average of caseId across the matching connection"""
  caseId: BigFloat

  """Mean average of guildId across the matching connection"""
  guildId: BigFloat

  """Mean average of userId across the matching connection"""
  userId: BigFloat
}

"""
A condition to be used against `Mute` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MuteCondition {
  """Checks for equality with the object’s `caseId` field."""
  caseId: BigInt

  """Checks for equality with the object’s `endTime` field."""
  endTime: Datetime

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `pending` field."""
  pending: Boolean

  """Checks for equality with the object’s `startTime` field."""
  startTime: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

type MuteDistinctCountAggregates {
  """Distinct count of caseId across the matching connection"""
  caseId: BigInt

  """Distinct count of endTime across the matching connection"""
  endTime: BigInt

  """Distinct count of guildId across the matching connection"""
  guildId: BigInt

  """Distinct count of pending across the matching connection"""
  pending: BigInt

  """Distinct count of startTime across the matching connection"""
  startTime: BigInt

  """Distinct count of userId across the matching connection"""
  userId: BigInt
}

"""
A filter to be used against `Mute` object types. All fields are combined with a logical ‘and.’
"""
input MuteFilter {
  """Checks for all expressions in this list."""
  and: [MuteFilter!]

  """Filter by the object’s `caseId` field."""
  caseId: BigIntFilter

  """Filter by the object’s `endTime` field."""
  endTime: DatetimeFilter

  """Filter by the object’s `guildId` field."""
  guildId: BigIntFilter

  """Negates the expression."""
  not: MuteFilter

  """Checks for any expressions in this list."""
  or: [MuteFilter!]

  """Filter by the object’s `pending` field."""
  pending: BooleanFilter

  """Filter by the object’s `startTime` field."""
  startTime: DatetimeFilter

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter
}

"""An input for mutations affecting `Mute`"""
input MuteInput {
  caseId: BigInt
  endTime: Datetime
  guildId: BigInt!
  pending: Boolean
  startTime: Datetime!
  userId: BigInt!
}

type MuteMaxAggregates {
  """Maximum of caseId across the matching connection"""
  caseId: BigInt

  """Maximum of guildId across the matching connection"""
  guildId: BigInt

  """Maximum of userId across the matching connection"""
  userId: BigInt
}

type MuteMinAggregates {
  """Minimum of caseId across the matching connection"""
  caseId: BigInt

  """Minimum of guildId across the matching connection"""
  guildId: BigInt

  """Minimum of userId across the matching connection"""
  userId: BigInt
}

"""Represents an update to a `Mute`. Fields that are set will be updated."""
input MutePatch {
  caseId: BigInt
  endTime: Datetime
  guildId: BigInt
  pending: Boolean
  startTime: Datetime
  userId: BigInt
}

type MuteStddevPopulationAggregates {
  """Population standard deviation of caseId across the matching connection"""
  caseId: BigFloat

  """
  Population standard deviation of guildId across the matching connection
  """
  guildId: BigFloat

  """Population standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type MuteStddevSampleAggregates {
  """Sample standard deviation of caseId across the matching connection"""
  caseId: BigFloat

  """Sample standard deviation of guildId across the matching connection"""
  guildId: BigFloat

  """Sample standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type MuteSumAggregates {
  """Sum of caseId across the matching connection"""
  caseId: BigFloat!

  """Sum of guildId across the matching connection"""
  guildId: BigFloat!

  """Sum of userId across the matching connection"""
  userId: BigFloat!
}

type MuteVariancePopulationAggregates {
  """Population variance of caseId across the matching connection"""
  caseId: BigFloat

  """Population variance of guildId across the matching connection"""
  guildId: BigFloat

  """Population variance of userId across the matching connection"""
  userId: BigFloat
}

type MuteVarianceSampleAggregates {
  """Sample variance of caseId across the matching connection"""
  caseId: BigFloat

  """Sample variance of guildId across the matching connection"""
  guildId: BigFloat

  """Sample variance of userId across the matching connection"""
  userId: BigFloat
}

"""A connection to a list of `Mute` values."""
type MutesConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: MuteAggregates

  """
  A list of edges which contains the `Mute` and cursor to aid in pagination.
  """
  edges: [MutesEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Mute` for these aggregates."""
    groupBy: [MutesGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: MutesHavingInput
  ): [MuteAggregates!]

  """A list of `Mute` objects."""
  nodes: [Mute!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Mute` you could get from the connection."""
  totalCount: Int!
}

"""A `Mute` edge in the connection."""
type MutesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Mute` at the end of the edge."""
  node: Mute!
}

"""Grouping methods for `Mute` for usage during aggregation."""
enum MutesGroupBy {
  CASE_ID
  END_TIME
  END_TIME_TRUNCATED_TO_DAY
  END_TIME_TRUNCATED_TO_HOUR
  GUILD_ID
  PENDING
  START_TIME
  START_TIME_TRUNCATED_TO_DAY
  START_TIME_TRUNCATED_TO_HOUR
  USER_ID
}

input MutesHavingAverageInput {
  caseId: HavingBigintFilter
  endTime: HavingDatetimeFilter
  guildId: HavingBigintFilter
  startTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MutesHavingDistinctCountInput {
  caseId: HavingBigintFilter
  endTime: HavingDatetimeFilter
  guildId: HavingBigintFilter
  startTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

"""Conditions for `Mute` aggregates."""
input MutesHavingInput {
  AND: [MutesHavingInput!]
  OR: [MutesHavingInput!]
  average: MutesHavingAverageInput
  distinctCount: MutesHavingDistinctCountInput
  max: MutesHavingMaxInput
  min: MutesHavingMinInput
  stddevPopulation: MutesHavingStddevPopulationInput
  stddevSample: MutesHavingStddevSampleInput
  sum: MutesHavingSumInput
  variancePopulation: MutesHavingVariancePopulationInput
  varianceSample: MutesHavingVarianceSampleInput
}

input MutesHavingMaxInput {
  caseId: HavingBigintFilter
  endTime: HavingDatetimeFilter
  guildId: HavingBigintFilter
  startTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MutesHavingMinInput {
  caseId: HavingBigintFilter
  endTime: HavingDatetimeFilter
  guildId: HavingBigintFilter
  startTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MutesHavingStddevPopulationInput {
  caseId: HavingBigintFilter
  endTime: HavingDatetimeFilter
  guildId: HavingBigintFilter
  startTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MutesHavingStddevSampleInput {
  caseId: HavingBigintFilter
  endTime: HavingDatetimeFilter
  guildId: HavingBigintFilter
  startTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MutesHavingSumInput {
  caseId: HavingBigintFilter
  endTime: HavingDatetimeFilter
  guildId: HavingBigintFilter
  startTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MutesHavingVariancePopulationInput {
  caseId: HavingBigintFilter
  endTime: HavingDatetimeFilter
  guildId: HavingBigintFilter
  startTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input MutesHavingVarianceSampleInput {
  caseId: HavingBigintFilter
  endTime: HavingDatetimeFilter
  guildId: HavingBigintFilter
  startTime: HavingDatetimeFilter
  userId: HavingBigintFilter
}

"""Methods to use when ordering `Mute`."""
enum MutesOrderBy {
  CASE_ID_ASC
  CASE_ID_DESC
  END_TIME_ASC
  END_TIME_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  NATURAL
  PENDING_ASC
  PENDING_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  START_TIME_ASC
  START_TIME_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Notification implements Node {
  guildId: BigInt!
  keyword: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: BigInt!
}

type NotificationAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: NotificationAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: NotificationDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: NotificationMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: NotificationMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: NotificationStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: NotificationStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: NotificationSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: NotificationVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: NotificationVarianceSampleAggregates
}

type NotificationAverageAggregates {
  """Mean average of guildId across the matching connection"""
  guildId: BigFloat

  """Mean average of userId across the matching connection"""
  userId: BigFloat
}

"""
A condition to be used against `Notification` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NotificationCondition {
  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `keyword` field."""
  keyword: String

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

type NotificationDistinctCountAggregates {
  """Distinct count of guildId across the matching connection"""
  guildId: BigInt

  """Distinct count of keyword across the matching connection"""
  keyword: BigInt

  """Distinct count of userId across the matching connection"""
  userId: BigInt
}

"""
A filter to be used against `Notification` object types. All fields are combined with a logical ‘and.’
"""
input NotificationFilter {
  """Checks for all expressions in this list."""
  and: [NotificationFilter!]

  """Filter by the object’s `guildId` field."""
  guildId: BigIntFilter

  """Filter by the object’s `keyword` field."""
  keyword: StringFilter

  """Negates the expression."""
  not: NotificationFilter

  """Checks for any expressions in this list."""
  or: [NotificationFilter!]

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter
}

"""An input for mutations affecting `Notification`"""
input NotificationInput {
  guildId: BigInt!
  keyword: String!
  userId: BigInt!
}

type NotificationMaxAggregates {
  """Maximum of guildId across the matching connection"""
  guildId: BigInt

  """Maximum of userId across the matching connection"""
  userId: BigInt
}

type NotificationMinAggregates {
  """Minimum of guildId across the matching connection"""
  guildId: BigInt

  """Minimum of userId across the matching connection"""
  userId: BigInt
}

"""
Represents an update to a `Notification`. Fields that are set will be updated.
"""
input NotificationPatch {
  guildId: BigInt
  keyword: String
  userId: BigInt
}

type NotificationStddevPopulationAggregates {
  """
  Population standard deviation of guildId across the matching connection
  """
  guildId: BigFloat

  """Population standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type NotificationStddevSampleAggregates {
  """Sample standard deviation of guildId across the matching connection"""
  guildId: BigFloat

  """Sample standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type NotificationSumAggregates {
  """Sum of guildId across the matching connection"""
  guildId: BigFloat!

  """Sum of userId across the matching connection"""
  userId: BigFloat!
}

type NotificationVariancePopulationAggregates {
  """Population variance of guildId across the matching connection"""
  guildId: BigFloat

  """Population variance of userId across the matching connection"""
  userId: BigFloat
}

type NotificationVarianceSampleAggregates {
  """Sample variance of guildId across the matching connection"""
  guildId: BigFloat

  """Sample variance of userId across the matching connection"""
  userId: BigFloat
}

"""A connection to a list of `Notification` values."""
type NotificationsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: NotificationAggregates

  """
  A list of edges which contains the `Notification` and cursor to aid in pagination.
  """
  edges: [NotificationsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Notification` for these aggregates."""
    groupBy: [NotificationsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: NotificationsHavingInput
  ): [NotificationAggregates!]

  """A list of `Notification` objects."""
  nodes: [Notification!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Notification` you could get from the connection."""
  totalCount: Int!
}

"""A `Notification` edge in the connection."""
type NotificationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Notification` at the end of the edge."""
  node: Notification!
}

"""Grouping methods for `Notification` for usage during aggregation."""
enum NotificationsGroupBy {
  GUILD_ID
  KEYWORD
  USER_ID
}

input NotificationsHavingAverageInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input NotificationsHavingDistinctCountInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

"""Conditions for `Notification` aggregates."""
input NotificationsHavingInput {
  AND: [NotificationsHavingInput!]
  OR: [NotificationsHavingInput!]
  average: NotificationsHavingAverageInput
  distinctCount: NotificationsHavingDistinctCountInput
  max: NotificationsHavingMaxInput
  min: NotificationsHavingMinInput
  stddevPopulation: NotificationsHavingStddevPopulationInput
  stddevSample: NotificationsHavingStddevSampleInput
  sum: NotificationsHavingSumInput
  variancePopulation: NotificationsHavingVariancePopulationInput
  varianceSample: NotificationsHavingVarianceSampleInput
}

input NotificationsHavingMaxInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input NotificationsHavingMinInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input NotificationsHavingStddevPopulationInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input NotificationsHavingStddevSampleInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input NotificationsHavingSumInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input NotificationsHavingVariancePopulationInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

input NotificationsHavingVarianceSampleInput {
  guildId: HavingBigintFilter
  userId: HavingBigintFilter
}

"""Methods to use when ordering `Notification`."""
enum NotificationsOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  KEYWORD_ASC
  KEYWORD_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""A connection to a list of `String` values."""
type NotificationsStartingWithConnection {
  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [NotificationsStartingWithEdge!]!

  """A list of `String` objects."""
  nodes: [String]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type NotificationsStartingWithEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `BotStat`."""
  allBotStats(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BotStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BotStatFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BotStat`."""
    orderBy: [BotStatsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotStatsConnection

  """Reads and enables pagination through a set of `FeedItem`."""
  allFeedItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FeedItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FeedItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FeedItem`."""
    orderBy: [FeedItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedItemsConnection

  """Reads and enables pagination through a set of `FeedSubscription`."""
  allFeedSubscriptions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FeedSubscriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FeedSubscriptionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FeedSubscription`."""
    orderBy: [FeedSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedSubscriptionsConnection

  """Reads and enables pagination through a set of `Feed`."""
  allFeeds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FeedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FeedFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Feed`."""
    orderBy: [FeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedsConnection

  """Reads and enables pagination through a set of `GuildBan`."""
  allGuildBans(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuildBanCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GuildBanFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GuildBan`."""
    orderBy: [GuildBansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildBansConnection

  """Reads and enables pagination through a set of `GuildConfig`."""
  allGuildConfigs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuildConfigCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GuildConfigFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsConnection

  """Reads and enables pagination through a set of `Member`."""
  allMembers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MemberCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MemberFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersConnection

  """Reads and enables pagination through a set of `Message`."""
  allMessages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [NATURAL]
  ): MessagesConnection

  """Reads and enables pagination through a set of `ModLog`."""
  allModLogs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ModLogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ModLogFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ModLog`."""
    orderBy: [ModLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ModLogsConnection

  """Reads and enables pagination through a set of `Mute`."""
  allMutes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MuteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MuteFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Mute`."""
    orderBy: [MutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MutesConnection

  """Reads and enables pagination through a set of `Notification`."""
  allNotifications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsConnection
  allRedisGuildIds: [BigInt!]!

  """Reads and enables pagination through a set of `Reminder`."""
  allReminders(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReminderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReminderFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Reminder`."""
    orderBy: [RemindersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RemindersConnection

  """Reads and enables pagination through a set of `RoleMenuRole`."""
  allRoleMenuRoles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleMenuRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoleMenuRoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoleMenuRole`."""
    orderBy: [RoleMenuRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenuRolesConnection

  """Reads and enables pagination through a set of `RoleMenu`."""
  allRoleMenus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleMenuCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoleMenuFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusConnection

  """Reads and enables pagination through a set of `Tag`."""
  allTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection

  """Reads and enables pagination through a set of `UserLevel`."""
  allUserLevels(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLevelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLevelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserLevel`."""
    orderBy: [UserLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLevelsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection

  """Reads and enables pagination through a set of `WebUserGuild`."""
  allWebUserGuilds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserGuildCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WebUserGuildFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsConnection

  """Reads and enables pagination through a set of `WebUser`."""
  allWebUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WebUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersConnection

  """Reads a single `BotStat` using its globally unique `ID`."""
  botStat(
    """The globally unique `ID` to be used in selecting a single `BotStat`."""
    nodeId: ID!
  ): BotStat
  botStatByNameAndCategory(category: String!, name: String!): BotStat

  """Reads a single `CachedGuild` using its globally unique `ID`."""
  cachedGuild(
    """
    The globally unique `ID` to be used in selecting a single `CachedGuild`.
    """
    nodeId: ID!
  ): CachedGuild
  cachedGuildById(id: BigInt!): CachedGuild

  """Reads a single `CachedUser` using its globally unique `ID`."""
  cachedUser(
    """
    The globally unique `ID` to be used in selecting a single `CachedUser`.
    """
    nodeId: ID!
  ): CachedUser
  cachedUserById(id: BigInt!): CachedUser

  """Handy method to get the current session ID."""
  currentSessionId: UUID

  """The currently logged in user (or null if not logged in)."""
  currentUser: WebUser
  currentUserDiscordId: BigInt

  """
  Handy method to get the current user ID for use in RLS policies, etc; in GraphQL, use `currentUser{id}` instead.
  """
  currentUserId: BigInt
  currentUserManagedGuildIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BigIntFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserManagedGuildIdsConnection

  """Reads a single `Feed` using its globally unique `ID`."""
  feed(
    """The globally unique `ID` to be used in selecting a single `Feed`."""
    nodeId: ID!
  ): Feed
  feedByFeedId(feedId: String!): Feed

  """Reads a single `FeedItem` using its globally unique `ID`."""
  feedItem(
    """The globally unique `ID` to be used in selecting a single `FeedItem`."""
    nodeId: ID!
  ): FeedItem
  feedItemByFeedIdAndItemId(feedId: String!, itemId: String!): FeedItem

  """Reads a single `FeedSubscription` using its globally unique `ID`."""
  feedSubscription(
    """
    The globally unique `ID` to be used in selecting a single `FeedSubscription`.
    """
    nodeId: ID!
  ): FeedSubscription
  feedSubscriptionByFeedIdAndChannelId(channelId: BigInt!, feedId: String!): FeedSubscription

  """Reads a single `GuildBan` using its globally unique `ID`."""
  guildBan(
    """The globally unique `ID` to be used in selecting a single `GuildBan`."""
    nodeId: ID!
  ): GuildBan
  guildBanByGuildIdAndUserId(guildId: BigInt!, userId: BigInt!): GuildBan

  """Reads a single `GuildConfig` using its globally unique `ID`."""
  guildConfig(
    """
    The globally unique `ID` to be used in selecting a single `GuildConfig`.
    """
    nodeId: ID!
  ): GuildConfig
  guildConfigById(id: BigInt!): GuildConfig

  """Reads a single `Member` using its globally unique `ID`."""
  member(
    """The globally unique `ID` to be used in selecting a single `Member`."""
    nodeId: ID!
  ): Member
  memberByGuildIdAndUserId(guildId: BigInt!, userId: BigInt!): Member

  """Reads a single `ModLog` using its globally unique `ID`."""
  modLog(
    """The globally unique `ID` to be used in selecting a single `ModLog`."""
    nodeId: ID!
  ): ModLog
  modLogByGuildIdAndCaseId(caseId: BigInt!, guildId: BigInt!): ModLog

  """Reads a single `Mute` using its globally unique `ID`."""
  mute(
    """The globally unique `ID` to be used in selecting a single `Mute`."""
    nodeId: ID!
  ): Mute
  muteByGuildIdAndUserId(guildId: BigInt!, userId: BigInt!): Mute
  nextCaseId(guildId: BigInt): BigInt

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Reads a single `Notification` using its globally unique `ID`."""
  notification(
    """
    The globally unique `ID` to be used in selecting a single `Notification`.
    """
    nodeId: ID!
  ): Notification
  notificationByUserIdAndGuildIdAndKeyword(guildId: BigInt!, keyword: String!, userId: BigInt!): Notification
  notificationsStartingWith(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    query: String
    userId: BigInt
  ): NotificationsStartingWithConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  randomTag(guildId: BigInt, ownerId: BigInt, query: String, startsWith: Boolean): Tag
  redisGuildByGuildId(guild_id: BigInt!): RedisGuild

  """Reads a single `Reminder` using its globally unique `ID`."""
  reminder(
    """The globally unique `ID` to be used in selecting a single `Reminder`."""
    nodeId: ID!
  ): Reminder
  reminderByUserIdAndSetAt(setAt: Datetime!, userId: BigInt!): Reminder

  """Reads a single `RoleMenu` using its globally unique `ID`."""
  roleMenu(
    """The globally unique `ID` to be used in selecting a single `RoleMenu`."""
    nodeId: ID!
  ): RoleMenu
  roleMenuByGuildIdAndMenuName(guildId: BigInt!, menuName: String!): RoleMenu

  """Reads a single `RoleMenuRole` using its globally unique `ID`."""
  roleMenuRole(
    """
    The globally unique `ID` to be used in selecting a single `RoleMenuRole`.
    """
    nodeId: ID!
  ): RoleMenuRole
  roleMenuRoleByGuildIdAndMenuNameAndRoleId(guildId: BigInt!, menuName: String!, roleId: BigInt!): RoleMenuRole

  """Reads a single `Tag` using its globally unique `ID`."""
  tag(
    """The globally unique `ID` to be used in selecting a single `Tag`."""
    nodeId: ID!
  ): Tag
  tagByGuildIdAndTagName(guildId: BigInt!, tagName: String!): Tag

  """
  Leaderboard for given timeframe and optional guild. If guild is null, it is the global leaderboard
  """
  timeframeUserLevels(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TimeframeUserLevelsRecordFilter

    """Only read the first `n` values of the set."""
    first: Int
    guildId: BigInt

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    timeframe: LevelTimeframe
  ): TimeframeUserLevelsConnection

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  userById(id: BigInt!): User
  userGuildRank(guildId: BigInt!, userId: BigInt!): UserGuildRankResult

  """Reads a single `UserLevel` using its globally unique `ID`."""
  userLevel(
    """The globally unique `ID` to be used in selecting a single `UserLevel`."""
    nodeId: ID!
  ): UserLevel
  userLevelByUserIdAndGuildId(guildId: BigInt!, userId: BigInt!): UserLevel

  """Reads a single `WebUser` using its globally unique `ID`."""
  webUser(
    """The globally unique `ID` to be used in selecting a single `WebUser`."""
    nodeId: ID!
  ): WebUser
  webUserById(id: BigInt!): WebUser

  """Reads a single `WebUserGuild` using its globally unique `ID`."""
  webUserGuild(
    """
    The globally unique `ID` to be used in selecting a single `WebUserGuild`.
    """
    nodeId: ID!
  ): WebUserGuild
  webUserGuildByUserIdAndGuildId(guildId: BigInt!, userId: BigInt!): WebUserGuild
}

type RedisGuild {
  afkChannelId: String
  afkTimeout: Int!
  applicationId: String
  banner: String
  channels: [String]
  defaultMessageNotifications: Int
  description: String
  discoverySplash: String
  emojis: [String]
  explicitContentFilter: Int
  features: [String]
  icon: String
  id: String!
  joinedAt: String
  large: Boolean
  maxMembers: Int
  maxVideoChannelUsers: Int
  memberCount: Int
  members: [String]
  mfaLevel: Int
  name: String!
  nsfwLevel: Int!
  ownerId: String!
  preferredLocale: String
  premiumSubscriptionCount: Int
  premiumTier: Int!
  presences: [String]
  roles: [RedisGuildRole]
  rulesChannelId: String
  splash: String
  systemChannelFlags: Int
  systemChannelId: String
  unavailable: Boolean
  vanityUrlCode: String
  verificationLevel: Int
  voiceStates: [String]
}

type RedisGuildRole {
  color: Int!
  hoist: Boolean!
  icon: String
  id: String!
  managed: Boolean!
  mentionable: Boolean!
  name: String!
  permissions: String!
  position: Int!
  tags: RedisRoleTags
  unicode_emoji: String
}

type RedisRoleTags {
  bot_id: String
  integration_id: String
}

type Reminder implements Node {
  description: String!
  expireAt: Datetime!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  setAt: Datetime!
  userId: BigInt!
}

type ReminderAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: ReminderAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: ReminderDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: ReminderMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: ReminderMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: ReminderStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: ReminderStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: ReminderSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: ReminderVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: ReminderVarianceSampleAggregates
}

type ReminderAverageAggregates {
  """Mean average of userId across the matching connection"""
  userId: BigFloat
}

"""
A condition to be used against `Reminder` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ReminderCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `expireAt` field."""
  expireAt: Datetime

  """Checks for equality with the object’s `setAt` field."""
  setAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

type ReminderDistinctCountAggregates {
  """Distinct count of description across the matching connection"""
  description: BigInt

  """Distinct count of expireAt across the matching connection"""
  expireAt: BigInt

  """Distinct count of setAt across the matching connection"""
  setAt: BigInt

  """Distinct count of userId across the matching connection"""
  userId: BigInt
}

"""
A filter to be used against `Reminder` object types. All fields are combined with a logical ‘and.’
"""
input ReminderFilter {
  """Checks for all expressions in this list."""
  and: [ReminderFilter!]

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `expireAt` field."""
  expireAt: DatetimeFilter

  """Negates the expression."""
  not: ReminderFilter

  """Checks for any expressions in this list."""
  or: [ReminderFilter!]

  """Filter by the object’s `setAt` field."""
  setAt: DatetimeFilter

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter
}

"""An input for mutations affecting `Reminder`"""
input ReminderInput {
  description: String!
  expireAt: Datetime!
  setAt: Datetime!
  userId: BigInt!
}

type ReminderMaxAggregates {
  """Maximum of userId across the matching connection"""
  userId: BigInt
}

type ReminderMinAggregates {
  """Minimum of userId across the matching connection"""
  userId: BigInt
}

"""
Represents an update to a `Reminder`. Fields that are set will be updated.
"""
input ReminderPatch {
  description: String
  expireAt: Datetime
  setAt: Datetime
  userId: BigInt
}

type ReminderStddevPopulationAggregates {
  """Population standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type ReminderStddevSampleAggregates {
  """Sample standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type ReminderSumAggregates {
  """Sum of userId across the matching connection"""
  userId: BigFloat!
}

type ReminderVariancePopulationAggregates {
  """Population variance of userId across the matching connection"""
  userId: BigFloat
}

type ReminderVarianceSampleAggregates {
  """Sample variance of userId across the matching connection"""
  userId: BigFloat
}

"""A connection to a list of `Reminder` values."""
type RemindersConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: ReminderAggregates

  """
  A list of edges which contains the `Reminder` and cursor to aid in pagination.
  """
  edges: [RemindersEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Reminder` for these aggregates."""
    groupBy: [RemindersGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: RemindersHavingInput
  ): [ReminderAggregates!]

  """A list of `Reminder` objects."""
  nodes: [Reminder!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Reminder` you could get from the connection."""
  totalCount: Int!
}

"""A `Reminder` edge in the connection."""
type RemindersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Reminder` at the end of the edge."""
  node: Reminder!
}

"""Grouping methods for `Reminder` for usage during aggregation."""
enum RemindersGroupBy {
  DESCRIPTION
  EXPIRE_AT
  EXPIRE_AT_TRUNCATED_TO_DAY
  EXPIRE_AT_TRUNCATED_TO_HOUR
  SET_AT
  SET_AT_TRUNCATED_TO_DAY
  SET_AT_TRUNCATED_TO_HOUR
  USER_ID
}

input RemindersHavingAverageInput {
  expireAt: HavingDatetimeFilter
  setAt: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input RemindersHavingDistinctCountInput {
  expireAt: HavingDatetimeFilter
  setAt: HavingDatetimeFilter
  userId: HavingBigintFilter
}

"""Conditions for `Reminder` aggregates."""
input RemindersHavingInput {
  AND: [RemindersHavingInput!]
  OR: [RemindersHavingInput!]
  average: RemindersHavingAverageInput
  distinctCount: RemindersHavingDistinctCountInput
  max: RemindersHavingMaxInput
  min: RemindersHavingMinInput
  stddevPopulation: RemindersHavingStddevPopulationInput
  stddevSample: RemindersHavingStddevSampleInput
  sum: RemindersHavingSumInput
  variancePopulation: RemindersHavingVariancePopulationInput
  varianceSample: RemindersHavingVarianceSampleInput
}

input RemindersHavingMaxInput {
  expireAt: HavingDatetimeFilter
  setAt: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input RemindersHavingMinInput {
  expireAt: HavingDatetimeFilter
  setAt: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input RemindersHavingStddevPopulationInput {
  expireAt: HavingDatetimeFilter
  setAt: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input RemindersHavingStddevSampleInput {
  expireAt: HavingDatetimeFilter
  setAt: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input RemindersHavingSumInput {
  expireAt: HavingDatetimeFilter
  setAt: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input RemindersHavingVariancePopulationInput {
  expireAt: HavingDatetimeFilter
  setAt: HavingDatetimeFilter
  userId: HavingBigintFilter
}

input RemindersHavingVarianceSampleInput {
  expireAt: HavingDatetimeFilter
  setAt: HavingDatetimeFilter
  userId: HavingBigintFilter
}

"""Methods to use when ordering `Reminder`."""
enum RemindersOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EXPIRE_AT_ASC
  EXPIRE_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SET_AT_ASC
  SET_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type RoleMenu implements Node {
  description: String
  guildId: BigInt!
  maxCount: Int
  menuName: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  requiredRole: BigInt

  """Reads and enables pagination through a set of `RoleMenuRole`."""
  roleMenuRolesByGuildIdAndMenuName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleMenuRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoleMenuRoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoleMenuRole`."""
    orderBy: [RoleMenuRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenuRolesConnection!
}

type RoleMenuAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: RoleMenuAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: RoleMenuDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: RoleMenuMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: RoleMenuMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: RoleMenuStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: RoleMenuStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: RoleMenuSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: RoleMenuVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: RoleMenuVarianceSampleAggregates
}

type RoleMenuAverageAggregates {
  """Mean average of guildId across the matching connection"""
  guildId: BigFloat

  """Mean average of maxCount across the matching connection"""
  maxCount: BigFloat

  """Mean average of requiredRole across the matching connection"""
  requiredRole: BigFloat
}

"""
A condition to be used against `RoleMenu` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RoleMenuCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `maxCount` field."""
  maxCount: Int

  """Checks for equality with the object’s `menuName` field."""
  menuName: String

  """Checks for equality with the object’s `requiredRole` field."""
  requiredRole: BigInt
}

type RoleMenuDistinctCountAggregates {
  """Distinct count of description across the matching connection"""
  description: BigInt

  """Distinct count of guildId across the matching connection"""
  guildId: BigInt

  """Distinct count of maxCount across the matching connection"""
  maxCount: BigInt

  """Distinct count of menuName across the matching connection"""
  menuName: BigInt

  """Distinct count of requiredRole across the matching connection"""
  requiredRole: BigInt
}

"""
A filter to be used against `RoleMenu` object types. All fields are combined with a logical ‘and.’
"""
input RoleMenuFilter {
  """Checks for all expressions in this list."""
  and: [RoleMenuFilter!]

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `guildId` field."""
  guildId: BigIntFilter

  """Filter by the object’s `maxCount` field."""
  maxCount: IntFilter

  """Filter by the object’s `menuName` field."""
  menuName: StringFilter

  """Negates the expression."""
  not: RoleMenuFilter

  """Checks for any expressions in this list."""
  or: [RoleMenuFilter!]

  """Filter by the object’s `requiredRole` field."""
  requiredRole: BigIntFilter
}

"""An input for mutations affecting `RoleMenu`"""
input RoleMenuInput {
  description: String
  guildId: BigInt!
  maxCount: Int
  menuName: String!
  requiredRole: BigInt
}

type RoleMenuMaxAggregates {
  """Maximum of guildId across the matching connection"""
  guildId: BigInt

  """Maximum of maxCount across the matching connection"""
  maxCount: Int

  """Maximum of requiredRole across the matching connection"""
  requiredRole: BigInt
}

type RoleMenuMinAggregates {
  """Minimum of guildId across the matching connection"""
  guildId: BigInt

  """Minimum of maxCount across the matching connection"""
  maxCount: Int

  """Minimum of requiredRole across the matching connection"""
  requiredRole: BigInt
}

"""
Represents an update to a `RoleMenu`. Fields that are set will be updated.
"""
input RoleMenuPatch {
  description: String
  guildId: BigInt
  maxCount: Int
  menuName: String
  requiredRole: BigInt
}

type RoleMenuRole implements Node {
  description: String
  emoji: String
  guildId: BigInt!
  menuName: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  roleId: BigInt!

  """Reads a single `RoleMenu` that is related to this `RoleMenuRole`."""
  roleMenuByGuildIdAndMenuName: RoleMenu
}

type RoleMenuRoleAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: RoleMenuRoleAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: RoleMenuRoleDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: RoleMenuRoleMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: RoleMenuRoleMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: RoleMenuRoleStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: RoleMenuRoleStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: RoleMenuRoleSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: RoleMenuRoleVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: RoleMenuRoleVarianceSampleAggregates
}

type RoleMenuRoleAverageAggregates {
  """Mean average of guildId across the matching connection"""
  guildId: BigFloat

  """Mean average of roleId across the matching connection"""
  roleId: BigFloat
}

"""
A condition to be used against `RoleMenuRole` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RoleMenuRoleCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `emoji` field."""
  emoji: String

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `menuName` field."""
  menuName: String

  """Checks for equality with the object’s `roleId` field."""
  roleId: BigInt
}

type RoleMenuRoleDistinctCountAggregates {
  """Distinct count of description across the matching connection"""
  description: BigInt

  """Distinct count of emoji across the matching connection"""
  emoji: BigInt

  """Distinct count of guildId across the matching connection"""
  guildId: BigInt

  """Distinct count of menuName across the matching connection"""
  menuName: BigInt

  """Distinct count of roleId across the matching connection"""
  roleId: BigInt
}

"""
A filter to be used against `RoleMenuRole` object types. All fields are combined with a logical ‘and.’
"""
input RoleMenuRoleFilter {
  """Checks for all expressions in this list."""
  and: [RoleMenuRoleFilter!]

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `emoji` field."""
  emoji: StringFilter

  """Filter by the object’s `guildId` field."""
  guildId: BigIntFilter

  """Filter by the object’s `menuName` field."""
  menuName: StringFilter

  """Negates the expression."""
  not: RoleMenuRoleFilter

  """Checks for any expressions in this list."""
  or: [RoleMenuRoleFilter!]

  """Filter by the object’s `roleId` field."""
  roleId: BigIntFilter
}

"""An input for mutations affecting `RoleMenuRole`"""
input RoleMenuRoleInput {
  description: String
  emoji: String
  guildId: BigInt!
  menuName: String!
  roleId: BigInt!
}

type RoleMenuRoleMaxAggregates {
  """Maximum of guildId across the matching connection"""
  guildId: BigInt

  """Maximum of roleId across the matching connection"""
  roleId: BigInt
}

type RoleMenuRoleMinAggregates {
  """Minimum of guildId across the matching connection"""
  guildId: BigInt

  """Minimum of roleId across the matching connection"""
  roleId: BigInt
}

"""
Represents an update to a `RoleMenuRole`. Fields that are set will be updated.
"""
input RoleMenuRolePatch {
  description: String
  emoji: String
  guildId: BigInt
  menuName: String
  roleId: BigInt
}

type RoleMenuRoleStddevPopulationAggregates {
  """
  Population standard deviation of guildId across the matching connection
  """
  guildId: BigFloat

  """Population standard deviation of roleId across the matching connection"""
  roleId: BigFloat
}

type RoleMenuRoleStddevSampleAggregates {
  """Sample standard deviation of guildId across the matching connection"""
  guildId: BigFloat

  """Sample standard deviation of roleId across the matching connection"""
  roleId: BigFloat
}

type RoleMenuRoleSumAggregates {
  """Sum of guildId across the matching connection"""
  guildId: BigFloat!

  """Sum of roleId across the matching connection"""
  roleId: BigFloat!
}

type RoleMenuRoleVariancePopulationAggregates {
  """Population variance of guildId across the matching connection"""
  guildId: BigFloat

  """Population variance of roleId across the matching connection"""
  roleId: BigFloat
}

type RoleMenuRoleVarianceSampleAggregates {
  """Sample variance of guildId across the matching connection"""
  guildId: BigFloat

  """Sample variance of roleId across the matching connection"""
  roleId: BigFloat
}

"""A connection to a list of `RoleMenuRole` values."""
type RoleMenuRolesConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: RoleMenuRoleAggregates

  """
  A list of edges which contains the `RoleMenuRole` and cursor to aid in pagination.
  """
  edges: [RoleMenuRolesEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `RoleMenuRole` for these aggregates."""
    groupBy: [RoleMenuRolesGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: RoleMenuRolesHavingInput
  ): [RoleMenuRoleAggregates!]

  """A list of `RoleMenuRole` objects."""
  nodes: [RoleMenuRole!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RoleMenuRole` you could get from the connection."""
  totalCount: Int!
}

"""A `RoleMenuRole` edge in the connection."""
type RoleMenuRolesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoleMenuRole` at the end of the edge."""
  node: RoleMenuRole!
}

"""Grouping methods for `RoleMenuRole` for usage during aggregation."""
enum RoleMenuRolesGroupBy {
  DESCRIPTION
  EMOJI
  GUILD_ID
  MENU_NAME
  ROLE_ID
}

input RoleMenuRolesHavingAverageInput {
  guildId: HavingBigintFilter
  roleId: HavingBigintFilter
}

input RoleMenuRolesHavingDistinctCountInput {
  guildId: HavingBigintFilter
  roleId: HavingBigintFilter
}

"""Conditions for `RoleMenuRole` aggregates."""
input RoleMenuRolesHavingInput {
  AND: [RoleMenuRolesHavingInput!]
  OR: [RoleMenuRolesHavingInput!]
  average: RoleMenuRolesHavingAverageInput
  distinctCount: RoleMenuRolesHavingDistinctCountInput
  max: RoleMenuRolesHavingMaxInput
  min: RoleMenuRolesHavingMinInput
  stddevPopulation: RoleMenuRolesHavingStddevPopulationInput
  stddevSample: RoleMenuRolesHavingStddevSampleInput
  sum: RoleMenuRolesHavingSumInput
  variancePopulation: RoleMenuRolesHavingVariancePopulationInput
  varianceSample: RoleMenuRolesHavingVarianceSampleInput
}

input RoleMenuRolesHavingMaxInput {
  guildId: HavingBigintFilter
  roleId: HavingBigintFilter
}

input RoleMenuRolesHavingMinInput {
  guildId: HavingBigintFilter
  roleId: HavingBigintFilter
}

input RoleMenuRolesHavingStddevPopulationInput {
  guildId: HavingBigintFilter
  roleId: HavingBigintFilter
}

input RoleMenuRolesHavingStddevSampleInput {
  guildId: HavingBigintFilter
  roleId: HavingBigintFilter
}

input RoleMenuRolesHavingSumInput {
  guildId: HavingBigintFilter
  roleId: HavingBigintFilter
}

input RoleMenuRolesHavingVariancePopulationInput {
  guildId: HavingBigintFilter
  roleId: HavingBigintFilter
}

input RoleMenuRolesHavingVarianceSampleInput {
  guildId: HavingBigintFilter
  roleId: HavingBigintFilter
}

"""Methods to use when ordering `RoleMenuRole`."""
enum RoleMenuRolesOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EMOJI_ASC
  EMOJI_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  MENU_NAME_ASC
  MENU_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_ID_ASC
  ROLE_ID_DESC
}

type RoleMenuStddevPopulationAggregates {
  """
  Population standard deviation of guildId across the matching connection
  """
  guildId: BigFloat

  """
  Population standard deviation of maxCount across the matching connection
  """
  maxCount: BigFloat

  """
  Population standard deviation of requiredRole across the matching connection
  """
  requiredRole: BigFloat
}

type RoleMenuStddevSampleAggregates {
  """Sample standard deviation of guildId across the matching connection"""
  guildId: BigFloat

  """Sample standard deviation of maxCount across the matching connection"""
  maxCount: BigFloat

  """
  Sample standard deviation of requiredRole across the matching connection
  """
  requiredRole: BigFloat
}

type RoleMenuSumAggregates {
  """Sum of guildId across the matching connection"""
  guildId: BigFloat!

  """Sum of maxCount across the matching connection"""
  maxCount: BigInt!

  """Sum of requiredRole across the matching connection"""
  requiredRole: BigFloat!
}

type RoleMenuVariancePopulationAggregates {
  """Population variance of guildId across the matching connection"""
  guildId: BigFloat

  """Population variance of maxCount across the matching connection"""
  maxCount: BigFloat

  """Population variance of requiredRole across the matching connection"""
  requiredRole: BigFloat
}

type RoleMenuVarianceSampleAggregates {
  """Sample variance of guildId across the matching connection"""
  guildId: BigFloat

  """Sample variance of maxCount across the matching connection"""
  maxCount: BigFloat

  """Sample variance of requiredRole across the matching connection"""
  requiredRole: BigFloat
}

"""A connection to a list of `RoleMenu` values."""
type RoleMenusConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: RoleMenuAggregates

  """
  A list of edges which contains the `RoleMenu` and cursor to aid in pagination.
  """
  edges: [RoleMenusEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `RoleMenu` for these aggregates."""
    groupBy: [RoleMenusGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: RoleMenusHavingInput
  ): [RoleMenuAggregates!]

  """A list of `RoleMenu` objects."""
  nodes: [RoleMenu!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RoleMenu` you could get from the connection."""
  totalCount: Int!
}

"""A `RoleMenu` edge in the connection."""
type RoleMenusEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoleMenu` at the end of the edge."""
  node: RoleMenu!
}

"""Grouping methods for `RoleMenu` for usage during aggregation."""
enum RoleMenusGroupBy {
  DESCRIPTION
  GUILD_ID
  MAX_COUNT
  MENU_NAME
  REQUIRED_ROLE
}

input RoleMenusHavingAverageInput {
  guildId: HavingBigintFilter
  maxCount: HavingIntFilter
  requiredRole: HavingBigintFilter
}

input RoleMenusHavingDistinctCountInput {
  guildId: HavingBigintFilter
  maxCount: HavingIntFilter
  requiredRole: HavingBigintFilter
}

"""Conditions for `RoleMenu` aggregates."""
input RoleMenusHavingInput {
  AND: [RoleMenusHavingInput!]
  OR: [RoleMenusHavingInput!]
  average: RoleMenusHavingAverageInput
  distinctCount: RoleMenusHavingDistinctCountInput
  max: RoleMenusHavingMaxInput
  min: RoleMenusHavingMinInput
  stddevPopulation: RoleMenusHavingStddevPopulationInput
  stddevSample: RoleMenusHavingStddevSampleInput
  sum: RoleMenusHavingSumInput
  variancePopulation: RoleMenusHavingVariancePopulationInput
  varianceSample: RoleMenusHavingVarianceSampleInput
}

input RoleMenusHavingMaxInput {
  guildId: HavingBigintFilter
  maxCount: HavingIntFilter
  requiredRole: HavingBigintFilter
}

input RoleMenusHavingMinInput {
  guildId: HavingBigintFilter
  maxCount: HavingIntFilter
  requiredRole: HavingBigintFilter
}

input RoleMenusHavingStddevPopulationInput {
  guildId: HavingBigintFilter
  maxCount: HavingIntFilter
  requiredRole: HavingBigintFilter
}

input RoleMenusHavingStddevSampleInput {
  guildId: HavingBigintFilter
  maxCount: HavingIntFilter
  requiredRole: HavingBigintFilter
}

input RoleMenusHavingSumInput {
  guildId: HavingBigintFilter
  maxCount: HavingIntFilter
  requiredRole: HavingBigintFilter
}

input RoleMenusHavingVariancePopulationInput {
  guildId: HavingBigintFilter
  maxCount: HavingIntFilter
  requiredRole: HavingBigintFilter
}

input RoleMenusHavingVarianceSampleInput {
  guildId: HavingBigintFilter
  maxCount: HavingIntFilter
  requiredRole: HavingBigintFilter
}

"""Methods to use when ordering `RoleMenu`."""
enum RoleMenusOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  MAX_COUNT_ASC
  MAX_COUNT_DESC
  MENU_NAME_ASC
  MENU_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REQUIRED_ROLE_ASC
  REQUIRED_ROLE_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_AVERAGE_DESCRIPTION_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_AVERAGE_DESCRIPTION_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_AVERAGE_EMOJI_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_AVERAGE_EMOJI_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_AVERAGE_GUILD_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_AVERAGE_GUILD_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_AVERAGE_MENU_NAME_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_AVERAGE_MENU_NAME_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_AVERAGE_ROLE_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_AVERAGE_ROLE_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_COUNT_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_COUNT_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_DISTINCT_COUNT_DESCRIPTION_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_DISTINCT_COUNT_DESCRIPTION_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_DISTINCT_COUNT_EMOJI_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_DISTINCT_COUNT_EMOJI_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_DISTINCT_COUNT_GUILD_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_DISTINCT_COUNT_GUILD_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_DISTINCT_COUNT_MENU_NAME_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_DISTINCT_COUNT_MENU_NAME_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_DISTINCT_COUNT_ROLE_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_DISTINCT_COUNT_ROLE_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MAX_DESCRIPTION_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MAX_DESCRIPTION_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MAX_EMOJI_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MAX_EMOJI_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MAX_GUILD_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MAX_GUILD_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MAX_MENU_NAME_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MAX_MENU_NAME_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MAX_ROLE_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MAX_ROLE_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MIN_DESCRIPTION_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MIN_DESCRIPTION_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MIN_EMOJI_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MIN_EMOJI_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MIN_GUILD_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MIN_GUILD_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MIN_MENU_NAME_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MIN_MENU_NAME_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MIN_ROLE_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_MIN_ROLE_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_POPULATION_DESCRIPTION_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_POPULATION_DESCRIPTION_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_POPULATION_EMOJI_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_POPULATION_EMOJI_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_POPULATION_GUILD_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_POPULATION_GUILD_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_POPULATION_MENU_NAME_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_POPULATION_MENU_NAME_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_POPULATION_ROLE_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_POPULATION_ROLE_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_SAMPLE_DESCRIPTION_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_SAMPLE_DESCRIPTION_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_SAMPLE_EMOJI_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_SAMPLE_EMOJI_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_SAMPLE_GUILD_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_SAMPLE_GUILD_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_SAMPLE_MENU_NAME_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_SAMPLE_MENU_NAME_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_SAMPLE_ROLE_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_STDDEV_SAMPLE_ROLE_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_SUM_DESCRIPTION_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_SUM_DESCRIPTION_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_SUM_EMOJI_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_SUM_EMOJI_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_SUM_GUILD_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_SUM_GUILD_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_SUM_MENU_NAME_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_SUM_MENU_NAME_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_SUM_ROLE_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_SUM_ROLE_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_POPULATION_DESCRIPTION_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_POPULATION_DESCRIPTION_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_POPULATION_EMOJI_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_POPULATION_EMOJI_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_POPULATION_GUILD_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_POPULATION_GUILD_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_POPULATION_MENU_NAME_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_POPULATION_MENU_NAME_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_POPULATION_ROLE_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_POPULATION_ROLE_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_SAMPLE_DESCRIPTION_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_SAMPLE_DESCRIPTION_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_SAMPLE_EMOJI_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_SAMPLE_EMOJI_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_SAMPLE_GUILD_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_SAMPLE_GUILD_ID_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_SAMPLE_MENU_NAME_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_SAMPLE_MENU_NAME_DESC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_SAMPLE_ROLE_ID_ASC
  ROLE_MENU_ROLES_BY_GUILD_ID_AND_MENU_NAME_VARIANCE_SAMPLE_ROLE_ID_DESC
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Contained by the specified list of values."""
  containedBy: [String]

  """Contains the specified list of values."""
  contains: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value."""
  equalTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]
}

type Tag implements Node {
  attachment: String
  content: String!
  created: Datetime!
  guildId: BigInt!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  ownerId: BigInt!
  tagName: String!
  useCount: BigInt!
}

type TagAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: TagAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: TagDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: TagMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: TagMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: TagStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: TagStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: TagSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: TagVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: TagVarianceSampleAggregates
}

type TagAverageAggregates {
  """Mean average of guildId across the matching connection"""
  guildId: BigFloat

  """Mean average of ownerId across the matching connection"""
  ownerId: BigFloat

  """Mean average of useCount across the matching connection"""
  useCount: BigFloat
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `attachment` field."""
  attachment: String

  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: BigInt

  """Checks for equality with the object’s `tagName` field."""
  tagName: String

  """Checks for equality with the object’s `useCount` field."""
  useCount: BigInt
}

type TagDistinctCountAggregates {
  """Distinct count of attachment across the matching connection"""
  attachment: BigInt

  """Distinct count of content across the matching connection"""
  content: BigInt

  """Distinct count of created across the matching connection"""
  created: BigInt

  """Distinct count of guildId across the matching connection"""
  guildId: BigInt

  """Distinct count of ownerId across the matching connection"""
  ownerId: BigInt

  """Distinct count of tagName across the matching connection"""
  tagName: BigInt

  """Distinct count of useCount across the matching connection"""
  useCount: BigInt
}

"""
A filter to be used against `Tag` object types. All fields are combined with a logical ‘and.’
"""
input TagFilter {
  """Checks for all expressions in this list."""
  and: [TagFilter!]

  """Filter by the object’s `attachment` field."""
  attachment: StringFilter

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `guildId` field."""
  guildId: BigIntFilter

  """Negates the expression."""
  not: TagFilter

  """Checks for any expressions in this list."""
  or: [TagFilter!]

  """Filter by the object’s `ownerId` field."""
  ownerId: BigIntFilter

  """Filter by the object’s `tagName` field."""
  tagName: StringFilter

  """Filter by the object’s `useCount` field."""
  useCount: BigIntFilter
}

"""An input for mutations affecting `Tag`"""
input TagInput {
  attachment: String
  content: String!
  created: Datetime!
  guildId: BigInt!
  ownerId: BigInt!
  tagName: String!
  useCount: BigInt!
}

type TagMaxAggregates {
  """Maximum of guildId across the matching connection"""
  guildId: BigInt

  """Maximum of ownerId across the matching connection"""
  ownerId: BigInt

  """Maximum of useCount across the matching connection"""
  useCount: BigInt
}

type TagMinAggregates {
  """Minimum of guildId across the matching connection"""
  guildId: BigInt

  """Minimum of ownerId across the matching connection"""
  ownerId: BigInt

  """Minimum of useCount across the matching connection"""
  useCount: BigInt
}

"""Represents an update to a `Tag`. Fields that are set will be updated."""
input TagPatch {
  attachment: String
  content: String
  created: Datetime
  guildId: BigInt
  ownerId: BigInt
  tagName: String
  useCount: BigInt
}

type TagStddevPopulationAggregates {
  """
  Population standard deviation of guildId across the matching connection
  """
  guildId: BigFloat

  """
  Population standard deviation of ownerId across the matching connection
  """
  ownerId: BigFloat

  """
  Population standard deviation of useCount across the matching connection
  """
  useCount: BigFloat
}

type TagStddevSampleAggregates {
  """Sample standard deviation of guildId across the matching connection"""
  guildId: BigFloat

  """Sample standard deviation of ownerId across the matching connection"""
  ownerId: BigFloat

  """Sample standard deviation of useCount across the matching connection"""
  useCount: BigFloat
}

type TagSumAggregates {
  """Sum of guildId across the matching connection"""
  guildId: BigFloat!

  """Sum of ownerId across the matching connection"""
  ownerId: BigFloat!

  """Sum of useCount across the matching connection"""
  useCount: BigFloat!
}

type TagVariancePopulationAggregates {
  """Population variance of guildId across the matching connection"""
  guildId: BigFloat

  """Population variance of ownerId across the matching connection"""
  ownerId: BigFloat

  """Population variance of useCount across the matching connection"""
  useCount: BigFloat
}

type TagVarianceSampleAggregates {
  """Sample variance of guildId across the matching connection"""
  guildId: BigFloat

  """Sample variance of ownerId across the matching connection"""
  ownerId: BigFloat

  """Sample variance of useCount across the matching connection"""
  useCount: BigFloat
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: TagAggregates

  """
  A list of edges which contains the `Tag` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Tag` for these aggregates."""
    groupBy: [TagsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: TagsHavingInput
  ): [TagAggregates!]

  """A list of `Tag` objects."""
  nodes: [Tag!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag!
}

"""Grouping methods for `Tag` for usage during aggregation."""
enum TagsGroupBy {
  ATTACHMENT
  CONTENT
  CREATED
  CREATED_TRUNCATED_TO_DAY
  CREATED_TRUNCATED_TO_HOUR
  GUILD_ID
  OWNER_ID
  TAG_NAME
  USE_COUNT
}

input TagsHavingAverageInput {
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  ownerId: HavingBigintFilter
  useCount: HavingBigintFilter
}

input TagsHavingDistinctCountInput {
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  ownerId: HavingBigintFilter
  useCount: HavingBigintFilter
}

"""Conditions for `Tag` aggregates."""
input TagsHavingInput {
  AND: [TagsHavingInput!]
  OR: [TagsHavingInput!]
  average: TagsHavingAverageInput
  distinctCount: TagsHavingDistinctCountInput
  max: TagsHavingMaxInput
  min: TagsHavingMinInput
  stddevPopulation: TagsHavingStddevPopulationInput
  stddevSample: TagsHavingStddevSampleInput
  sum: TagsHavingSumInput
  variancePopulation: TagsHavingVariancePopulationInput
  varianceSample: TagsHavingVarianceSampleInput
}

input TagsHavingMaxInput {
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  ownerId: HavingBigintFilter
  useCount: HavingBigintFilter
}

input TagsHavingMinInput {
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  ownerId: HavingBigintFilter
  useCount: HavingBigintFilter
}

input TagsHavingStddevPopulationInput {
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  ownerId: HavingBigintFilter
  useCount: HavingBigintFilter
}

input TagsHavingStddevSampleInput {
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  ownerId: HavingBigintFilter
  useCount: HavingBigintFilter
}

input TagsHavingSumInput {
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  ownerId: HavingBigintFilter
  useCount: HavingBigintFilter
}

input TagsHavingVariancePopulationInput {
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  ownerId: HavingBigintFilter
  useCount: HavingBigintFilter
}

input TagsHavingVarianceSampleInput {
  created: HavingDatetimeFilter
  guildId: HavingBigintFilter
  ownerId: HavingBigintFilter
  useCount: HavingBigintFilter
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  ATTACHMENT_ASC
  ATTACHMENT_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_ASC
  CREATED_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  NATURAL
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAG_NAME_ASC
  TAG_NAME_DESC
  USE_COUNT_ASC
  USE_COUNT_DESC
}

"""A `TimeframeUserLevelsRecord` edge in the connection."""
type TimeframeUserLevelEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TimeframeUserLevelsRecord` at the end of the edge."""
  node: TimeframeUserLevelsRecord!
}

"""A connection to a list of `TimeframeUserLevelsRecord` values."""
type TimeframeUserLevelsConnection {
  """
  A list of edges which contains the `TimeframeUserLevelsRecord` and cursor to aid in pagination.
  """
  edges: [TimeframeUserLevelEdge!]!

  """A list of `TimeframeUserLevelsRecord` objects."""
  nodes: [TimeframeUserLevelsRecord!]!

  """
  The count of *all* `TimeframeUserLevelsRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""The return type of our `timeframeUserLevels` query."""
type TimeframeUserLevelsRecord {
  avatarUrl: String
  currentLevel: BigInt
  discriminator: Int
  gainedLevels: BigInt
  nextLevelXpProgress: BigInt
  nextLevelXpRequired: BigInt
  userId: BigInt
  username: String
  xp: BigInt
  xpDiff: BigInt
}

"""
A filter to be used against `TimeframeUserLevelsRecord` object types. All fields are combined with a logical ‘and.’
"""
input TimeframeUserLevelsRecordFilter {
  """Checks for all expressions in this list."""
  and: [TimeframeUserLevelsRecordFilter!]

  """Filter by the object’s `avatarUrl` field."""
  avatarUrl: StringFilter

  """Filter by the object’s `currentLevel` field."""
  currentLevel: BigIntFilter

  """Filter by the object’s `discriminator` field."""
  discriminator: IntFilter

  """Filter by the object’s `gainedLevels` field."""
  gainedLevels: BigIntFilter

  """Filter by the object’s `nextLevelXpProgress` field."""
  nextLevelXpProgress: BigIntFilter

  """Filter by the object’s `nextLevelXpRequired` field."""
  nextLevelXpRequired: BigIntFilter

  """Negates the expression."""
  not: TimeframeUserLevelsRecordFilter

  """Checks for any expressions in this list."""
  or: [TimeframeUserLevelsRecordFilter!]

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `xp` field."""
  xp: BigIntFilter

  """Filter by the object’s `xpDiff` field."""
  xpDiff: BigIntFilter
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateBotStatByNameAndCategory` mutation."""
input UpdateBotStatByNameAndCategoryInput {
  """
  An object where the defined keys will be set on the `BotStat` being updated.
  """
  botStatPatch: BotStatPatch!
  category: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `updateBotStat` mutation."""
input UpdateBotStatInput {
  """
  An object where the defined keys will be set on the `BotStat` being updated.
  """
  botStatPatch: BotStatPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BotStat` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `BotStat` mutation."""
type UpdateBotStatPayload {
  """The `BotStat` that was updated by this mutation."""
  botStat: BotStat

  """An edge for our `BotStat`. May be used by Relay 1."""
  botStatEdge(
    """The method to use when ordering `BotStat`."""
    orderBy: [BotStatsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotStatsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCachedGuildById` mutation."""
input UpdateCachedGuildByIdInput {
  """
  An object where the defined keys will be set on the `CachedGuild` being updated.
  """
  cachedGuildPatch: CachedGuildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `updateCachedGuild` mutation."""
input UpdateCachedGuildInput {
  """
  An object where the defined keys will be set on the `CachedGuild` being updated.
  """
  cachedGuildPatch: CachedGuildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CachedGuild` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `CachedGuild` mutation."""
type UpdateCachedGuildPayload {
  """The `CachedGuild` that was updated by this mutation."""
  cachedGuild: CachedGuild

  """An edge for our `CachedGuild`. May be used by Relay 1."""
  cachedGuildEdge(
    """The method to use when ordering `CachedGuild`."""
    orderBy: [CachedGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedGuildsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCachedUserById` mutation."""
input UpdateCachedUserByIdInput {
  """
  An object where the defined keys will be set on the `CachedUser` being updated.
  """
  cachedUserPatch: CachedUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `updateCachedUser` mutation."""
input UpdateCachedUserInput {
  """
  An object where the defined keys will be set on the `CachedUser` being updated.
  """
  cachedUserPatch: CachedUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CachedUser` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `CachedUser` mutation."""
type UpdateCachedUserPayload {
  """The `CachedUser` that was updated by this mutation."""
  cachedUser: CachedUser

  """An edge for our `CachedUser`. May be used by Relay 1."""
  cachedUserEdge(
    """The method to use when ordering `CachedUser`."""
    orderBy: [CachedUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFeedByFeedId` mutation."""
input UpdateFeedByFeedIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  feedId: String!

  """
  An object where the defined keys will be set on the `Feed` being updated.
  """
  feedPatch: FeedPatch!
}

"""All input for the `updateFeed` mutation."""
input UpdateFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Feed` being updated.
  """
  feedPatch: FeedPatch!

  """
  The globally unique `ID` which will identify a single `Feed` to be updated.
  """
  nodeId: ID!
}

"""All input for the `updateFeedItemByFeedIdAndItemId` mutation."""
input UpdateFeedItemByFeedIdAndItemIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  feedId: String!

  """
  An object where the defined keys will be set on the `FeedItem` being updated.
  """
  feedItemPatch: FeedItemPatch!
  itemId: String!
}

"""All input for the `updateFeedItem` mutation."""
input UpdateFeedItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FeedItem` being updated.
  """
  feedItemPatch: FeedItemPatch!

  """
  The globally unique `ID` which will identify a single `FeedItem` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `FeedItem` mutation."""
type UpdateFeedItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FeedItem` that was updated by this mutation."""
  feedItem: FeedItem

  """An edge for our `FeedItem`. May be used by Relay 1."""
  feedItemEdge(
    """The method to use when ordering `FeedItem`."""
    orderBy: [FeedItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedItemsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `Feed` mutation."""
type UpdateFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Feed` that was updated by this mutation."""
  feed: Feed

  """An edge for our `Feed`. May be used by Relay 1."""
  feedEdge(
    """The method to use when ordering `Feed`."""
    orderBy: [FeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateFeedSubscriptionByFeedIdAndChannelId` mutation.
"""
input UpdateFeedSubscriptionByFeedIdAndChannelIdInput {
  channelId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  feedId: String!

  """
  An object where the defined keys will be set on the `FeedSubscription` being updated.
  """
  feedSubscriptionPatch: FeedSubscriptionPatch!
}

"""All input for the `updateFeedSubscription` mutation."""
input UpdateFeedSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FeedSubscription` being updated.
  """
  feedSubscriptionPatch: FeedSubscriptionPatch!

  """
  The globally unique `ID` which will identify a single `FeedSubscription` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `FeedSubscription` mutation."""
type UpdateFeedSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Feed` that is related to this `FeedSubscription`."""
  feedByFeedId: Feed

  """The `FeedSubscription` that was updated by this mutation."""
  feedSubscription: FeedSubscription

  """An edge for our `FeedSubscription`. May be used by Relay 1."""
  feedSubscriptionEdge(
    """The method to use when ordering `FeedSubscription`."""
    orderBy: [FeedSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedSubscriptionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGuildBanByGuildIdAndUserId` mutation."""
input UpdateGuildBanByGuildIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GuildBan` being updated.
  """
  guildBanPatch: GuildBanPatch!
  guildId: BigInt!
  userId: BigInt!
}

"""All input for the `updateGuildBan` mutation."""
input UpdateGuildBanInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GuildBan` being updated.
  """
  guildBanPatch: GuildBanPatch!

  """
  The globally unique `ID` which will identify a single `GuildBan` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `GuildBan` mutation."""
type UpdateGuildBanPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GuildBan` that was updated by this mutation."""
  guildBan: GuildBan

  """An edge for our `GuildBan`. May be used by Relay 1."""
  guildBanEdge(
    """The method to use when ordering `GuildBan`."""
    orderBy: [GuildBansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildBansEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGuildConfigById` mutation."""
input UpdateGuildConfigByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GuildConfig` being updated.
  """
  guildConfigPatch: GuildConfigPatch!
  id: BigInt!
}

"""All input for the `updateGuildConfig` mutation."""
input UpdateGuildConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GuildConfig` being updated.
  """
  guildConfigPatch: GuildConfigPatch!

  """
  The globally unique `ID` which will identify a single `GuildConfig` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `GuildConfig` mutation."""
type UpdateGuildConfigPayload {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GuildConfig` that was updated by this mutation."""
  guildConfig: GuildConfig

  """An edge for our `GuildConfig`. May be used by Relay 1."""
  guildConfigEdge(
    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMemberByGuildIdAndUserId` mutation."""
input UpdateMemberByGuildIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!

  """
  An object where the defined keys will be set on the `Member` being updated.
  """
  memberPatch: MemberPatch!
  userId: BigInt!
}

"""All input for the `updateMember` mutation."""
input UpdateMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Member` being updated.
  """
  memberPatch: MemberPatch!

  """
  The globally unique `ID` which will identify a single `Member` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `Member` mutation."""
type UpdateMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was updated by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateModLogByGuildIdAndCaseId` mutation."""
input UpdateModLogByGuildIdAndCaseIdInput {
  caseId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!

  """
  An object where the defined keys will be set on the `ModLog` being updated.
  """
  modLogPatch: ModLogPatch!
}

"""All input for the `updateModLog` mutation."""
input UpdateModLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ModLog` being updated.
  """
  modLogPatch: ModLogPatch!

  """
  The globally unique `ID` which will identify a single `ModLog` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `ModLog` mutation."""
type UpdateModLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ModLog` that was updated by this mutation."""
  modLog: ModLog

  """An edge for our `ModLog`. May be used by Relay 1."""
  modLogEdge(
    """The method to use when ordering `ModLog`."""
    orderBy: [ModLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ModLogsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMuteByGuildIdAndUserId` mutation."""
input UpdateMuteByGuildIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!

  """
  An object where the defined keys will be set on the `Mute` being updated.
  """
  mutePatch: MutePatch!
  userId: BigInt!
}

"""All input for the `updateMute` mutation."""
input UpdateMuteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Mute` being updated.
  """
  mutePatch: MutePatch!

  """
  The globally unique `ID` which will identify a single `Mute` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `Mute` mutation."""
type UpdateMutePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `ModLog` that is related to this `Mute`."""
  modLogByGuildIdAndCaseId: ModLog

  """The `Mute` that was updated by this mutation."""
  mute: Mute

  """An edge for our `Mute`. May be used by Relay 1."""
  muteEdge(
    """The method to use when ordering `Mute`."""
    orderBy: [MutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MutesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateNotificationByUserIdAndGuildIdAndKeyword` mutation.
"""
input UpdateNotificationByUserIdAndGuildIdAndKeywordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  keyword: String!

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  notificationPatch: NotificationPatch!
  userId: BigInt!
}

"""All input for the `updateNotification` mutation."""
input UpdateNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Notification` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  notificationPatch: NotificationPatch!
}

"""The output of our update `Notification` mutation."""
type UpdateNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was updated by this mutation."""
  notification: Notification

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateReminderByUserIdAndSetAt` mutation."""
input UpdateReminderByUserIdAndSetAtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Reminder` being updated.
  """
  reminderPatch: ReminderPatch!
  setAt: Datetime!
  userId: BigInt!
}

"""All input for the `updateReminder` mutation."""
input UpdateReminderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Reminder` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Reminder` being updated.
  """
  reminderPatch: ReminderPatch!
}

"""The output of our update `Reminder` mutation."""
type UpdateReminderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Reminder` that was updated by this mutation."""
  reminder: Reminder

  """An edge for our `Reminder`. May be used by Relay 1."""
  reminderEdge(
    """The method to use when ordering `Reminder`."""
    orderBy: [RemindersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RemindersEdge
}

"""All input for the `updateRoleMenuByGuildIdAndMenuName` mutation."""
input UpdateRoleMenuByGuildIdAndMenuNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  menuName: String!

  """
  An object where the defined keys will be set on the `RoleMenu` being updated.
  """
  roleMenuPatch: RoleMenuPatch!
}

"""All input for the `updateRoleMenu` mutation."""
input UpdateRoleMenuInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoleMenu` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RoleMenu` being updated.
  """
  roleMenuPatch: RoleMenuPatch!
}

"""The output of our update `RoleMenu` mutation."""
type UpdateRoleMenuPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RoleMenu` that was updated by this mutation."""
  roleMenu: RoleMenu

  """An edge for our `RoleMenu`. May be used by Relay 1."""
  roleMenuEdge(
    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusEdge
}

"""
All input for the `updateRoleMenuRoleByGuildIdAndMenuNameAndRoleId` mutation.
"""
input UpdateRoleMenuRoleByGuildIdAndMenuNameAndRoleIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  menuName: String!
  roleId: BigInt!

  """
  An object where the defined keys will be set on the `RoleMenuRole` being updated.
  """
  roleMenuRolePatch: RoleMenuRolePatch!
}

"""All input for the `updateRoleMenuRole` mutation."""
input UpdateRoleMenuRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoleMenuRole` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RoleMenuRole` being updated.
  """
  roleMenuRolePatch: RoleMenuRolePatch!
}

"""The output of our update `RoleMenuRole` mutation."""
type UpdateRoleMenuRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RoleMenu` that is related to this `RoleMenuRole`."""
  roleMenuByGuildIdAndMenuName: RoleMenu

  """The `RoleMenuRole` that was updated by this mutation."""
  roleMenuRole: RoleMenuRole

  """An edge for our `RoleMenuRole`. May be used by Relay 1."""
  roleMenuRoleEdge(
    """The method to use when ordering `RoleMenuRole`."""
    orderBy: [RoleMenuRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenuRolesEdge
}

"""All input for the `updateTagByGuildIdAndTagName` mutation."""
input UpdateTagByGuildIdAndTagNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  tagName: String!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  tagPatch: TagPatch!
}

"""All input for the `updateTag` mutation."""
input UpdateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  tagPatch: TagPatch!
}

"""The output of our update `Tag` mutation."""
type UpdateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was updated by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""All input for the `updateUserLevelByUserIdAndGuildId` mutation."""
input UpdateUserLevelByUserIdAndGuildIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!

  """
  An object where the defined keys will be set on the `UserLevel` being updated.
  """
  userLevelPatch: UserLevelPatch!
}

"""All input for the `updateUserLevel` mutation."""
input UpdateUserLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserLevel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserLevel` being updated.
  """
  userLevelPatch: UserLevelPatch!
}

"""The output of our update `UserLevel` mutation."""
type UpdateUserLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `UserLevel` that was updated by this mutation."""
  userLevel: UserLevel

  """An edge for our `UserLevel`. May be used by Relay 1."""
  userLevelEdge(
    """The method to use when ordering `UserLevel`."""
    orderBy: [UserLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLevelsEdge
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateWebUserById` mutation."""
input UpdateWebUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt!

  """
  An object where the defined keys will be set on the `WebUser` being updated.
  """
  webUserPatch: WebUserPatch!
}

"""All input for the `updateWebUserGuildByUserIdAndGuildId` mutation."""
input UpdateWebUserGuildByUserIdAndGuildIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!

  """
  An object where the defined keys will be set on the `WebUserGuild` being updated.
  """
  webUserGuildPatch: WebUserGuildPatch!
}

"""All input for the `updateWebUserGuild` mutation."""
input UpdateWebUserGuildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WebUserGuild` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `WebUserGuild` being updated.
  """
  webUserGuildPatch: WebUserGuildPatch!
}

"""The output of our update `WebUserGuild` mutation."""
type UpdateWebUserGuildPayload {
  """Reads a single `CachedGuild` that is related to this `WebUserGuild`."""
  cachedGuildByGuildId: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `WebUser` that is related to this `WebUserGuild`."""
  webUserByUserId: WebUser

  """The `WebUserGuild` that was updated by this mutation."""
  webUserGuild: WebUserGuild

  """An edge for our `WebUserGuild`. May be used by Relay 1."""
  webUserGuildEdge(
    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsEdge
}

"""All input for the `updateWebUser` mutation."""
input UpdateWebUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WebUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `WebUser` being updated.
  """
  webUserPatch: WebUserPatch!
}

"""The output of our update `WebUser` mutation."""
type UpdateWebUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `WebUser` that was updated by this mutation."""
  webUser: WebUser

  """An edge for our `WebUser`. May be used by Relay 1."""
  webUserEdge(
    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersEdge
}

"""All input for the upsert `BotStat` mutation."""
input UpsertBotStatInput {
  """The `BotStat` to be upserted by this mutation."""
  botStat: BotStatInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our upsert `BotStat` mutation."""
type UpsertBotStatPayload {
  """The `BotStat` that was upserted by this mutation."""
  botStat: BotStat

  """An edge for our `BotStat`. May be used by Relay 1."""
  botStatEdge(
    """The method to use when ordering `BotStat`."""
    orderBy: [BotStatsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotStatsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `BotStat` mutation."""
input UpsertBotStatWhere {
  category: String
  name: String
}

"""All input for the upsert `CachedGuild` mutation."""
input UpsertCachedGuildInput {
  """The `CachedGuild` to be upserted by this mutation."""
  cachedGuild: CachedGuildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our upsert `CachedGuild` mutation."""
type UpsertCachedGuildPayload {
  """The `CachedGuild` that was upserted by this mutation."""
  cachedGuild: CachedGuild

  """An edge for our `CachedGuild`. May be used by Relay 1."""
  cachedGuildEdge(
    """The method to use when ordering `CachedGuild`."""
    orderBy: [CachedGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedGuildsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `CachedGuild` mutation."""
input UpsertCachedGuildWhere {
  id: BigInt
}

"""All input for the upsert `CachedUser` mutation."""
input UpsertCachedUserInput {
  """The `CachedUser` to be upserted by this mutation."""
  cachedUser: CachedUserInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our upsert `CachedUser` mutation."""
type UpsertCachedUserPayload {
  """The `CachedUser` that was upserted by this mutation."""
  cachedUser: CachedUser

  """An edge for our `CachedUser`. May be used by Relay 1."""
  cachedUserEdge(
    """The method to use when ordering `CachedUser`."""
    orderBy: [CachedUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `CachedUser` mutation."""
input UpsertCachedUserWhere {
  id: BigInt
}

"""All input for the upsert `Feed` mutation."""
input UpsertFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Feed` to be upserted by this mutation."""
  feed: FeedInput!
}

"""All input for the upsert `FeedItem` mutation."""
input UpsertFeedItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FeedItem` to be upserted by this mutation."""
  feedItem: FeedItemInput!
}

"""The output of our upsert `FeedItem` mutation."""
type UpsertFeedItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FeedItem` that was upserted by this mutation."""
  feedItem: FeedItem

  """An edge for our `FeedItem`. May be used by Relay 1."""
  feedItemEdge(
    """The method to use when ordering `FeedItem`."""
    orderBy: [FeedItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedItemsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `FeedItem` mutation."""
input UpsertFeedItemWhere {
  feedId: String
  itemId: String
}

"""The output of our upsert `Feed` mutation."""
type UpsertFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Feed` that was upserted by this mutation."""
  feed: Feed

  """An edge for our `Feed`. May be used by Relay 1."""
  feedEdge(
    """The method to use when ordering `Feed`."""
    orderBy: [FeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the upsert `FeedSubscription` mutation."""
input UpsertFeedSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FeedSubscription` to be upserted by this mutation."""
  feedSubscription: FeedSubscriptionInput!
}

"""The output of our upsert `FeedSubscription` mutation."""
type UpsertFeedSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Feed` that is related to this `FeedSubscription`."""
  feedByFeedId: Feed

  """The `FeedSubscription` that was upserted by this mutation."""
  feedSubscription: FeedSubscription

  """An edge for our `FeedSubscription`. May be used by Relay 1."""
  feedSubscriptionEdge(
    """The method to use when ordering `FeedSubscription`."""
    orderBy: [FeedSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedSubscriptionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `FeedSubscription` mutation."""
input UpsertFeedSubscriptionWhere {
  channelId: BigInt
  feedId: String
}

"""Where conditions for the upsert `Feed` mutation."""
input UpsertFeedWhere {
  feedId: String
}

"""All input for the upsert `GuildBan` mutation."""
input UpsertGuildBanInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GuildBan` to be upserted by this mutation."""
  guildBan: GuildBanInput!
}

"""The output of our upsert `GuildBan` mutation."""
type UpsertGuildBanPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GuildBan` that was upserted by this mutation."""
  guildBan: GuildBan

  """An edge for our `GuildBan`. May be used by Relay 1."""
  guildBanEdge(
    """The method to use when ordering `GuildBan`."""
    orderBy: [GuildBansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildBansEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `GuildBan` mutation."""
input UpsertGuildBanWhere {
  guildId: BigInt
  userId: BigInt
}

"""All input for the upsert `GuildConfig` mutation."""
input UpsertGuildConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GuildConfig` to be upserted by this mutation."""
  guildConfig: GuildConfigInput!
}

"""The output of our upsert `GuildConfig` mutation."""
type UpsertGuildConfigPayload {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GuildConfig` that was upserted by this mutation."""
  guildConfig: GuildConfig

  """An edge for our `GuildConfig`. May be used by Relay 1."""
  guildConfigEdge(
    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `GuildConfig` mutation."""
input UpsertGuildConfigWhere {
  id: BigInt
}

"""All input for the upsert `Member` mutation."""
input UpsertMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Member` to be upserted by this mutation."""
  member: MemberInput!
}

"""The output of our upsert `Member` mutation."""
type UpsertMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was upserted by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `Member` mutation."""
input UpsertMemberWhere {
  guildId: BigInt
  userId: BigInt
}

"""All input for the upsert `ModLog` mutation."""
input UpsertModLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ModLog` to be upserted by this mutation."""
  modLog: ModLogInput!
}

"""The output of our upsert `ModLog` mutation."""
type UpsertModLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ModLog` that was upserted by this mutation."""
  modLog: ModLog

  """An edge for our `ModLog`. May be used by Relay 1."""
  modLogEdge(
    """The method to use when ordering `ModLog`."""
    orderBy: [ModLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ModLogsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `ModLog` mutation."""
input UpsertModLogWhere {
  caseId: BigInt
  guildId: BigInt
}

"""All input for the upsert `Mute` mutation."""
input UpsertMuteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Mute` to be upserted by this mutation."""
  mute: MuteInput!
}

"""The output of our upsert `Mute` mutation."""
type UpsertMutePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `ModLog` that is related to this `Mute`."""
  modLogByGuildIdAndCaseId: ModLog

  """The `Mute` that was upserted by this mutation."""
  mute: Mute

  """An edge for our `Mute`. May be used by Relay 1."""
  muteEdge(
    """The method to use when ordering `Mute`."""
    orderBy: [MutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MutesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `Mute` mutation."""
input UpsertMuteWhere {
  guildId: BigInt
  userId: BigInt
}

"""All input for the upsert `Notification` mutation."""
input UpsertNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Notification` to be upserted by this mutation."""
  notification: NotificationInput!
}

"""The output of our upsert `Notification` mutation."""
type UpsertNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was upserted by this mutation."""
  notification: Notification

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `Notification` mutation."""
input UpsertNotificationWhere {
  guildId: BigInt
  keyword: String
  userId: BigInt
}

"""All input for the upsert `Reminder` mutation."""
input UpsertReminderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Reminder` to be upserted by this mutation."""
  reminder: ReminderInput!
}

"""The output of our upsert `Reminder` mutation."""
type UpsertReminderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Reminder` that was upserted by this mutation."""
  reminder: Reminder

  """An edge for our `Reminder`. May be used by Relay 1."""
  reminderEdge(
    """The method to use when ordering `Reminder`."""
    orderBy: [RemindersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RemindersEdge
}

"""Where conditions for the upsert `Reminder` mutation."""
input UpsertReminderWhere {
  setAt: Datetime
  userId: BigInt
}

"""All input for the upsert `RoleMenu` mutation."""
input UpsertRoleMenuInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoleMenu` to be upserted by this mutation."""
  roleMenu: RoleMenuInput!
}

"""The output of our upsert `RoleMenu` mutation."""
type UpsertRoleMenuPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RoleMenu` that was upserted by this mutation."""
  roleMenu: RoleMenu

  """An edge for our `RoleMenu`. May be used by Relay 1."""
  roleMenuEdge(
    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusEdge
}

"""All input for the upsert `RoleMenuRole` mutation."""
input UpsertRoleMenuRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoleMenuRole` to be upserted by this mutation."""
  roleMenuRole: RoleMenuRoleInput!
}

"""The output of our upsert `RoleMenuRole` mutation."""
type UpsertRoleMenuRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RoleMenu` that is related to this `RoleMenuRole`."""
  roleMenuByGuildIdAndMenuName: RoleMenu

  """The `RoleMenuRole` that was upserted by this mutation."""
  roleMenuRole: RoleMenuRole

  """An edge for our `RoleMenuRole`. May be used by Relay 1."""
  roleMenuRoleEdge(
    """The method to use when ordering `RoleMenuRole`."""
    orderBy: [RoleMenuRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenuRolesEdge
}

"""Where conditions for the upsert `RoleMenuRole` mutation."""
input UpsertRoleMenuRoleWhere {
  guildId: BigInt
  menuName: String
  roleId: BigInt
}

"""Where conditions for the upsert `RoleMenu` mutation."""
input UpsertRoleMenuWhere {
  guildId: BigInt
  menuName: String
}

"""All input for the upsert `Tag` mutation."""
input UpsertTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tag` to be upserted by this mutation."""
  tag: TagInput!
}

"""The output of our upsert `Tag` mutation."""
type UpsertTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was upserted by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""Where conditions for the upsert `Tag` mutation."""
input UpsertTagWhere {
  guildId: BigInt
  tagName: String
}

"""All input for the upsert `User` mutation."""
input UpsertUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be upserted by this mutation."""
  user: UserInput!
}

"""All input for the upsert `UserLevel` mutation."""
input UpsertUserLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserLevel` to be upserted by this mutation."""
  userLevel: UserLevelInput!
}

"""The output of our upsert `UserLevel` mutation."""
type UpsertUserLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `UserLevel` that was upserted by this mutation."""
  userLevel: UserLevel

  """An edge for our `UserLevel`. May be used by Relay 1."""
  userLevelEdge(
    """The method to use when ordering `UserLevel`."""
    orderBy: [UserLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLevelsEdge
}

"""Where conditions for the upsert `UserLevel` mutation."""
input UpsertUserLevelWhere {
  guildId: BigInt
  userId: BigInt
}

"""The output of our upsert `User` mutation."""
type UpsertUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was upserted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""Where conditions for the upsert `User` mutation."""
input UpsertUserWhere {
  id: BigInt
}

"""All input for the upsert `WebUserGuild` mutation."""
input UpsertWebUserGuildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `WebUserGuild` to be upserted by this mutation."""
  webUserGuild: WebUserGuildInput!
}

"""The output of our upsert `WebUserGuild` mutation."""
type UpsertWebUserGuildPayload {
  """Reads a single `CachedGuild` that is related to this `WebUserGuild`."""
  cachedGuildByGuildId: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `WebUser` that is related to this `WebUserGuild`."""
  webUserByUserId: WebUser

  """The `WebUserGuild` that was upserted by this mutation."""
  webUserGuild: WebUserGuild

  """An edge for our `WebUserGuild`. May be used by Relay 1."""
  webUserGuildEdge(
    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsEdge
}

"""Where conditions for the upsert `WebUserGuild` mutation."""
input UpsertWebUserGuildWhere {
  guildId: BigInt
  userId: BigInt
}

"""All input for the upsert `WebUser` mutation."""
input UpsertWebUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `WebUser` to be upserted by this mutation."""
  webUser: WebUserInput!
}

"""The output of our upsert `WebUser` mutation."""
type UpsertWebUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `WebUser` that was upserted by this mutation."""
  webUser: WebUser

  """An edge for our `WebUser`. May be used by Relay 1."""
  webUserEdge(
    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersEdge
}

"""Where conditions for the upsert `WebUser` mutation."""
input UpsertWebUserWhere {
  id: BigInt
}

type User implements Node {
  fishies: BigInt!
  id: BigInt!
  isPatron: Boolean!
  lastFishies: Datetime
  lastRep: Datetime
  lastfmUsername: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  patronEmoji: String
  profileData: JSON
  rep: BigInt!
}

type UserAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: UserAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: UserDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: UserMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: UserMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: UserStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: UserStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: UserSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: UserVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: UserVarianceSampleAggregates
}

type UserAverageAggregates {
  """Mean average of fishies across the matching connection"""
  fishies: BigFloat

  """Mean average of id across the matching connection"""
  id: BigFloat

  """Mean average of rep across the matching connection"""
  rep: BigFloat
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `fishies` field."""
  fishies: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isPatron` field."""
  isPatron: Boolean

  """Checks for equality with the object’s `lastFishies` field."""
  lastFishies: Datetime

  """Checks for equality with the object’s `lastRep` field."""
  lastRep: Datetime

  """Checks for equality with the object’s `lastfmUsername` field."""
  lastfmUsername: String

  """Checks for equality with the object’s `patronEmoji` field."""
  patronEmoji: String

  """Checks for equality with the object’s `profileData` field."""
  profileData: JSON

  """Checks for equality with the object’s `rep` field."""
  rep: BigInt
}

type UserDistinctCountAggregates {
  """Distinct count of fishies across the matching connection"""
  fishies: BigInt

  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of isPatron across the matching connection"""
  isPatron: BigInt

  """Distinct count of lastFishies across the matching connection"""
  lastFishies: BigInt

  """Distinct count of lastRep across the matching connection"""
  lastRep: BigInt

  """Distinct count of lastfmUsername across the matching connection"""
  lastfmUsername: BigInt

  """Distinct count of patronEmoji across the matching connection"""
  patronEmoji: BigInt

  """Distinct count of profileData across the matching connection"""
  profileData: BigInt

  """Distinct count of rep across the matching connection"""
  rep: BigInt
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Filter by the object’s `fishies` field."""
  fishies: BigIntFilter

  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `isPatron` field."""
  isPatron: BooleanFilter

  """Filter by the object’s `lastFishies` field."""
  lastFishies: DatetimeFilter

  """Filter by the object’s `lastRep` field."""
  lastRep: DatetimeFilter

  """Filter by the object’s `lastfmUsername` field."""
  lastfmUsername: StringFilter

  """Negates the expression."""
  not: UserFilter

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Filter by the object’s `patronEmoji` field."""
  patronEmoji: StringFilter

  """Filter by the object’s `profileData` field."""
  profileData: JSONFilter

  """Filter by the object’s `rep` field."""
  rep: BigIntFilter
}

type UserGuildRankResult {
  guildId: BigInt
  lastMsg: Datetime
  msgAllTime: BigInt
  msgAllTimeRank: BigInt
  msgAllTimeTotal: BigInt
  msgDay: BigInt
  msgDayRank: BigInt
  msgDayTotal: BigInt
  msgMonth: BigInt
  msgMonthRank: BigInt
  msgMonthTotal: BigInt
  msgWeek: BigInt
  msgWeekRank: BigInt
  msgWeekTotal: BigInt
  userId: BigInt
}

"""An input for mutations affecting `User`"""
input UserInput {
  fishies: BigInt!
  id: BigInt!
  isPatron: Boolean!
  lastFishies: Datetime
  lastRep: Datetime
  lastfmUsername: String
  patronEmoji: String
  profileData: JSON
  rep: BigInt!
}

type UserLevel implements Node {
  guildId: BigInt!
  lastMsg: Datetime!
  msgAllTime: BigInt!
  msgDay: BigInt!
  msgMonth: BigInt!
  msgWeek: BigInt!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: BigInt!
}

type UserLevelAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: UserLevelAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: UserLevelDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: UserLevelMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: UserLevelMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: UserLevelStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: UserLevelStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: UserLevelSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: UserLevelVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: UserLevelVarianceSampleAggregates
}

type UserLevelAverageAggregates {
  """Mean average of guildId across the matching connection"""
  guildId: BigFloat

  """Mean average of msgAllTime across the matching connection"""
  msgAllTime: BigFloat

  """Mean average of msgDay across the matching connection"""
  msgDay: BigFloat

  """Mean average of msgMonth across the matching connection"""
  msgMonth: BigFloat

  """Mean average of msgWeek across the matching connection"""
  msgWeek: BigFloat

  """Mean average of userId across the matching connection"""
  userId: BigFloat
}

"""
A condition to be used against `UserLevel` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserLevelCondition {
  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `lastMsg` field."""
  lastMsg: Datetime

  """Checks for equality with the object’s `msgAllTime` field."""
  msgAllTime: BigInt

  """Checks for equality with the object’s `msgDay` field."""
  msgDay: BigInt

  """Checks for equality with the object’s `msgMonth` field."""
  msgMonth: BigInt

  """Checks for equality with the object’s `msgWeek` field."""
  msgWeek: BigInt

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

type UserLevelDistinctCountAggregates {
  """Distinct count of guildId across the matching connection"""
  guildId: BigInt

  """Distinct count of lastMsg across the matching connection"""
  lastMsg: BigInt

  """Distinct count of msgAllTime across the matching connection"""
  msgAllTime: BigInt

  """Distinct count of msgDay across the matching connection"""
  msgDay: BigInt

  """Distinct count of msgMonth across the matching connection"""
  msgMonth: BigInt

  """Distinct count of msgWeek across the matching connection"""
  msgWeek: BigInt

  """Distinct count of userId across the matching connection"""
  userId: BigInt
}

"""
A filter to be used against `UserLevel` object types. All fields are combined with a logical ‘and.’
"""
input UserLevelFilter {
  """Checks for all expressions in this list."""
  and: [UserLevelFilter!]

  """Filter by the object’s `guildId` field."""
  guildId: BigIntFilter

  """Filter by the object’s `lastMsg` field."""
  lastMsg: DatetimeFilter

  """Filter by the object’s `msgAllTime` field."""
  msgAllTime: BigIntFilter

  """Filter by the object’s `msgDay` field."""
  msgDay: BigIntFilter

  """Filter by the object’s `msgMonth` field."""
  msgMonth: BigIntFilter

  """Filter by the object’s `msgWeek` field."""
  msgWeek: BigIntFilter

  """Negates the expression."""
  not: UserLevelFilter

  """Checks for any expressions in this list."""
  or: [UserLevelFilter!]

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter
}

"""An input for mutations affecting `UserLevel`"""
input UserLevelInput {
  guildId: BigInt!
  lastMsg: Datetime!
  msgAllTime: BigInt!
  msgDay: BigInt!
  msgMonth: BigInt!
  msgWeek: BigInt!
  userId: BigInt!
}

type UserLevelMaxAggregates {
  """Maximum of guildId across the matching connection"""
  guildId: BigInt

  """Maximum of msgAllTime across the matching connection"""
  msgAllTime: BigInt

  """Maximum of msgDay across the matching connection"""
  msgDay: BigInt

  """Maximum of msgMonth across the matching connection"""
  msgMonth: BigInt

  """Maximum of msgWeek across the matching connection"""
  msgWeek: BigInt

  """Maximum of userId across the matching connection"""
  userId: BigInt
}

type UserLevelMinAggregates {
  """Minimum of guildId across the matching connection"""
  guildId: BigInt

  """Minimum of msgAllTime across the matching connection"""
  msgAllTime: BigInt

  """Minimum of msgDay across the matching connection"""
  msgDay: BigInt

  """Minimum of msgMonth across the matching connection"""
  msgMonth: BigInt

  """Minimum of msgWeek across the matching connection"""
  msgWeek: BigInt

  """Minimum of userId across the matching connection"""
  userId: BigInt
}

"""
Represents an update to a `UserLevel`. Fields that are set will be updated.
"""
input UserLevelPatch {
  guildId: BigInt
  lastMsg: Datetime
  msgAllTime: BigInt
  msgDay: BigInt
  msgMonth: BigInt
  msgWeek: BigInt
  userId: BigInt
}

type UserLevelStddevPopulationAggregates {
  """
  Population standard deviation of guildId across the matching connection
  """
  guildId: BigFloat

  """
  Population standard deviation of msgAllTime across the matching connection
  """
  msgAllTime: BigFloat

  """Population standard deviation of msgDay across the matching connection"""
  msgDay: BigFloat

  """
  Population standard deviation of msgMonth across the matching connection
  """
  msgMonth: BigFloat

  """
  Population standard deviation of msgWeek across the matching connection
  """
  msgWeek: BigFloat

  """Population standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type UserLevelStddevSampleAggregates {
  """Sample standard deviation of guildId across the matching connection"""
  guildId: BigFloat

  """Sample standard deviation of msgAllTime across the matching connection"""
  msgAllTime: BigFloat

  """Sample standard deviation of msgDay across the matching connection"""
  msgDay: BigFloat

  """Sample standard deviation of msgMonth across the matching connection"""
  msgMonth: BigFloat

  """Sample standard deviation of msgWeek across the matching connection"""
  msgWeek: BigFloat

  """Sample standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type UserLevelSumAggregates {
  """Sum of guildId across the matching connection"""
  guildId: BigFloat!

  """Sum of msgAllTime across the matching connection"""
  msgAllTime: BigFloat!

  """Sum of msgDay across the matching connection"""
  msgDay: BigFloat!

  """Sum of msgMonth across the matching connection"""
  msgMonth: BigFloat!

  """Sum of msgWeek across the matching connection"""
  msgWeek: BigFloat!

  """Sum of userId across the matching connection"""
  userId: BigFloat!
}

type UserLevelVariancePopulationAggregates {
  """Population variance of guildId across the matching connection"""
  guildId: BigFloat

  """Population variance of msgAllTime across the matching connection"""
  msgAllTime: BigFloat

  """Population variance of msgDay across the matching connection"""
  msgDay: BigFloat

  """Population variance of msgMonth across the matching connection"""
  msgMonth: BigFloat

  """Population variance of msgWeek across the matching connection"""
  msgWeek: BigFloat

  """Population variance of userId across the matching connection"""
  userId: BigFloat
}

type UserLevelVarianceSampleAggregates {
  """Sample variance of guildId across the matching connection"""
  guildId: BigFloat

  """Sample variance of msgAllTime across the matching connection"""
  msgAllTime: BigFloat

  """Sample variance of msgDay across the matching connection"""
  msgDay: BigFloat

  """Sample variance of msgMonth across the matching connection"""
  msgMonth: BigFloat

  """Sample variance of msgWeek across the matching connection"""
  msgWeek: BigFloat

  """Sample variance of userId across the matching connection"""
  userId: BigFloat
}

"""A connection to a list of `UserLevel` values."""
type UserLevelsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: UserLevelAggregates

  """
  A list of edges which contains the `UserLevel` and cursor to aid in pagination.
  """
  edges: [UserLevelsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `UserLevel` for these aggregates."""
    groupBy: [UserLevelsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: UserLevelsHavingInput
  ): [UserLevelAggregates!]

  """A list of `UserLevel` objects."""
  nodes: [UserLevel!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserLevel` you could get from the connection."""
  totalCount: Int!
}

"""A `UserLevel` edge in the connection."""
type UserLevelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserLevel` at the end of the edge."""
  node: UserLevel!
}

"""Grouping methods for `UserLevel` for usage during aggregation."""
enum UserLevelsGroupBy {
  GUILD_ID
  LAST_MSG
  LAST_MSG_TRUNCATED_TO_DAY
  LAST_MSG_TRUNCATED_TO_HOUR
  MSG_ALL_TIME
  MSG_DAY
  MSG_MONTH
  MSG_WEEK
  USER_ID
}

input UserLevelsHavingAverageInput {
  guildId: HavingBigintFilter
  lastMsg: HavingDatetimeFilter
  msgAllTime: HavingBigintFilter
  msgDay: HavingBigintFilter
  msgMonth: HavingBigintFilter
  msgWeek: HavingBigintFilter
  userId: HavingBigintFilter
}

input UserLevelsHavingDistinctCountInput {
  guildId: HavingBigintFilter
  lastMsg: HavingDatetimeFilter
  msgAllTime: HavingBigintFilter
  msgDay: HavingBigintFilter
  msgMonth: HavingBigintFilter
  msgWeek: HavingBigintFilter
  userId: HavingBigintFilter
}

"""Conditions for `UserLevel` aggregates."""
input UserLevelsHavingInput {
  AND: [UserLevelsHavingInput!]
  OR: [UserLevelsHavingInput!]
  average: UserLevelsHavingAverageInput
  distinctCount: UserLevelsHavingDistinctCountInput
  max: UserLevelsHavingMaxInput
  min: UserLevelsHavingMinInput
  stddevPopulation: UserLevelsHavingStddevPopulationInput
  stddevSample: UserLevelsHavingStddevSampleInput
  sum: UserLevelsHavingSumInput
  variancePopulation: UserLevelsHavingVariancePopulationInput
  varianceSample: UserLevelsHavingVarianceSampleInput
}

input UserLevelsHavingMaxInput {
  guildId: HavingBigintFilter
  lastMsg: HavingDatetimeFilter
  msgAllTime: HavingBigintFilter
  msgDay: HavingBigintFilter
  msgMonth: HavingBigintFilter
  msgWeek: HavingBigintFilter
  userId: HavingBigintFilter
}

input UserLevelsHavingMinInput {
  guildId: HavingBigintFilter
  lastMsg: HavingDatetimeFilter
  msgAllTime: HavingBigintFilter
  msgDay: HavingBigintFilter
  msgMonth: HavingBigintFilter
  msgWeek: HavingBigintFilter
  userId: HavingBigintFilter
}

input UserLevelsHavingStddevPopulationInput {
  guildId: HavingBigintFilter
  lastMsg: HavingDatetimeFilter
  msgAllTime: HavingBigintFilter
  msgDay: HavingBigintFilter
  msgMonth: HavingBigintFilter
  msgWeek: HavingBigintFilter
  userId: HavingBigintFilter
}

input UserLevelsHavingStddevSampleInput {
  guildId: HavingBigintFilter
  lastMsg: HavingDatetimeFilter
  msgAllTime: HavingBigintFilter
  msgDay: HavingBigintFilter
  msgMonth: HavingBigintFilter
  msgWeek: HavingBigintFilter
  userId: HavingBigintFilter
}

input UserLevelsHavingSumInput {
  guildId: HavingBigintFilter
  lastMsg: HavingDatetimeFilter
  msgAllTime: HavingBigintFilter
  msgDay: HavingBigintFilter
  msgMonth: HavingBigintFilter
  msgWeek: HavingBigintFilter
  userId: HavingBigintFilter
}

input UserLevelsHavingVariancePopulationInput {
  guildId: HavingBigintFilter
  lastMsg: HavingDatetimeFilter
  msgAllTime: HavingBigintFilter
  msgDay: HavingBigintFilter
  msgMonth: HavingBigintFilter
  msgWeek: HavingBigintFilter
  userId: HavingBigintFilter
}

input UserLevelsHavingVarianceSampleInput {
  guildId: HavingBigintFilter
  lastMsg: HavingDatetimeFilter
  msgAllTime: HavingBigintFilter
  msgDay: HavingBigintFilter
  msgMonth: HavingBigintFilter
  msgWeek: HavingBigintFilter
  userId: HavingBigintFilter
}

"""Methods to use when ordering `UserLevel`."""
enum UserLevelsOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  LAST_MSG_ASC
  LAST_MSG_DESC
  MSG_ALL_TIME_ASC
  MSG_ALL_TIME_DESC
  MSG_DAY_ASC
  MSG_DAY_DESC
  MSG_MONTH_ASC
  MSG_MONTH_DESC
  MSG_WEEK_ASC
  MSG_WEEK_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type UserMaxAggregates {
  """Maximum of fishies across the matching connection"""
  fishies: BigInt

  """Maximum of id across the matching connection"""
  id: BigInt

  """Maximum of rep across the matching connection"""
  rep: BigInt
}

type UserMinAggregates {
  """Minimum of fishies across the matching connection"""
  fishies: BigInt

  """Minimum of id across the matching connection"""
  id: BigInt

  """Minimum of rep across the matching connection"""
  rep: BigInt
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  fishies: BigInt
  id: BigInt
  isPatron: Boolean
  lastFishies: Datetime
  lastRep: Datetime
  lastfmUsername: String
  patronEmoji: String
  profileData: JSON
  rep: BigInt
}

type UserStddevPopulationAggregates {
  """
  Population standard deviation of fishies across the matching connection
  """
  fishies: BigFloat

  """Population standard deviation of id across the matching connection"""
  id: BigFloat

  """Population standard deviation of rep across the matching connection"""
  rep: BigFloat
}

type UserStddevSampleAggregates {
  """Sample standard deviation of fishies across the matching connection"""
  fishies: BigFloat

  """Sample standard deviation of id across the matching connection"""
  id: BigFloat

  """Sample standard deviation of rep across the matching connection"""
  rep: BigFloat
}

type UserSumAggregates {
  """Sum of fishies across the matching connection"""
  fishies: BigFloat!

  """Sum of id across the matching connection"""
  id: BigFloat!

  """Sum of rep across the matching connection"""
  rep: BigFloat!
}

type UserVariancePopulationAggregates {
  """Population variance of fishies across the matching connection"""
  fishies: BigFloat

  """Population variance of id across the matching connection"""
  id: BigFloat

  """Population variance of rep across the matching connection"""
  rep: BigFloat
}

type UserVarianceSampleAggregates {
  """Sample variance of fishies across the matching connection"""
  fishies: BigFloat

  """Sample variance of id across the matching connection"""
  id: BigFloat

  """Sample variance of rep across the matching connection"""
  rep: BigFloat
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: UserAggregates

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `User` for these aggregates."""
    groupBy: [UsersGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: UsersHavingInput
  ): [UserAggregates!]

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Grouping methods for `User` for usage during aggregation."""
enum UsersGroupBy {
  FISHIES
  IS_PATRON
  LASTFM_USERNAME
  LAST_FISHIES
  LAST_FISHIES_TRUNCATED_TO_DAY
  LAST_FISHIES_TRUNCATED_TO_HOUR
  LAST_REP
  LAST_REP_TRUNCATED_TO_DAY
  LAST_REP_TRUNCATED_TO_HOUR
  PATRON_EMOJI
  PROFILE_DATA
  REP
}

input UsersHavingAverageInput {
  fishies: HavingBigintFilter
  id: HavingBigintFilter
  lastFishies: HavingDatetimeFilter
  lastRep: HavingDatetimeFilter
  rep: HavingBigintFilter
}

input UsersHavingDistinctCountInput {
  fishies: HavingBigintFilter
  id: HavingBigintFilter
  lastFishies: HavingDatetimeFilter
  lastRep: HavingDatetimeFilter
  rep: HavingBigintFilter
}

"""Conditions for `User` aggregates."""
input UsersHavingInput {
  AND: [UsersHavingInput!]
  OR: [UsersHavingInput!]
  average: UsersHavingAverageInput
  distinctCount: UsersHavingDistinctCountInput
  max: UsersHavingMaxInput
  min: UsersHavingMinInput
  stddevPopulation: UsersHavingStddevPopulationInput
  stddevSample: UsersHavingStddevSampleInput
  sum: UsersHavingSumInput
  variancePopulation: UsersHavingVariancePopulationInput
  varianceSample: UsersHavingVarianceSampleInput
}

input UsersHavingMaxInput {
  fishies: HavingBigintFilter
  id: HavingBigintFilter
  lastFishies: HavingDatetimeFilter
  lastRep: HavingDatetimeFilter
  rep: HavingBigintFilter
}

input UsersHavingMinInput {
  fishies: HavingBigintFilter
  id: HavingBigintFilter
  lastFishies: HavingDatetimeFilter
  lastRep: HavingDatetimeFilter
  rep: HavingBigintFilter
}

input UsersHavingStddevPopulationInput {
  fishies: HavingBigintFilter
  id: HavingBigintFilter
  lastFishies: HavingDatetimeFilter
  lastRep: HavingDatetimeFilter
  rep: HavingBigintFilter
}

input UsersHavingStddevSampleInput {
  fishies: HavingBigintFilter
  id: HavingBigintFilter
  lastFishies: HavingDatetimeFilter
  lastRep: HavingDatetimeFilter
  rep: HavingBigintFilter
}

input UsersHavingSumInput {
  fishies: HavingBigintFilter
  id: HavingBigintFilter
  lastFishies: HavingDatetimeFilter
  lastRep: HavingDatetimeFilter
  rep: HavingBigintFilter
}

input UsersHavingVariancePopulationInput {
  fishies: HavingBigintFilter
  id: HavingBigintFilter
  lastFishies: HavingDatetimeFilter
  lastRep: HavingDatetimeFilter
  rep: HavingBigintFilter
}

input UsersHavingVarianceSampleInput {
  fishies: HavingBigintFilter
  id: HavingBigintFilter
  lastFishies: HavingDatetimeFilter
  lastRep: HavingDatetimeFilter
  rep: HavingBigintFilter
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  FISHIES_ASC
  FISHIES_DESC
  ID_ASC
  ID_DESC
  IS_PATRON_ASC
  IS_PATRON_DESC
  LASTFM_USERNAME_ASC
  LASTFM_USERNAME_DESC
  LAST_FISHIES_ASC
  LAST_FISHIES_DESC
  LAST_REP_ASC
  LAST_REP_DESC
  NATURAL
  PATRON_EMOJI_ASC
  PATRON_EMOJI_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROFILE_DATA_ASC
  PROFILE_DATA_DESC
  REP_ASC
  REP_DESC
}

"""A user who can log in to the application."""
type WebUser implements Node {
  """Discord avatar hash. Null if user does not have one."""
  avatar: String

  """
  First registered on the application. Is not when a user created their Discord account.
  """
  createdAt: Datetime!

  """Additional profile details extracted from Discord oauth"""
  details: JSON!

  """Discord disciminator of the user."""
  discriminator: Int!

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """Discord username of the user."""
  username: String!

  """Reads and enables pagination through a set of `WebUserGuild`."""
  webUserGuildsByUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserGuildCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WebUserGuildFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsConnection!
}

type WebUserAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: WebUserAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: WebUserDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: WebUserMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: WebUserMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: WebUserStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: WebUserStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: WebUserSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: WebUserVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: WebUserVarianceSampleAggregates
}

type WebUserAverageAggregates {
  """Mean average of discriminator across the matching connection"""
  discriminator: BigFloat

  """Mean average of id across the matching connection"""
  id: BigFloat
}

"""
A condition to be used against `WebUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input WebUserCondition {
  """Checks for equality with the object’s `avatar` field."""
  avatar: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `details` field."""
  details: JSON

  """Checks for equality with the object’s `discriminator` field."""
  discriminator: Int

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isAdmin` field."""
  isAdmin: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `username` field."""
  username: String
}

type WebUserDistinctCountAggregates {
  """Distinct count of avatar across the matching connection"""
  avatar: BigInt

  """Distinct count of createdAt across the matching connection"""
  createdAt: BigInt

  """Distinct count of details across the matching connection"""
  details: BigInt

  """Distinct count of discriminator across the matching connection"""
  discriminator: BigInt

  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of isAdmin across the matching connection"""
  isAdmin: BigInt

  """Distinct count of updatedAt across the matching connection"""
  updatedAt: BigInt

  """Distinct count of username across the matching connection"""
  username: BigInt
}

"""
A filter to be used against `WebUser` object types. All fields are combined with a logical ‘and.’
"""
input WebUserFilter {
  """Checks for all expressions in this list."""
  and: [WebUserFilter!]

  """Filter by the object’s `avatar` field."""
  avatar: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `details` field."""
  details: JSONFilter

  """Filter by the object’s `discriminator` field."""
  discriminator: IntFilter

  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `isAdmin` field."""
  isAdmin: BooleanFilter

  """Negates the expression."""
  not: WebUserFilter

  """Checks for any expressions in this list."""
  or: [WebUserFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `username` field."""
  username: StringFilter
}

type WebUserGuild implements Node {
  """Reads a single `CachedGuild` that is related to this `WebUserGuild`."""
  cachedGuildByGuildId: CachedGuild
  guildId: BigInt!
  manageGuild: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  owner: Boolean!
  permissions: BigInt!
  userId: BigInt!

  """Reads a single `WebUser` that is related to this `WebUserGuild`."""
  webUserByUserId: WebUser
}

type WebUserGuildAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: WebUserGuildAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: WebUserGuildDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: WebUserGuildMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: WebUserGuildMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: WebUserGuildStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: WebUserGuildStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: WebUserGuildSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: WebUserGuildVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: WebUserGuildVarianceSampleAggregates
}

type WebUserGuildAverageAggregates {
  """Mean average of guildId across the matching connection"""
  guildId: BigFloat

  """Mean average of permissions across the matching connection"""
  permissions: BigFloat

  """Mean average of userId across the matching connection"""
  userId: BigFloat
}

"""
A condition to be used against `WebUserGuild` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input WebUserGuildCondition {
  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `manageGuild` field."""
  manageGuild: Boolean

  """Checks for equality with the object’s `owner` field."""
  owner: Boolean

  """Checks for equality with the object’s `permissions` field."""
  permissions: BigInt

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

type WebUserGuildDistinctCountAggregates {
  """Distinct count of guildId across the matching connection"""
  guildId: BigInt

  """Distinct count of manageGuild across the matching connection"""
  manageGuild: BigInt

  """Distinct count of owner across the matching connection"""
  owner: BigInt

  """Distinct count of permissions across the matching connection"""
  permissions: BigInt

  """Distinct count of userId across the matching connection"""
  userId: BigInt
}

"""
A filter to be used against `WebUserGuild` object types. All fields are combined with a logical ‘and.’
"""
input WebUserGuildFilter {
  """Checks for all expressions in this list."""
  and: [WebUserGuildFilter!]

  """Filter by the object’s `guildId` field."""
  guildId: BigIntFilter

  """Filter by the object’s `manageGuild` field."""
  manageGuild: BooleanFilter

  """Negates the expression."""
  not: WebUserGuildFilter

  """Checks for any expressions in this list."""
  or: [WebUserGuildFilter!]

  """Filter by the object’s `owner` field."""
  owner: BooleanFilter

  """Filter by the object’s `permissions` field."""
  permissions: BigIntFilter

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter
}

"""An input for mutations affecting `WebUserGuild`"""
input WebUserGuildInput {
  guildId: BigInt!
  manageGuild: Boolean
  owner: Boolean!
  permissions: BigInt!
  userId: BigInt!
}

type WebUserGuildMaxAggregates {
  """Maximum of guildId across the matching connection"""
  guildId: BigInt

  """Maximum of permissions across the matching connection"""
  permissions: BigInt

  """Maximum of userId across the matching connection"""
  userId: BigInt
}

type WebUserGuildMinAggregates {
  """Minimum of guildId across the matching connection"""
  guildId: BigInt

  """Minimum of permissions across the matching connection"""
  permissions: BigInt

  """Minimum of userId across the matching connection"""
  userId: BigInt
}

"""
Represents an update to a `WebUserGuild`. Fields that are set will be updated.
"""
input WebUserGuildPatch {
  guildId: BigInt
  manageGuild: Boolean
  owner: Boolean
  permissions: BigInt
  userId: BigInt
}

type WebUserGuildStddevPopulationAggregates {
  """
  Population standard deviation of guildId across the matching connection
  """
  guildId: BigFloat

  """
  Population standard deviation of permissions across the matching connection
  """
  permissions: BigFloat

  """Population standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type WebUserGuildStddevSampleAggregates {
  """Sample standard deviation of guildId across the matching connection"""
  guildId: BigFloat

  """
  Sample standard deviation of permissions across the matching connection
  """
  permissions: BigFloat

  """Sample standard deviation of userId across the matching connection"""
  userId: BigFloat
}

type WebUserGuildSumAggregates {
  """Sum of guildId across the matching connection"""
  guildId: BigFloat!

  """Sum of permissions across the matching connection"""
  permissions: BigFloat!

  """Sum of userId across the matching connection"""
  userId: BigFloat!
}

type WebUserGuildVariancePopulationAggregates {
  """Population variance of guildId across the matching connection"""
  guildId: BigFloat

  """Population variance of permissions across the matching connection"""
  permissions: BigFloat

  """Population variance of userId across the matching connection"""
  userId: BigFloat
}

type WebUserGuildVarianceSampleAggregates {
  """Sample variance of guildId across the matching connection"""
  guildId: BigFloat

  """Sample variance of permissions across the matching connection"""
  permissions: BigFloat

  """Sample variance of userId across the matching connection"""
  userId: BigFloat
}

"""A connection to a list of `WebUserGuild` values."""
type WebUserGuildsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: WebUserGuildAggregates

  """
  A list of edges which contains the `WebUserGuild` and cursor to aid in pagination.
  """
  edges: [WebUserGuildsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `WebUserGuild` for these aggregates."""
    groupBy: [WebUserGuildsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: WebUserGuildsHavingInput
  ): [WebUserGuildAggregates!]

  """A list of `WebUserGuild` objects."""
  nodes: [WebUserGuild!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebUserGuild` you could get from the connection."""
  totalCount: Int!
}

"""A `WebUserGuild` edge in the connection."""
type WebUserGuildsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebUserGuild` at the end of the edge."""
  node: WebUserGuild!
}

"""Grouping methods for `WebUserGuild` for usage during aggregation."""
enum WebUserGuildsGroupBy {
  GUILD_ID
  MANAGE_GUILD
  OWNER
  PERMISSIONS
  USER_ID
}

input WebUserGuildsHavingAverageInput {
  guildId: HavingBigintFilter
  permissions: HavingBigintFilter
  userId: HavingBigintFilter
}

input WebUserGuildsHavingDistinctCountInput {
  guildId: HavingBigintFilter
  permissions: HavingBigintFilter
  userId: HavingBigintFilter
}

"""Conditions for `WebUserGuild` aggregates."""
input WebUserGuildsHavingInput {
  AND: [WebUserGuildsHavingInput!]
  OR: [WebUserGuildsHavingInput!]
  average: WebUserGuildsHavingAverageInput
  distinctCount: WebUserGuildsHavingDistinctCountInput
  max: WebUserGuildsHavingMaxInput
  min: WebUserGuildsHavingMinInput
  stddevPopulation: WebUserGuildsHavingStddevPopulationInput
  stddevSample: WebUserGuildsHavingStddevSampleInput
  sum: WebUserGuildsHavingSumInput
  variancePopulation: WebUserGuildsHavingVariancePopulationInput
  varianceSample: WebUserGuildsHavingVarianceSampleInput
}

input WebUserGuildsHavingMaxInput {
  guildId: HavingBigintFilter
  permissions: HavingBigintFilter
  userId: HavingBigintFilter
}

input WebUserGuildsHavingMinInput {
  guildId: HavingBigintFilter
  permissions: HavingBigintFilter
  userId: HavingBigintFilter
}

input WebUserGuildsHavingStddevPopulationInput {
  guildId: HavingBigintFilter
  permissions: HavingBigintFilter
  userId: HavingBigintFilter
}

input WebUserGuildsHavingStddevSampleInput {
  guildId: HavingBigintFilter
  permissions: HavingBigintFilter
  userId: HavingBigintFilter
}

input WebUserGuildsHavingSumInput {
  guildId: HavingBigintFilter
  permissions: HavingBigintFilter
  userId: HavingBigintFilter
}

input WebUserGuildsHavingVariancePopulationInput {
  guildId: HavingBigintFilter
  permissions: HavingBigintFilter
  userId: HavingBigintFilter
}

input WebUserGuildsHavingVarianceSampleInput {
  guildId: HavingBigintFilter
  permissions: HavingBigintFilter
  userId: HavingBigintFilter
}

"""Methods to use when ordering `WebUserGuild`."""
enum WebUserGuildsOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  MANAGE_GUILD_ASC
  MANAGE_GUILD_DESC
  NATURAL
  OWNER_ASC
  OWNER_DESC
  PERMISSIONS_ASC
  PERMISSIONS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""An input for mutations affecting `WebUser`"""
input WebUserInput {
  """Discord avatar hash. Null if user does not have one."""
  avatar: String

  """
  First registered on the application. Is not when a user created their Discord account.
  """
  createdAt: Datetime

  """Additional profile details extracted from Discord oauth"""
  details: JSON

  """Discord disciminator of the user."""
  discriminator: Int!

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  updatedAt: Datetime

  """Discord username of the user."""
  username: String!
}

type WebUserMaxAggregates {
  """Maximum of discriminator across the matching connection"""
  discriminator: Int

  """Maximum of id across the matching connection"""
  id: BigInt
}

type WebUserMinAggregates {
  """Minimum of discriminator across the matching connection"""
  discriminator: Int

  """Minimum of id across the matching connection"""
  id: BigInt
}

"""
Represents an update to a `WebUser`. Fields that are set will be updated.
"""
input WebUserPatch {
  """Discord avatar hash. Null if user does not have one."""
  avatar: String

  """
  First registered on the application. Is not when a user created their Discord account.
  """
  createdAt: Datetime

  """Additional profile details extracted from Discord oauth"""
  details: JSON

  """Discord disciminator of the user."""
  discriminator: Int

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  updatedAt: Datetime

  """Discord username of the user."""
  username: String
}

type WebUserStddevPopulationAggregates {
  """
  Population standard deviation of discriminator across the matching connection
  """
  discriminator: BigFloat

  """Population standard deviation of id across the matching connection"""
  id: BigFloat
}

type WebUserStddevSampleAggregates {
  """
  Sample standard deviation of discriminator across the matching connection
  """
  discriminator: BigFloat

  """Sample standard deviation of id across the matching connection"""
  id: BigFloat
}

type WebUserSumAggregates {
  """Sum of discriminator across the matching connection"""
  discriminator: BigInt!

  """Sum of id across the matching connection"""
  id: BigFloat!
}

type WebUserVariancePopulationAggregates {
  """Population variance of discriminator across the matching connection"""
  discriminator: BigFloat

  """Population variance of id across the matching connection"""
  id: BigFloat
}

type WebUserVarianceSampleAggregates {
  """Sample variance of discriminator across the matching connection"""
  discriminator: BigFloat

  """Sample variance of id across the matching connection"""
  id: BigFloat
}

"""A connection to a list of `WebUser` values."""
type WebUsersConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: WebUserAggregates

  """
  A list of edges which contains the `WebUser` and cursor to aid in pagination.
  """
  edges: [WebUsersEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `WebUser` for these aggregates."""
    groupBy: [WebUsersGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: WebUsersHavingInput
  ): [WebUserAggregates!]

  """A list of `WebUser` objects."""
  nodes: [WebUser!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebUser` you could get from the connection."""
  totalCount: Int!
}

"""A `WebUser` edge in the connection."""
type WebUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebUser` at the end of the edge."""
  node: WebUser!
}

"""Grouping methods for `WebUser` for usage during aggregation."""
enum WebUsersGroupBy {
  AVATAR
  CREATED_AT
  CREATED_AT_TRUNCATED_TO_DAY
  CREATED_AT_TRUNCATED_TO_HOUR
  DETAILS
  DISCRIMINATOR
  IS_ADMIN
  UPDATED_AT
  UPDATED_AT_TRUNCATED_TO_DAY
  UPDATED_AT_TRUNCATED_TO_HOUR
  USERNAME
}

input WebUsersHavingAverageInput {
  createdAt: HavingDatetimeFilter
  discriminator: HavingIntFilter
  id: HavingBigintFilter
  updatedAt: HavingDatetimeFilter
}

input WebUsersHavingDistinctCountInput {
  createdAt: HavingDatetimeFilter
  discriminator: HavingIntFilter
  id: HavingBigintFilter
  updatedAt: HavingDatetimeFilter
}

"""Conditions for `WebUser` aggregates."""
input WebUsersHavingInput {
  AND: [WebUsersHavingInput!]
  OR: [WebUsersHavingInput!]
  average: WebUsersHavingAverageInput
  distinctCount: WebUsersHavingDistinctCountInput
  max: WebUsersHavingMaxInput
  min: WebUsersHavingMinInput
  stddevPopulation: WebUsersHavingStddevPopulationInput
  stddevSample: WebUsersHavingStddevSampleInput
  sum: WebUsersHavingSumInput
  variancePopulation: WebUsersHavingVariancePopulationInput
  varianceSample: WebUsersHavingVarianceSampleInput
}

input WebUsersHavingMaxInput {
  createdAt: HavingDatetimeFilter
  discriminator: HavingIntFilter
  id: HavingBigintFilter
  updatedAt: HavingDatetimeFilter
}

input WebUsersHavingMinInput {
  createdAt: HavingDatetimeFilter
  discriminator: HavingIntFilter
  id: HavingBigintFilter
  updatedAt: HavingDatetimeFilter
}

input WebUsersHavingStddevPopulationInput {
  createdAt: HavingDatetimeFilter
  discriminator: HavingIntFilter
  id: HavingBigintFilter
  updatedAt: HavingDatetimeFilter
}

input WebUsersHavingStddevSampleInput {
  createdAt: HavingDatetimeFilter
  discriminator: HavingIntFilter
  id: HavingBigintFilter
  updatedAt: HavingDatetimeFilter
}

input WebUsersHavingSumInput {
  createdAt: HavingDatetimeFilter
  discriminator: HavingIntFilter
  id: HavingBigintFilter
  updatedAt: HavingDatetimeFilter
}

input WebUsersHavingVariancePopulationInput {
  createdAt: HavingDatetimeFilter
  discriminator: HavingIntFilter
  id: HavingBigintFilter
  updatedAt: HavingDatetimeFilter
}

input WebUsersHavingVarianceSampleInput {
  createdAt: HavingDatetimeFilter
  discriminator: HavingIntFilter
  id: HavingBigintFilter
  updatedAt: HavingDatetimeFilter
}

"""Methods to use when ordering `WebUser`."""
enum WebUsersOrderBy {
  AVATAR_ASC
  AVATAR_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DETAILS_ASC
  DETAILS_DESC
  DISCRIMINATOR_ASC
  DISCRIMINATOR_DESC
  ID_ASC
  ID_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
  WEB_USER_GUILDS_BY_USER_ID_AVERAGE_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_AVERAGE_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_AVERAGE_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_USER_ID_AVERAGE_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_USER_ID_AVERAGE_OWNER_ASC
  WEB_USER_GUILDS_BY_USER_ID_AVERAGE_OWNER_DESC
  WEB_USER_GUILDS_BY_USER_ID_AVERAGE_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_USER_ID_AVERAGE_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_USER_ID_AVERAGE_USER_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_AVERAGE_USER_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_COUNT_ASC
  WEB_USER_GUILDS_BY_USER_ID_COUNT_DESC
  WEB_USER_GUILDS_BY_USER_ID_DISTINCT_COUNT_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_DISTINCT_COUNT_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_DISTINCT_COUNT_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_USER_ID_DISTINCT_COUNT_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_USER_ID_DISTINCT_COUNT_OWNER_ASC
  WEB_USER_GUILDS_BY_USER_ID_DISTINCT_COUNT_OWNER_DESC
  WEB_USER_GUILDS_BY_USER_ID_DISTINCT_COUNT_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_USER_ID_DISTINCT_COUNT_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_USER_ID_DISTINCT_COUNT_USER_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_DISTINCT_COUNT_USER_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_MAX_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_MAX_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_MAX_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_USER_ID_MAX_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_USER_ID_MAX_OWNER_ASC
  WEB_USER_GUILDS_BY_USER_ID_MAX_OWNER_DESC
  WEB_USER_GUILDS_BY_USER_ID_MAX_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_USER_ID_MAX_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_USER_ID_MAX_USER_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_MAX_USER_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_MIN_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_MIN_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_MIN_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_USER_ID_MIN_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_USER_ID_MIN_OWNER_ASC
  WEB_USER_GUILDS_BY_USER_ID_MIN_OWNER_DESC
  WEB_USER_GUILDS_BY_USER_ID_MIN_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_USER_ID_MIN_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_USER_ID_MIN_USER_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_MIN_USER_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_POPULATION_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_POPULATION_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_POPULATION_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_POPULATION_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_POPULATION_OWNER_ASC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_POPULATION_OWNER_DESC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_POPULATION_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_POPULATION_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_POPULATION_USER_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_POPULATION_USER_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_SAMPLE_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_SAMPLE_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_SAMPLE_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_SAMPLE_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_SAMPLE_OWNER_ASC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_SAMPLE_OWNER_DESC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_SAMPLE_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_SAMPLE_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_SAMPLE_USER_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_STDDEV_SAMPLE_USER_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_SUM_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_SUM_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_SUM_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_USER_ID_SUM_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_USER_ID_SUM_OWNER_ASC
  WEB_USER_GUILDS_BY_USER_ID_SUM_OWNER_DESC
  WEB_USER_GUILDS_BY_USER_ID_SUM_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_USER_ID_SUM_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_USER_ID_SUM_USER_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_SUM_USER_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_POPULATION_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_POPULATION_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_POPULATION_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_POPULATION_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_POPULATION_OWNER_ASC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_POPULATION_OWNER_DESC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_POPULATION_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_POPULATION_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_POPULATION_USER_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_POPULATION_USER_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_SAMPLE_GUILD_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_SAMPLE_GUILD_ID_DESC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_SAMPLE_MANAGE_GUILD_ASC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_SAMPLE_MANAGE_GUILD_DESC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_SAMPLE_OWNER_ASC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_SAMPLE_OWNER_DESC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_SAMPLE_PERMISSIONS_ASC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_SAMPLE_PERMISSIONS_DESC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_SAMPLE_USER_ID_ASC
  WEB_USER_GUILDS_BY_USER_ID_VARIANCE_SAMPLE_USER_ID_DESC
}
