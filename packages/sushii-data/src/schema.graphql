"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

type BotStat implements Node {
  category: String!
  count: BigInt!
  createdAt: Datetime!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `BotStat` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BotStatCondition {
  """Checks for equality with the object’s `category` field."""
  category: String

  """Checks for equality with the object’s `count` field."""
  count: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `BotStat`"""
input BotStatInput {
  category: String!
  count: BigInt!
  createdAt: Datetime
  name: String!
  updatedAt: Datetime
}

"""
Represents an update to a `BotStat`. Fields that are set will be updated.
"""
input BotStatPatch {
  category: String
  count: BigInt
  createdAt: Datetime
  name: String
  updatedAt: Datetime
}

"""A connection to a list of `BotStat` values."""
type BotStatsConnection {
  """
  A list of edges which contains the `BotStat` and cursor to aid in pagination.
  """
  edges: [BotStatsEdge!]!

  """A list of `BotStat` objects."""
  nodes: [BotStat!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BotStat` you could get from the connection."""
  totalCount: Int!
}

"""A `BotStat` edge in the connection."""
type BotStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BotStat` at the end of the edge."""
  node: BotStat!
}

"""Methods to use when ordering `BotStat`."""
enum BotStatsOrderBy {
  CATEGORY_ASC
  CATEGORY_DESC
  COUNT_ASC
  COUNT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type CachedGuild implements Node {
  banner: String
  createdAt: Datetime!
  features: [String]!

  """Reads a single `GuildConfig` that is related to this `CachedGuild`."""
  guildConfigById: GuildConfig
  icon: String
  id: BigInt!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  splash: String
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `WebUserGuild`."""
  webUserGuildsByGuildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsConnection!
}

"""An input for mutations affecting `CachedGuild`"""
input CachedGuildInput {
  banner: String
  createdAt: Datetime
  features: [String]
  icon: String
  id: BigInt!
  name: String!
  splash: String
  updatedAt: Datetime
}

"""
Represents an update to a `CachedGuild`. Fields that are set will be updated.
"""
input CachedGuildPatch {
  banner: String
  createdAt: Datetime
  features: [String]
  icon: String
  id: BigInt
  name: String
  splash: String
  updatedAt: Datetime
}

"""A `CachedGuild` edge in the connection."""
type CachedGuildsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CachedGuild` at the end of the edge."""
  node: CachedGuild!
}

"""Methods to use when ordering `CachedGuild`."""
enum CachedGuildsOrderBy {
  BANNER_ASC
  BANNER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FEATURES_ASC
  FEATURES_DESC
  ICON_ASC
  ICON_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SPLASH_ASC
  SPLASH_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type CachedUser implements Node {
  avatarUrl: String!
  discriminator: Int!
  id: BigInt!
  lastChecked: Datetime!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""An input for mutations affecting `CachedUser`"""
input CachedUserInput {
  avatarUrl: String!
  discriminator: Int!
  id: BigInt!
  lastChecked: Datetime!
  name: String!
}

"""
Represents an update to a `CachedUser`. Fields that are set will be updated.
"""
input CachedUserPatch {
  avatarUrl: String
  discriminator: Int
  id: BigInt
  lastChecked: Datetime
  name: String
}

"""A `CachedUser` edge in the connection."""
type CachedUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CachedUser` at the end of the edge."""
  node: CachedUser!
}

"""Methods to use when ordering `CachedUser`."""
enum CachedUsersOrderBy {
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  DISCRIMINATOR_ASC
  DISCRIMINATOR_DESC
  ID_ASC
  ID_DESC
  LAST_CHECKED_ASC
  LAST_CHECKED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `BotStat` mutation."""
input CreateBotStatInput {
  """The `BotStat` to be created by this mutation."""
  botStat: BotStatInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `BotStat` mutation."""
type CreateBotStatPayload {
  """The `BotStat` that was created by this mutation."""
  botStat: BotStat

  """An edge for our `BotStat`. May be used by Relay 1."""
  botStatEdge(
    """The method to use when ordering `BotStat`."""
    orderBy: [BotStatsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotStatsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CachedGuild` mutation."""
input CreateCachedGuildInput {
  """The `CachedGuild` to be created by this mutation."""
  cachedGuild: CachedGuildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CachedGuild` mutation."""
type CreateCachedGuildPayload {
  """The `CachedGuild` that was created by this mutation."""
  cachedGuild: CachedGuild

  """An edge for our `CachedGuild`. May be used by Relay 1."""
  cachedGuildEdge(
    """The method to use when ordering `CachedGuild`."""
    orderBy: [CachedGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedGuildsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CachedUser` mutation."""
input CreateCachedUserInput {
  """The `CachedUser` to be created by this mutation."""
  cachedUser: CachedUserInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CachedUser` mutation."""
type CreateCachedUserPayload {
  """The `CachedUser` that was created by this mutation."""
  cachedUser: CachedUser

  """An edge for our `CachedUser`. May be used by Relay 1."""
  cachedUserEdge(
    """The method to use when ordering `CachedUser`."""
    orderBy: [CachedUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Feed` mutation."""
input CreateFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Feed` to be created by this mutation."""
  feed: FeedInput!
}

"""All input for the create `FeedItem` mutation."""
input CreateFeedItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FeedItem` to be created by this mutation."""
  feedItem: FeedItemInput!
}

"""The output of our create `FeedItem` mutation."""
type CreateFeedItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FeedItem` that was created by this mutation."""
  feedItem: FeedItem

  """An edge for our `FeedItem`. May be used by Relay 1."""
  feedItemEdge(
    """The method to use when ordering `FeedItem`."""
    orderBy: [FeedItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedItemsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `Feed` mutation."""
type CreateFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Feed` that was created by this mutation."""
  feed: Feed

  """An edge for our `Feed`. May be used by Relay 1."""
  feedEdge(
    """The method to use when ordering `Feed`."""
    orderBy: [FeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FeedSubscription` mutation."""
input CreateFeedSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FeedSubscription` to be created by this mutation."""
  feedSubscription: FeedSubscriptionInput!
}

"""The output of our create `FeedSubscription` mutation."""
type CreateFeedSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Feed` that is related to this `FeedSubscription`."""
  feedByFeedId: Feed

  """The `FeedSubscription` that was created by this mutation."""
  feedSubscription: FeedSubscription

  """An edge for our `FeedSubscription`. May be used by Relay 1."""
  feedSubscriptionEdge(
    """The method to use when ordering `FeedSubscription`."""
    orderBy: [FeedSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedSubscriptionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `GuildBan` mutation."""
input CreateGuildBanInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GuildBan` to be created by this mutation."""
  guildBan: GuildBanInput!
}

"""The output of our create `GuildBan` mutation."""
type CreateGuildBanPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GuildBan` that was created by this mutation."""
  guildBan: GuildBan

  """An edge for our `GuildBan`. May be used by Relay 1."""
  guildBanEdge(
    """The method to use when ordering `GuildBan`."""
    orderBy: [GuildBansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildBansEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `GuildConfig` mutation."""
input CreateGuildConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GuildConfig` to be created by this mutation."""
  guildConfig: GuildConfigInput!
}

"""The output of our create `GuildConfig` mutation."""
type CreateGuildConfigPayload {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GuildConfig` that was created by this mutation."""
  guildConfig: GuildConfig

  """An edge for our `GuildConfig`. May be used by Relay 1."""
  guildConfigEdge(
    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Member` mutation."""
input CreateMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Member` to be created by this mutation."""
  member: MemberInput!
}

"""The output of our create `Member` mutation."""
type CreateMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was created by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Message` mutation."""
input CreateMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Message` to be created by this mutation."""
  message: MessageInput!
}

"""The output of our create `Message` mutation."""
type CreateMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Message` that was created by this mutation."""
  message: Message

  """An edge for our `Message`. May be used by Relay 1."""
  messageEdge(
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [NATURAL]
  ): MessagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ModLog` mutation."""
input CreateModLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ModLog` to be created by this mutation."""
  modLog: ModLogInput!
}

"""The output of our create `ModLog` mutation."""
type CreateModLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ModLog` that was created by this mutation."""
  modLog: ModLog

  """An edge for our `ModLog`. May be used by Relay 1."""
  modLogEdge(
    """The method to use when ordering `ModLog`."""
    orderBy: [ModLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ModLogsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Mute` mutation."""
input CreateMuteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Mute` to be created by this mutation."""
  mute: MuteInput!
}

"""The output of our create `Mute` mutation."""
type CreateMutePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `ModLog` that is related to this `Mute`."""
  modLogByGuildIdAndCaseId: ModLog

  """The `Mute` that was created by this mutation."""
  mute: Mute

  """An edge for our `Mute`. May be used by Relay 1."""
  muteEdge(
    """The method to use when ordering `Mute`."""
    orderBy: [MutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MutesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Notification` mutation."""
input CreateNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Notification` to be created by this mutation."""
  notification: NotificationInput!
}

"""The output of our create `Notification` mutation."""
type CreateNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was created by this mutation."""
  notification: Notification

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Reminder` mutation."""
input CreateReminderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Reminder` to be created by this mutation."""
  reminder: ReminderInput!
}

"""The output of our create `Reminder` mutation."""
type CreateReminderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Reminder` that was created by this mutation."""
  reminder: Reminder

  """An edge for our `Reminder`. May be used by Relay 1."""
  reminderEdge(
    """The method to use when ordering `Reminder`."""
    orderBy: [RemindersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RemindersEdge
}

"""All input for the create `RoleMenu` mutation."""
input CreateRoleMenuInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoleMenu` to be created by this mutation."""
  roleMenu: RoleMenuInput!
}

"""The output of our create `RoleMenu` mutation."""
type CreateRoleMenuPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RoleMenu` that was created by this mutation."""
  roleMenu: RoleMenu

  """An edge for our `RoleMenu`. May be used by Relay 1."""
  roleMenuEdge(
    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusEdge
}

"""All input for the create `Tag` mutation."""
input CreateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tag` to be created by this mutation."""
  tag: TagInput!
}

"""The output of our create `Tag` mutation."""
type CreateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was created by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""All input for the create `UserLevel` mutation."""
input CreateUserLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserLevel` to be created by this mutation."""
  userLevel: UserLevelInput!
}

"""The output of our create `UserLevel` mutation."""
type CreateUserLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `UserLevel` that was created by this mutation."""
  userLevel: UserLevel

  """An edge for our `UserLevel`. May be used by Relay 1."""
  userLevelEdge(
    """The method to use when ordering `UserLevel`."""
    orderBy: [UserLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLevelsEdge
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `WebUserGuild` mutation."""
input CreateWebUserGuildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `WebUserGuild` to be created by this mutation."""
  webUserGuild: WebUserGuildInput!
}

"""The output of our create `WebUserGuild` mutation."""
type CreateWebUserGuildPayload {
  """Reads a single `CachedGuild` that is related to this `WebUserGuild`."""
  cachedGuildByGuildId: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `WebUser` that is related to this `WebUserGuild`."""
  webUserByUserId: WebUser

  """The `WebUserGuild` that was created by this mutation."""
  webUserGuild: WebUserGuild

  """An edge for our `WebUserGuild`. May be used by Relay 1."""
  webUserGuildEdge(
    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsEdge
}

"""All input for the create `WebUser` mutation."""
input CreateWebUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `WebUser` to be created by this mutation."""
  webUser: WebUserInput!
}

"""The output of our create `WebUser` mutation."""
type CreateWebUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `WebUser` that was created by this mutation."""
  webUser: WebUser

  """An edge for our `WebUser`. May be used by Relay 1."""
  webUserEdge(
    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersEdge
}

"""A `BigInt` edge in the connection."""
type CurrentUserManagedGuildIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BigInt` at the end of the edge."""
  node: BigInt
}

"""A connection to a list of `BigInt` values."""
type CurrentUserManagedGuildIdsConnection {
  """
  A list of edges which contains the `BigInt` and cursor to aid in pagination.
  """
  edges: [CurrentUserManagedGuildIdEdge!]!

  """A list of `BigInt` objects."""
  nodes: [BigInt]!

  """The count of *all* `BigInt` you could get from the connection."""
  totalCount: Int!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteBotStatByNameAndCategory` mutation."""
input DeleteBotStatByNameAndCategoryInput {
  category: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteBotStat` mutation."""
input DeleteBotStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BotStat` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `BotStat` mutation."""
type DeleteBotStatPayload {
  """The `BotStat` that was deleted by this mutation."""
  botStat: BotStat

  """An edge for our `BotStat`. May be used by Relay 1."""
  botStatEdge(
    """The method to use when ordering `BotStat`."""
    orderBy: [BotStatsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotStatsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedBotStatId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCachedGuildById` mutation."""
input DeleteCachedGuildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteCachedGuild` mutation."""
input DeleteCachedGuildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CachedGuild` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CachedGuild` mutation."""
type DeleteCachedGuildPayload {
  """The `CachedGuild` that was deleted by this mutation."""
  cachedGuild: CachedGuild

  """An edge for our `CachedGuild`. May be used by Relay 1."""
  cachedGuildEdge(
    """The method to use when ordering `CachedGuild`."""
    orderBy: [CachedGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedGuildsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCachedGuildId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCachedUserById` mutation."""
input DeleteCachedUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteCachedUser` mutation."""
input DeleteCachedUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CachedUser` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CachedUser` mutation."""
type DeleteCachedUserPayload {
  """The `CachedUser` that was deleted by this mutation."""
  cachedUser: CachedUser

  """An edge for our `CachedUser`. May be used by Relay 1."""
  cachedUserEdge(
    """The method to use when ordering `CachedUser`."""
    orderBy: [CachedUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCachedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFeedByFeedId` mutation."""
input DeleteFeedByFeedIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  feedId: String!
}

"""All input for the `deleteFeed` mutation."""
input DeleteFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Feed` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFeedItemByFeedIdAndItemId` mutation."""
input DeleteFeedItemByFeedIdAndItemIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  feedId: String!
  itemId: String!
}

"""All input for the `deleteFeedItem` mutation."""
input DeleteFeedItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FeedItem` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `FeedItem` mutation."""
type DeleteFeedItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFeedItemId: ID

  """The `FeedItem` that was deleted by this mutation."""
  feedItem: FeedItem

  """An edge for our `FeedItem`. May be used by Relay 1."""
  feedItemEdge(
    """The method to use when ordering `FeedItem`."""
    orderBy: [FeedItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedItemsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our delete `Feed` mutation."""
type DeleteFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFeedId: ID

  """The `Feed` that was deleted by this mutation."""
  feed: Feed

  """An edge for our `Feed`. May be used by Relay 1."""
  feedEdge(
    """The method to use when ordering `Feed`."""
    orderBy: [FeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteFeedSubscriptionByFeedIdAndChannelId` mutation.
"""
input DeleteFeedSubscriptionByFeedIdAndChannelIdInput {
  channelId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  feedId: String!
}

"""All input for the `deleteFeedSubscription` mutation."""
input DeleteFeedSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FeedSubscription` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `FeedSubscription` mutation."""
type DeleteFeedSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFeedSubscriptionId: ID

  """Reads a single `Feed` that is related to this `FeedSubscription`."""
  feedByFeedId: Feed

  """The `FeedSubscription` that was deleted by this mutation."""
  feedSubscription: FeedSubscription

  """An edge for our `FeedSubscription`. May be used by Relay 1."""
  feedSubscriptionEdge(
    """The method to use when ordering `FeedSubscription`."""
    orderBy: [FeedSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedSubscriptionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGuildBanByGuildIdAndUserId` mutation."""
input DeleteGuildBanByGuildIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!
}

"""All input for the `deleteGuildBan` mutation."""
input DeleteGuildBanInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GuildBan` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `GuildBan` mutation."""
type DeleteGuildBanPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGuildBanId: ID

  """The `GuildBan` that was deleted by this mutation."""
  guildBan: GuildBan

  """An edge for our `GuildBan`. May be used by Relay 1."""
  guildBanEdge(
    """The method to use when ordering `GuildBan`."""
    orderBy: [GuildBansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildBansEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGuildConfigById` mutation."""
input DeleteGuildConfigByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteGuildConfig` mutation."""
input DeleteGuildConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GuildConfig` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `GuildConfig` mutation."""
type DeleteGuildConfigPayload {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGuildConfigId: ID

  """The `GuildConfig` that was deleted by this mutation."""
  guildConfig: GuildConfig

  """An edge for our `GuildConfig`. May be used by Relay 1."""
  guildConfigEdge(
    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMemberByGuildIdAndUserId` mutation."""
input DeleteMemberByGuildIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!
}

"""All input for the `deleteMember` mutation."""
input DeleteMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Member` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Member` mutation."""
type DeleteMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMemberId: ID

  """The `Member` that was deleted by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteModLogByGuildIdAndCaseId` mutation."""
input DeleteModLogByGuildIdAndCaseIdInput {
  caseId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
}

"""All input for the `deleteModLog` mutation."""
input DeleteModLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ModLog` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ModLog` mutation."""
type DeleteModLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedModLogId: ID

  """The `ModLog` that was deleted by this mutation."""
  modLog: ModLog

  """An edge for our `ModLog`. May be used by Relay 1."""
  modLogEdge(
    """The method to use when ordering `ModLog`."""
    orderBy: [ModLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ModLogsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMuteByGuildIdAndUserId` mutation."""
input DeleteMuteByGuildIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!
}

"""All input for the `deleteMute` mutation."""
input DeleteMuteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Mute` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Mute` mutation."""
type DeleteMutePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMuteId: ID

  """Reads a single `ModLog` that is related to this `Mute`."""
  modLogByGuildIdAndCaseId: ModLog

  """The `Mute` that was deleted by this mutation."""
  mute: Mute

  """An edge for our `Mute`. May be used by Relay 1."""
  muteEdge(
    """The method to use when ordering `Mute`."""
    orderBy: [MutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MutesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteNotificationByUserIdAndGuildIdAndKeyword` mutation.
"""
input DeleteNotificationByUserIdAndGuildIdAndKeywordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  keyword: String!
  userId: BigInt!
}

"""All input for the `deleteNotification` mutation."""
input DeleteNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Notification` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Notification` mutation."""
type DeleteNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNotificationId: ID

  """The `Notification` that was deleted by this mutation."""
  notification: Notification

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteReminderByUserIdAndSetAt` mutation."""
input DeleteReminderByUserIdAndSetAtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  setAt: Datetime!
  userId: BigInt!
}

"""All input for the `deleteReminder` mutation."""
input DeleteReminderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Reminder` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Reminder` mutation."""
type DeleteReminderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedReminderId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Reminder` that was deleted by this mutation."""
  reminder: Reminder

  """An edge for our `Reminder`. May be used by Relay 1."""
  reminderEdge(
    """The method to use when ordering `Reminder`."""
    orderBy: [RemindersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RemindersEdge
}

"""All input for the `deleteRoleMenuByMessageId` mutation."""
input DeleteRoleMenuByMessageIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  messageId: BigInt!
}

"""All input for the `deleteRoleMenu` mutation."""
input DeleteRoleMenuInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoleMenu` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RoleMenu` mutation."""
type DeleteRoleMenuPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoleMenuId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RoleMenu` that was deleted by this mutation."""
  roleMenu: RoleMenu

  """An edge for our `RoleMenu`. May be used by Relay 1."""
  roleMenuEdge(
    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusEdge
}

"""All input for the `deleteTagByGuildIdAndTagName` mutation."""
input DeleteTagByGuildIdAndTagNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  tagName: String!
}

"""All input for the `deleteTag` mutation."""
input DeleteTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Tag` mutation."""
type DeleteTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTagId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was deleted by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserLevelByUserIdAndGuildId` mutation."""
input DeleteUserLevelByUserIdAndGuildIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!
}

"""All input for the `deleteUserLevel` mutation."""
input DeleteUserLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserLevel` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserLevel` mutation."""
type DeleteUserLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserLevelId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `UserLevel` that was deleted by this mutation."""
  userLevel: UserLevel

  """An edge for our `UserLevel`. May be used by Relay 1."""
  userLevelEdge(
    """The method to use when ordering `UserLevel`."""
    orderBy: [UserLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLevelsEdge
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteWebUserById` mutation."""
input DeleteWebUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt!
}

"""All input for the `deleteWebUserGuildByUserIdAndGuildId` mutation."""
input DeleteWebUserGuildByUserIdAndGuildIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!
}

"""All input for the `deleteWebUserGuild` mutation."""
input DeleteWebUserGuildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WebUserGuild` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `WebUserGuild` mutation."""
type DeleteWebUserGuildPayload {
  """Reads a single `CachedGuild` that is related to this `WebUserGuild`."""
  cachedGuildByGuildId: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedWebUserGuildId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `WebUser` that is related to this `WebUserGuild`."""
  webUserByUserId: WebUser

  """The `WebUserGuild` that was deleted by this mutation."""
  webUserGuild: WebUserGuild

  """An edge for our `WebUserGuild`. May be used by Relay 1."""
  webUserGuildEdge(
    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsEdge
}

"""All input for the `deleteWebUser` mutation."""
input DeleteWebUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WebUser` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `WebUser` mutation."""
type DeleteWebUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedWebUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `WebUser` that was deleted by this mutation."""
  webUser: WebUser

  """An edge for our `WebUser`. May be used by Relay 1."""
  webUserEdge(
    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersEdge
}

type Feed implements Node {
  feedId: String!

  """Reads and enables pagination through a set of `FeedSubscription`."""
  feedSubscriptionsByFeedId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FeedSubscriptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FeedSubscription`."""
    orderBy: [FeedSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedSubscriptionsConnection!
  metadata: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Feed` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FeedCondition {
  """Checks for equality with the object’s `feedId` field."""
  feedId: String

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON
}

"""An input for mutations affecting `Feed`"""
input FeedInput {
  feedId: String!
  metadata: JSON
}

type FeedItem implements Node {
  feedId: String!
  itemId: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `FeedItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FeedItemCondition {
  """Checks for equality with the object’s `feedId` field."""
  feedId: String

  """Checks for equality with the object’s `itemId` field."""
  itemId: String
}

"""An input for mutations affecting `FeedItem`"""
input FeedItemInput {
  feedId: String!
  itemId: String!
}

"""
Represents an update to a `FeedItem`. Fields that are set will be updated.
"""
input FeedItemPatch {
  feedId: String
  itemId: String
}

"""A connection to a list of `FeedItem` values."""
type FeedItemsConnection {
  """
  A list of edges which contains the `FeedItem` and cursor to aid in pagination.
  """
  edges: [FeedItemsEdge!]!

  """A list of `FeedItem` objects."""
  nodes: [FeedItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FeedItem` you could get from the connection."""
  totalCount: Int!
}

"""A `FeedItem` edge in the connection."""
type FeedItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FeedItem` at the end of the edge."""
  node: FeedItem!
}

"""Methods to use when ordering `FeedItem`."""
enum FeedItemsOrderBy {
  FEED_ID_ASC
  FEED_ID_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Represents an update to a `Feed`. Fields that are set will be updated."""
input FeedPatch {
  feedId: String
  metadata: JSON
}

type FeedSubscription implements Node {
  channelId: BigInt!

  """Reads a single `Feed` that is related to this `FeedSubscription`."""
  feedByFeedId: Feed
  feedId: String!
  guildId: BigInt!
  mentionRole: BigInt

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `FeedSubscription` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FeedSubscriptionCondition {
  """Checks for equality with the object’s `channelId` field."""
  channelId: BigInt

  """Checks for equality with the object’s `feedId` field."""
  feedId: String

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `mentionRole` field."""
  mentionRole: BigInt
}

"""An input for mutations affecting `FeedSubscription`"""
input FeedSubscriptionInput {
  channelId: BigInt!
  feedId: String!
  guildId: BigInt!
  mentionRole: BigInt
}

"""
Represents an update to a `FeedSubscription`. Fields that are set will be updated.
"""
input FeedSubscriptionPatch {
  channelId: BigInt
  feedId: String
  guildId: BigInt
  mentionRole: BigInt
}

"""A connection to a list of `FeedSubscription` values."""
type FeedSubscriptionsConnection {
  """
  A list of edges which contains the `FeedSubscription` and cursor to aid in pagination.
  """
  edges: [FeedSubscriptionsEdge!]!

  """A list of `FeedSubscription` objects."""
  nodes: [FeedSubscription!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FeedSubscription` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FeedSubscription` edge in the connection."""
type FeedSubscriptionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FeedSubscription` at the end of the edge."""
  node: FeedSubscription!
}

"""Methods to use when ordering `FeedSubscription`."""
enum FeedSubscriptionsOrderBy {
  CHANNEL_ID_ASC
  CHANNEL_ID_DESC
  FEED_ID_ASC
  FEED_ID_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  MENTION_ROLE_ASC
  MENTION_ROLE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Feed` values."""
type FeedsConnection {
  """
  A list of edges which contains the `Feed` and cursor to aid in pagination.
  """
  edges: [FeedsEdge!]!

  """A list of `Feed` objects."""
  nodes: [Feed!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Feed` you could get from the connection."""
  totalCount: Int!
}

"""A `Feed` edge in the connection."""
type FeedsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Feed` at the end of the edge."""
  node: Feed!
}

"""Methods to use when ordering `Feed`."""
enum FeedsOrderBy {
  FEED_ID_ASC
  FEED_ID_DESC
  METADATA_ASC
  METADATA_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `graphql` mutation."""
input GraphqlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  extensions: JSON
  operationName: String
  query: String
  variables: JSON
}

"""The output of our `graphql` mutation."""
type GraphqlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type GuildBan implements Node {
  guildId: BigInt!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: BigInt!
}

"""
A condition to be used against `GuildBan` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GuildBanCondition {
  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

"""An input for mutations affecting `GuildBan`"""
input GuildBanInput {
  guildId: BigInt!
  userId: BigInt!
}

"""
Represents an update to a `GuildBan`. Fields that are set will be updated.
"""
input GuildBanPatch {
  guildId: BigInt
  userId: BigInt
}

"""A connection to a list of `GuildBan` values."""
type GuildBansConnection {
  """
  A list of edges which contains the `GuildBan` and cursor to aid in pagination.
  """
  edges: [GuildBansEdge!]!

  """A list of `GuildBan` objects."""
  nodes: [GuildBan!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GuildBan` you could get from the connection."""
  totalCount: Int!
}

"""A `GuildBan` edge in the connection."""
type GuildBansEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GuildBan` at the end of the edge."""
  node: GuildBan!
}

"""Methods to use when ordering `GuildBan`."""
enum GuildBansOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type GuildConfig implements Node {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild
  data: JSON!
  disabledChannels: [BigInt]
  id: BigInt!
  inviteGuard: Boolean!
  joinMsg: String
  joinMsgEnabled: Boolean!
  joinReact: String
  leaveMsg: String
  leaveMsgEnabled: Boolean!
  logMember: BigInt
  logMemberEnabled: Boolean!
  logMod: BigInt
  logModEnabled: Boolean!
  logMsg: BigInt
  logMsgEnabled: Boolean!
  maxMention: Int
  msgChannel: BigInt
  muteDmEnabled: Boolean!
  muteDmText: String
  muteDuration: BigInt
  muteRole: BigInt

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  prefix: String
  roleChannel: BigInt
  roleConfig: JSON
  roleEnabled: Boolean!
  warnDmEnabled: Boolean!
  warnDmText: String
}

"""
A condition to be used against `GuildConfig` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GuildConfigCondition {
  """Checks for equality with the object’s `data` field."""
  data: JSON

  """Checks for equality with the object’s `disabledChannels` field."""
  disabledChannels: [BigInt]

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `inviteGuard` field."""
  inviteGuard: Boolean

  """Checks for equality with the object’s `joinMsg` field."""
  joinMsg: String

  """Checks for equality with the object’s `joinMsgEnabled` field."""
  joinMsgEnabled: Boolean

  """Checks for equality with the object’s `joinReact` field."""
  joinReact: String

  """Checks for equality with the object’s `leaveMsg` field."""
  leaveMsg: String

  """Checks for equality with the object’s `leaveMsgEnabled` field."""
  leaveMsgEnabled: Boolean

  """Checks for equality with the object’s `logMember` field."""
  logMember: BigInt

  """Checks for equality with the object’s `logMemberEnabled` field."""
  logMemberEnabled: Boolean

  """Checks for equality with the object’s `logMod` field."""
  logMod: BigInt

  """Checks for equality with the object’s `logModEnabled` field."""
  logModEnabled: Boolean

  """Checks for equality with the object’s `logMsg` field."""
  logMsg: BigInt

  """Checks for equality with the object’s `logMsgEnabled` field."""
  logMsgEnabled: Boolean

  """Checks for equality with the object’s `maxMention` field."""
  maxMention: Int

  """Checks for equality with the object’s `msgChannel` field."""
  msgChannel: BigInt

  """Checks for equality with the object’s `muteDmEnabled` field."""
  muteDmEnabled: Boolean

  """Checks for equality with the object’s `muteDmText` field."""
  muteDmText: String

  """Checks for equality with the object’s `muteDuration` field."""
  muteDuration: BigInt

  """Checks for equality with the object’s `muteRole` field."""
  muteRole: BigInt

  """Checks for equality with the object’s `prefix` field."""
  prefix: String

  """Checks for equality with the object’s `roleChannel` field."""
  roleChannel: BigInt

  """Checks for equality with the object’s `roleConfig` field."""
  roleConfig: JSON

  """Checks for equality with the object’s `roleEnabled` field."""
  roleEnabled: Boolean

  """Checks for equality with the object’s `warnDmEnabled` field."""
  warnDmEnabled: Boolean

  """Checks for equality with the object’s `warnDmText` field."""
  warnDmText: String
}

"""An input for mutations affecting `GuildConfig`"""
input GuildConfigInput {
  data: JSON
  disabledChannels: [BigInt]
  id: BigInt!
  inviteGuard: Boolean
  joinMsg: String
  joinMsgEnabled: Boolean
  joinReact: String
  leaveMsg: String
  leaveMsgEnabled: Boolean
  logMember: BigInt
  logMemberEnabled: Boolean
  logMod: BigInt
  logModEnabled: Boolean
  logMsg: BigInt
  logMsgEnabled: Boolean
  maxMention: Int
  msgChannel: BigInt
  muteDmEnabled: Boolean
  muteDmText: String
  muteDuration: BigInt
  muteRole: BigInt
  prefix: String
  roleChannel: BigInt
  roleConfig: JSON
  roleEnabled: Boolean
  warnDmEnabled: Boolean
  warnDmText: String
}

"""
Represents an update to a `GuildConfig`. Fields that are set will be updated.
"""
input GuildConfigPatch {
  data: JSON
  disabledChannels: [BigInt]
  id: BigInt
  inviteGuard: Boolean
  joinMsg: String
  joinMsgEnabled: Boolean
  joinReact: String
  leaveMsg: String
  leaveMsgEnabled: Boolean
  logMember: BigInt
  logMemberEnabled: Boolean
  logMod: BigInt
  logModEnabled: Boolean
  logMsg: BigInt
  logMsgEnabled: Boolean
  maxMention: Int
  msgChannel: BigInt
  muteDmEnabled: Boolean
  muteDmText: String
  muteDuration: BigInt
  muteRole: BigInt
  prefix: String
  roleChannel: BigInt
  roleConfig: JSON
  roleEnabled: Boolean
  warnDmEnabled: Boolean
  warnDmText: String
}

"""A connection to a list of `GuildConfig` values."""
type GuildConfigsConnection {
  """
  A list of edges which contains the `GuildConfig` and cursor to aid in pagination.
  """
  edges: [GuildConfigsEdge!]!

  """A list of `GuildConfig` objects."""
  nodes: [GuildConfig!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GuildConfig` you could get from the connection."""
  totalCount: Int!
}

"""A `GuildConfig` edge in the connection."""
type GuildConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GuildConfig` at the end of the edge."""
  node: GuildConfig!
}

"""Methods to use when ordering `GuildConfig`."""
enum GuildConfigsOrderBy {
  DATA_ASC
  DATA_DESC
  DISABLED_CHANNELS_ASC
  DISABLED_CHANNELS_DESC
  ID_ASC
  ID_DESC
  INVITE_GUARD_ASC
  INVITE_GUARD_DESC
  JOIN_MSG_ASC
  JOIN_MSG_DESC
  JOIN_MSG_ENABLED_ASC
  JOIN_MSG_ENABLED_DESC
  JOIN_REACT_ASC
  JOIN_REACT_DESC
  LEAVE_MSG_ASC
  LEAVE_MSG_DESC
  LEAVE_MSG_ENABLED_ASC
  LEAVE_MSG_ENABLED_DESC
  LOG_MEMBER_ASC
  LOG_MEMBER_DESC
  LOG_MEMBER_ENABLED_ASC
  LOG_MEMBER_ENABLED_DESC
  LOG_MOD_ASC
  LOG_MOD_DESC
  LOG_MOD_ENABLED_ASC
  LOG_MOD_ENABLED_DESC
  LOG_MSG_ASC
  LOG_MSG_DESC
  LOG_MSG_ENABLED_ASC
  LOG_MSG_ENABLED_DESC
  MAX_MENTION_ASC
  MAX_MENTION_DESC
  MSG_CHANNEL_ASC
  MSG_CHANNEL_DESC
  MUTE_DM_ENABLED_ASC
  MUTE_DM_ENABLED_DESC
  MUTE_DM_TEXT_ASC
  MUTE_DM_TEXT_DESC
  MUTE_DURATION_ASC
  MUTE_DURATION_DESC
  MUTE_ROLE_ASC
  MUTE_ROLE_DESC
  NATURAL
  PREFIX_ASC
  PREFIX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_CHANNEL_ASC
  ROLE_CHANNEL_DESC
  ROLE_CONFIG_ASC
  ROLE_CONFIG_DESC
  ROLE_ENABLED_ASC
  ROLE_ENABLED_DESC
  WARN_DM_ENABLED_ASC
  WARN_DM_ENABLED_DESC
  WARN_DM_TEXT_ASC
  WARN_DM_TEXT_DESC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum LevelTimeframe {
  ALL_TIME
  DAY
  MONTH
  WEEK
}

"""All input for the `logout` mutation."""
input LogoutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `logout` mutation."""
type LogoutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Member implements Node {
  guildId: BigInt!
  joinTime: Datetime!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: BigInt!
}

"""
A condition to be used against `Member` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MemberCondition {
  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `joinTime` field."""
  joinTime: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

"""An input for mutations affecting `Member`"""
input MemberInput {
  guildId: BigInt!
  joinTime: Datetime!
  userId: BigInt!
}

"""
Represents an update to a `Member`. Fields that are set will be updated.
"""
input MemberPatch {
  guildId: BigInt
  joinTime: Datetime
  userId: BigInt
}

"""A connection to a list of `Member` values."""
type MembersConnection {
  """
  A list of edges which contains the `Member` and cursor to aid in pagination.
  """
  edges: [MembersEdge!]!

  """A list of `Member` objects."""
  nodes: [Member!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Member` you could get from the connection."""
  totalCount: Int!
}

"""A `Member` edge in the connection."""
type MembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Member` at the end of the edge."""
  node: Member!
}

"""Methods to use when ordering `Member`."""
enum MembersOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  JOIN_TIME_ASC
  JOIN_TIME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type Message {
  authorId: BigInt!
  channelId: BigInt!
  content: String!
  created: Datetime!
  guildId: BigInt!
  messageId: BigInt!
  msg: JSON!
}

"""
A condition to be used against `Message` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MessageCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: BigInt

  """Checks for equality with the object’s `channelId` field."""
  channelId: BigInt

  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `messageId` field."""
  messageId: BigInt

  """Checks for equality with the object’s `msg` field."""
  msg: JSON
}

"""An input for mutations affecting `Message`"""
input MessageInput {
  authorId: BigInt!
  channelId: BigInt!
  content: String!
  created: Datetime!
  guildId: BigInt!
  messageId: BigInt!
  msg: JSON!
}

"""A connection to a list of `Message` values."""
type MessagesConnection {
  """
  A list of edges which contains the `Message` and cursor to aid in pagination.
  """
  edges: [MessagesEdge!]!

  """A list of `Message` objects."""
  nodes: [Message!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Message` you could get from the connection."""
  totalCount: Int!
}

"""A `Message` edge in the connection."""
type MessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Message` at the end of the edge."""
  node: Message!
}

"""Methods to use when ordering `Message`."""
enum MessagesOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CHANNEL_ID_ASC
  CHANNEL_ID_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_ASC
  CREATED_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  MESSAGE_ID_ASC
  MESSAGE_ID_DESC
  MSG_ASC
  MSG_DESC
  NATURAL
}

type ModLog implements Node {
  action: String!
  actionTime: Datetime!
  attachments: [String]!
  caseId: BigInt!
  executorId: BigInt
  guildId: BigInt!
  msgId: BigInt

  """Reads and enables pagination through a set of `Mute`."""
  mutesByGuildIdAndCaseId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MuteCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Mute`."""
    orderBy: [MutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MutesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pending: Boolean!
  reason: String
  userId: BigInt!
  userTag: String!
}

"""
A condition to be used against `ModLog` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ModLogCondition {
  """Checks for equality with the object’s `action` field."""
  action: String

  """Checks for equality with the object’s `actionTime` field."""
  actionTime: Datetime

  """Checks for equality with the object’s `attachments` field."""
  attachments: [String]

  """Checks for equality with the object’s `caseId` field."""
  caseId: BigInt

  """Checks for equality with the object’s `executorId` field."""
  executorId: BigInt

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `msgId` field."""
  msgId: BigInt

  """Checks for equality with the object’s `pending` field."""
  pending: Boolean

  """Checks for equality with the object’s `reason` field."""
  reason: String

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt

  """Checks for equality with the object’s `userTag` field."""
  userTag: String
}

"""An input for mutations affecting `ModLog`"""
input ModLogInput {
  action: String!
  actionTime: Datetime!
  attachments: [String]
  caseId: BigInt!
  executorId: BigInt
  guildId: BigInt!
  msgId: BigInt
  pending: Boolean!
  reason: String
  userId: BigInt!
  userTag: String!
}

"""
Represents an update to a `ModLog`. Fields that are set will be updated.
"""
input ModLogPatch {
  action: String
  actionTime: Datetime
  attachments: [String]
  caseId: BigInt
  executorId: BigInt
  guildId: BigInt
  msgId: BigInt
  pending: Boolean
  reason: String
  userId: BigInt
  userTag: String
}

"""A connection to a list of `ModLog` values."""
type ModLogsConnection {
  """
  A list of edges which contains the `ModLog` and cursor to aid in pagination.
  """
  edges: [ModLogsEdge!]!

  """A list of `ModLog` objects."""
  nodes: [ModLog!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ModLog` you could get from the connection."""
  totalCount: Int!
}

"""A `ModLog` edge in the connection."""
type ModLogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ModLog` at the end of the edge."""
  node: ModLog!
}

"""Methods to use when ordering `ModLog`."""
enum ModLogsOrderBy {
  ACTION_ASC
  ACTION_DESC
  ACTION_TIME_ASC
  ACTION_TIME_DESC
  ATTACHMENTS_ASC
  ATTACHMENTS_DESC
  CASE_ID_ASC
  CASE_ID_DESC
  EXECUTOR_ID_ASC
  EXECUTOR_ID_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  MSG_ID_ASC
  MSG_ID_DESC
  NATURAL
  PENDING_ASC
  PENDING_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REASON_ASC
  REASON_DESC
  USER_ID_ASC
  USER_ID_DESC
  USER_TAG_ASC
  USER_TAG_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `BotStat`."""
  createBotStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBotStatInput!
  ): CreateBotStatPayload

  """Creates a single `CachedGuild`."""
  createCachedGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCachedGuildInput!
  ): CreateCachedGuildPayload

  """Creates a single `CachedUser`."""
  createCachedUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCachedUserInput!
  ): CreateCachedUserPayload

  """Creates a single `Feed`."""
  createFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFeedInput!
  ): CreateFeedPayload

  """Creates a single `FeedItem`."""
  createFeedItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFeedItemInput!
  ): CreateFeedItemPayload

  """Creates a single `FeedSubscription`."""
  createFeedSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFeedSubscriptionInput!
  ): CreateFeedSubscriptionPayload

  """Creates a single `GuildBan`."""
  createGuildBan(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGuildBanInput!
  ): CreateGuildBanPayload

  """Creates a single `GuildConfig`."""
  createGuildConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGuildConfigInput!
  ): CreateGuildConfigPayload

  """Creates a single `Member`."""
  createMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMemberInput!
  ): CreateMemberPayload

  """Creates a single `Message`."""
  createMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMessageInput!
  ): CreateMessagePayload

  """Creates a single `ModLog`."""
  createModLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateModLogInput!
  ): CreateModLogPayload

  """Creates a single `Mute`."""
  createMute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMuteInput!
  ): CreateMutePayload

  """Creates a single `Notification`."""
  createNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNotificationInput!
  ): CreateNotificationPayload

  """Creates a single `Reminder`."""
  createReminder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReminderInput!
  ): CreateReminderPayload

  """Creates a single `RoleMenu`."""
  createRoleMenu(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoleMenuInput!
  ): CreateRoleMenuPayload

  """Creates a single `Tag`."""
  createTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTagInput!
  ): CreateTagPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserLevel`."""
  createUserLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserLevelInput!
  ): CreateUserLevelPayload

  """Creates a single `WebUser`."""
  createWebUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWebUserInput!
  ): CreateWebUserPayload

  """Creates a single `WebUserGuild`."""
  createWebUserGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWebUserGuildInput!
  ): CreateWebUserGuildPayload

  """Deletes a single `BotStat` using its globally unique id."""
  deleteBotStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBotStatInput!
  ): DeleteBotStatPayload

  """Deletes a single `BotStat` using a unique key."""
  deleteBotStatByNameAndCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBotStatByNameAndCategoryInput!
  ): DeleteBotStatPayload

  """Deletes a single `CachedGuild` using its globally unique id."""
  deleteCachedGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCachedGuildInput!
  ): DeleteCachedGuildPayload

  """Deletes a single `CachedGuild` using a unique key."""
  deleteCachedGuildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCachedGuildByIdInput!
  ): DeleteCachedGuildPayload

  """Deletes a single `CachedUser` using its globally unique id."""
  deleteCachedUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCachedUserInput!
  ): DeleteCachedUserPayload

  """Deletes a single `CachedUser` using a unique key."""
  deleteCachedUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCachedUserByIdInput!
  ): DeleteCachedUserPayload

  """Deletes a single `Feed` using its globally unique id."""
  deleteFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedInput!
  ): DeleteFeedPayload

  """Deletes a single `Feed` using a unique key."""
  deleteFeedByFeedId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedByFeedIdInput!
  ): DeleteFeedPayload

  """Deletes a single `FeedItem` using its globally unique id."""
  deleteFeedItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedItemInput!
  ): DeleteFeedItemPayload

  """Deletes a single `FeedItem` using a unique key."""
  deleteFeedItemByFeedIdAndItemId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedItemByFeedIdAndItemIdInput!
  ): DeleteFeedItemPayload

  """Deletes a single `FeedSubscription` using its globally unique id."""
  deleteFeedSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedSubscriptionInput!
  ): DeleteFeedSubscriptionPayload

  """Deletes a single `FeedSubscription` using a unique key."""
  deleteFeedSubscriptionByFeedIdAndChannelId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedSubscriptionByFeedIdAndChannelIdInput!
  ): DeleteFeedSubscriptionPayload

  """Deletes a single `GuildBan` using its globally unique id."""
  deleteGuildBan(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuildBanInput!
  ): DeleteGuildBanPayload

  """Deletes a single `GuildBan` using a unique key."""
  deleteGuildBanByGuildIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuildBanByGuildIdAndUserIdInput!
  ): DeleteGuildBanPayload

  """Deletes a single `GuildConfig` using its globally unique id."""
  deleteGuildConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuildConfigInput!
  ): DeleteGuildConfigPayload

  """Deletes a single `GuildConfig` using a unique key."""
  deleteGuildConfigById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuildConfigByIdInput!
  ): DeleteGuildConfigPayload

  """Deletes a single `Member` using its globally unique id."""
  deleteMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberInput!
  ): DeleteMemberPayload

  """Deletes a single `Member` using a unique key."""
  deleteMemberByGuildIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberByGuildIdAndUserIdInput!
  ): DeleteMemberPayload

  """Deletes a single `ModLog` using its globally unique id."""
  deleteModLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteModLogInput!
  ): DeleteModLogPayload

  """Deletes a single `ModLog` using a unique key."""
  deleteModLogByGuildIdAndCaseId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteModLogByGuildIdAndCaseIdInput!
  ): DeleteModLogPayload

  """Deletes a single `Mute` using its globally unique id."""
  deleteMute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMuteInput!
  ): DeleteMutePayload

  """Deletes a single `Mute` using a unique key."""
  deleteMuteByGuildIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMuteByGuildIdAndUserIdInput!
  ): DeleteMutePayload

  """Deletes a single `Notification` using its globally unique id."""
  deleteNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationInput!
  ): DeleteNotificationPayload

  """Deletes a single `Notification` using a unique key."""
  deleteNotificationByUserIdAndGuildIdAndKeyword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationByUserIdAndGuildIdAndKeywordInput!
  ): DeleteNotificationPayload

  """Deletes a single `Reminder` using its globally unique id."""
  deleteReminder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReminderInput!
  ): DeleteReminderPayload

  """Deletes a single `Reminder` using a unique key."""
  deleteReminderByUserIdAndSetAt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReminderByUserIdAndSetAtInput!
  ): DeleteReminderPayload

  """Deletes a single `RoleMenu` using its globally unique id."""
  deleteRoleMenu(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleMenuInput!
  ): DeleteRoleMenuPayload

  """Deletes a single `RoleMenu` using a unique key."""
  deleteRoleMenuByMessageId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleMenuByMessageIdInput!
  ): DeleteRoleMenuPayload

  """Deletes a single `Tag` using its globally unique id."""
  deleteTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagInput!
  ): DeleteTagPayload

  """Deletes a single `Tag` using a unique key."""
  deleteTagByGuildIdAndTagName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagByGuildIdAndTagNameInput!
  ): DeleteTagPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `UserLevel` using its globally unique id."""
  deleteUserLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserLevelInput!
  ): DeleteUserLevelPayload

  """Deletes a single `UserLevel` using a unique key."""
  deleteUserLevelByUserIdAndGuildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserLevelByUserIdAndGuildIdInput!
  ): DeleteUserLevelPayload

  """Deletes a single `WebUser` using its globally unique id."""
  deleteWebUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWebUserInput!
  ): DeleteWebUserPayload

  """Deletes a single `WebUser` using a unique key."""
  deleteWebUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWebUserByIdInput!
  ): DeleteWebUserPayload

  """Deletes a single `WebUserGuild` using its globally unique id."""
  deleteWebUserGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWebUserGuildInput!
  ): DeleteWebUserGuildPayload

  """Deletes a single `WebUserGuild` using a unique key."""
  deleteWebUserGuildByUserIdAndGuildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWebUserGuildByUserIdAndGuildIdInput!
  ): DeleteWebUserGuildPayload
  graphql(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GraphqlInput!
  ): GraphqlPayload
  logout(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LogoutInput!
  ): LogoutPayload

  """Updates a single `BotStat` using its globally unique id and a patch."""
  updateBotStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBotStatInput!
  ): UpdateBotStatPayload

  """Updates a single `BotStat` using a unique key and a patch."""
  updateBotStatByNameAndCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBotStatByNameAndCategoryInput!
  ): UpdateBotStatPayload

  """
  Updates a single `CachedGuild` using its globally unique id and a patch.
  """
  updateCachedGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCachedGuildInput!
  ): UpdateCachedGuildPayload

  """Updates a single `CachedGuild` using a unique key and a patch."""
  updateCachedGuildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCachedGuildByIdInput!
  ): UpdateCachedGuildPayload

  """
  Updates a single `CachedUser` using its globally unique id and a patch.
  """
  updateCachedUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCachedUserInput!
  ): UpdateCachedUserPayload

  """Updates a single `CachedUser` using a unique key and a patch."""
  updateCachedUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCachedUserByIdInput!
  ): UpdateCachedUserPayload

  """Updates a single `Feed` using its globally unique id and a patch."""
  updateFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedInput!
  ): UpdateFeedPayload

  """Updates a single `Feed` using a unique key and a patch."""
  updateFeedByFeedId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedByFeedIdInput!
  ): UpdateFeedPayload

  """Updates a single `FeedItem` using its globally unique id and a patch."""
  updateFeedItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedItemInput!
  ): UpdateFeedItemPayload

  """Updates a single `FeedItem` using a unique key and a patch."""
  updateFeedItemByFeedIdAndItemId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedItemByFeedIdAndItemIdInput!
  ): UpdateFeedItemPayload

  """
  Updates a single `FeedSubscription` using its globally unique id and a patch.
  """
  updateFeedSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedSubscriptionInput!
  ): UpdateFeedSubscriptionPayload

  """Updates a single `FeedSubscription` using a unique key and a patch."""
  updateFeedSubscriptionByFeedIdAndChannelId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedSubscriptionByFeedIdAndChannelIdInput!
  ): UpdateFeedSubscriptionPayload

  """Updates a single `GuildBan` using its globally unique id and a patch."""
  updateGuildBan(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuildBanInput!
  ): UpdateGuildBanPayload

  """Updates a single `GuildBan` using a unique key and a patch."""
  updateGuildBanByGuildIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuildBanByGuildIdAndUserIdInput!
  ): UpdateGuildBanPayload

  """
  Updates a single `GuildConfig` using its globally unique id and a patch.
  """
  updateGuildConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuildConfigInput!
  ): UpdateGuildConfigPayload

  """Updates a single `GuildConfig` using a unique key and a patch."""
  updateGuildConfigById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuildConfigByIdInput!
  ): UpdateGuildConfigPayload

  """Updates a single `Member` using its globally unique id and a patch."""
  updateMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberInput!
  ): UpdateMemberPayload

  """Updates a single `Member` using a unique key and a patch."""
  updateMemberByGuildIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberByGuildIdAndUserIdInput!
  ): UpdateMemberPayload

  """Updates a single `ModLog` using its globally unique id and a patch."""
  updateModLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateModLogInput!
  ): UpdateModLogPayload

  """Updates a single `ModLog` using a unique key and a patch."""
  updateModLogByGuildIdAndCaseId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateModLogByGuildIdAndCaseIdInput!
  ): UpdateModLogPayload

  """Updates a single `Mute` using its globally unique id and a patch."""
  updateMute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMuteInput!
  ): UpdateMutePayload

  """Updates a single `Mute` using a unique key and a patch."""
  updateMuteByGuildIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMuteByGuildIdAndUserIdInput!
  ): UpdateMutePayload

  """
  Updates a single `Notification` using its globally unique id and a patch.
  """
  updateNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationInput!
  ): UpdateNotificationPayload

  """Updates a single `Notification` using a unique key and a patch."""
  updateNotificationByUserIdAndGuildIdAndKeyword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationByUserIdAndGuildIdAndKeywordInput!
  ): UpdateNotificationPayload

  """Updates a single `Reminder` using its globally unique id and a patch."""
  updateReminder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReminderInput!
  ): UpdateReminderPayload

  """Updates a single `Reminder` using a unique key and a patch."""
  updateReminderByUserIdAndSetAt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReminderByUserIdAndSetAtInput!
  ): UpdateReminderPayload

  """Updates a single `RoleMenu` using its globally unique id and a patch."""
  updateRoleMenu(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleMenuInput!
  ): UpdateRoleMenuPayload

  """Updates a single `RoleMenu` using a unique key and a patch."""
  updateRoleMenuByMessageId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleMenuByMessageIdInput!
  ): UpdateRoleMenuPayload

  """Updates a single `Tag` using its globally unique id and a patch."""
  updateTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagInput!
  ): UpdateTagPayload

  """Updates a single `Tag` using a unique key and a patch."""
  updateTagByGuildIdAndTagName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagByGuildIdAndTagNameInput!
  ): UpdateTagPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """Updates a single `UserLevel` using its globally unique id and a patch."""
  updateUserLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserLevelInput!
  ): UpdateUserLevelPayload

  """Updates a single `UserLevel` using a unique key and a patch."""
  updateUserLevelByUserIdAndGuildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserLevelByUserIdAndGuildIdInput!
  ): UpdateUserLevelPayload

  """Updates a single `WebUser` using its globally unique id and a patch."""
  updateWebUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWebUserInput!
  ): UpdateWebUserPayload

  """Updates a single `WebUser` using a unique key and a patch."""
  updateWebUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWebUserByIdInput!
  ): UpdateWebUserPayload

  """
  Updates a single `WebUserGuild` using its globally unique id and a patch.
  """
  updateWebUserGuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWebUserGuildInput!
  ): UpdateWebUserGuildPayload

  """Updates a single `WebUserGuild` using a unique key and a patch."""
  updateWebUserGuildByUserIdAndGuildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWebUserGuildByUserIdAndGuildIdInput!
  ): UpdateWebUserGuildPayload
}

type Mute implements Node {
  caseId: BigInt
  endTime: Datetime
  guildId: BigInt!

  """Reads a single `ModLog` that is related to this `Mute`."""
  modLogByGuildIdAndCaseId: ModLog

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pending: Boolean!
  startTime: Datetime!
  userId: BigInt!
}

"""
A condition to be used against `Mute` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MuteCondition {
  """Checks for equality with the object’s `caseId` field."""
  caseId: BigInt

  """Checks for equality with the object’s `endTime` field."""
  endTime: Datetime

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `pending` field."""
  pending: Boolean

  """Checks for equality with the object’s `startTime` field."""
  startTime: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

"""An input for mutations affecting `Mute`"""
input MuteInput {
  caseId: BigInt
  endTime: Datetime
  guildId: BigInt!
  pending: Boolean
  startTime: Datetime!
  userId: BigInt!
}

"""Represents an update to a `Mute`. Fields that are set will be updated."""
input MutePatch {
  caseId: BigInt
  endTime: Datetime
  guildId: BigInt
  pending: Boolean
  startTime: Datetime
  userId: BigInt
}

"""A connection to a list of `Mute` values."""
type MutesConnection {
  """
  A list of edges which contains the `Mute` and cursor to aid in pagination.
  """
  edges: [MutesEdge!]!

  """A list of `Mute` objects."""
  nodes: [Mute!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Mute` you could get from the connection."""
  totalCount: Int!
}

"""A `Mute` edge in the connection."""
type MutesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Mute` at the end of the edge."""
  node: Mute!
}

"""Methods to use when ordering `Mute`."""
enum MutesOrderBy {
  CASE_ID_ASC
  CASE_ID_DESC
  END_TIME_ASC
  END_TIME_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  NATURAL
  PENDING_ASC
  PENDING_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  START_TIME_ASC
  START_TIME_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Notification implements Node {
  guildId: BigInt!
  keyword: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: BigInt!
}

"""
A condition to be used against `Notification` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NotificationCondition {
  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `keyword` field."""
  keyword: String

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

"""An input for mutations affecting `Notification`"""
input NotificationInput {
  guildId: BigInt!
  keyword: String!
  userId: BigInt!
}

"""
Represents an update to a `Notification`. Fields that are set will be updated.
"""
input NotificationPatch {
  guildId: BigInt
  keyword: String
  userId: BigInt
}

"""A connection to a list of `Notification` values."""
type NotificationsConnection {
  """
  A list of edges which contains the `Notification` and cursor to aid in pagination.
  """
  edges: [NotificationsEdge!]!

  """A list of `Notification` objects."""
  nodes: [Notification!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Notification` you could get from the connection."""
  totalCount: Int!
}

"""A `Notification` edge in the connection."""
type NotificationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Notification` at the end of the edge."""
  node: Notification!
}

"""Methods to use when ordering `Notification`."""
enum NotificationsOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  KEYWORD_ASC
  KEYWORD_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `BotStat`."""
  allBotStats(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BotStatCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BotStat`."""
    orderBy: [BotStatsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotStatsConnection

  """Reads and enables pagination through a set of `FeedItem`."""
  allFeedItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FeedItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FeedItem`."""
    orderBy: [FeedItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedItemsConnection

  """Reads and enables pagination through a set of `FeedSubscription`."""
  allFeedSubscriptions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FeedSubscriptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FeedSubscription`."""
    orderBy: [FeedSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedSubscriptionsConnection

  """Reads and enables pagination through a set of `Feed`."""
  allFeeds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FeedCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Feed`."""
    orderBy: [FeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedsConnection

  """Reads and enables pagination through a set of `GuildBan`."""
  allGuildBans(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuildBanCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GuildBan`."""
    orderBy: [GuildBansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildBansConnection

  """Reads and enables pagination through a set of `GuildConfig`."""
  allGuildConfigs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuildConfigCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsConnection

  """Reads and enables pagination through a set of `Member`."""
  allMembers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MemberCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersConnection

  """Reads and enables pagination through a set of `Message`."""
  allMessages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [NATURAL]
  ): MessagesConnection

  """Reads and enables pagination through a set of `ModLog`."""
  allModLogs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ModLogCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ModLog`."""
    orderBy: [ModLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ModLogsConnection

  """Reads and enables pagination through a set of `Mute`."""
  allMutes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MuteCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Mute`."""
    orderBy: [MutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MutesConnection

  """Reads and enables pagination through a set of `Notification`."""
  allNotifications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsConnection

  """Reads and enables pagination through a set of `Reminder`."""
  allReminders(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReminderCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Reminder`."""
    orderBy: [RemindersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RemindersConnection

  """Reads and enables pagination through a set of `RoleMenu`."""
  allRoleMenus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleMenuCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusConnection

  """Reads and enables pagination through a set of `Tag`."""
  allTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection

  """Reads and enables pagination through a set of `WebUserGuild`."""
  allWebUserGuilds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsConnection

  """Reads and enables pagination through a set of `WebUser`."""
  allWebUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersConnection

  """Reads a single `BotStat` using its globally unique `ID`."""
  botStat(
    """The globally unique `ID` to be used in selecting a single `BotStat`."""
    nodeId: ID!
  ): BotStat
  botStatByNameAndCategory(category: String!, name: String!): BotStat

  """Reads a single `CachedGuild` using its globally unique `ID`."""
  cachedGuild(
    """
    The globally unique `ID` to be used in selecting a single `CachedGuild`.
    """
    nodeId: ID!
  ): CachedGuild
  cachedGuildById(id: BigInt!): CachedGuild

  """Reads a single `CachedUser` using its globally unique `ID`."""
  cachedUser(
    """
    The globally unique `ID` to be used in selecting a single `CachedUser`.
    """
    nodeId: ID!
  ): CachedUser
  cachedUserById(id: BigInt!): CachedUser

  """Handy method to get the current session ID."""
  currentSessionId: UUID

  """The currently logged in user (or null if not logged in)."""
  currentUser: WebUser
  currentUserDiscordId: BigInt

  """
  Handy method to get the current user ID for use in RLS policies, etc; in GraphQL, use `currentUser{id}` instead.
  """
  currentUserId: BigInt
  currentUserManagedGuildIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserManagedGuildIdsConnection

  """Reads a single `Feed` using its globally unique `ID`."""
  feed(
    """The globally unique `ID` to be used in selecting a single `Feed`."""
    nodeId: ID!
  ): Feed
  feedByFeedId(feedId: String!): Feed

  """Reads a single `FeedItem` using its globally unique `ID`."""
  feedItem(
    """The globally unique `ID` to be used in selecting a single `FeedItem`."""
    nodeId: ID!
  ): FeedItem
  feedItemByFeedIdAndItemId(feedId: String!, itemId: String!): FeedItem

  """Reads a single `FeedSubscription` using its globally unique `ID`."""
  feedSubscription(
    """
    The globally unique `ID` to be used in selecting a single `FeedSubscription`.
    """
    nodeId: ID!
  ): FeedSubscription
  feedSubscriptionByFeedIdAndChannelId(channelId: BigInt!, feedId: String!): FeedSubscription

  """Reads a single `GuildBan` using its globally unique `ID`."""
  guildBan(
    """The globally unique `ID` to be used in selecting a single `GuildBan`."""
    nodeId: ID!
  ): GuildBan
  guildBanByGuildIdAndUserId(guildId: BigInt!, userId: BigInt!): GuildBan

  """Reads a single `GuildConfig` using its globally unique `ID`."""
  guildConfig(
    """
    The globally unique `ID` to be used in selecting a single `GuildConfig`.
    """
    nodeId: ID!
  ): GuildConfig
  guildConfigById(id: BigInt!): GuildConfig

  """Reads a single `Member` using its globally unique `ID`."""
  member(
    """The globally unique `ID` to be used in selecting a single `Member`."""
    nodeId: ID!
  ): Member
  memberByGuildIdAndUserId(guildId: BigInt!, userId: BigInt!): Member

  """Reads a single `ModLog` using its globally unique `ID`."""
  modLog(
    """The globally unique `ID` to be used in selecting a single `ModLog`."""
    nodeId: ID!
  ): ModLog
  modLogByGuildIdAndCaseId(caseId: BigInt!, guildId: BigInt!): ModLog

  """Reads a single `Mute` using its globally unique `ID`."""
  mute(
    """The globally unique `ID` to be used in selecting a single `Mute`."""
    nodeId: ID!
  ): Mute
  muteByGuildIdAndUserId(guildId: BigInt!, userId: BigInt!): Mute

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Reads a single `Notification` using its globally unique `ID`."""
  notification(
    """
    The globally unique `ID` to be used in selecting a single `Notification`.
    """
    nodeId: ID!
  ): Notification
  notificationByUserIdAndGuildIdAndKeyword(guildId: BigInt!, keyword: String!, userId: BigInt!): Notification

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `Reminder` using its globally unique `ID`."""
  reminder(
    """The globally unique `ID` to be used in selecting a single `Reminder`."""
    nodeId: ID!
  ): Reminder
  reminderByUserIdAndSetAt(setAt: Datetime!, userId: BigInt!): Reminder

  """Reads a single `RoleMenu` using its globally unique `ID`."""
  roleMenu(
    """The globally unique `ID` to be used in selecting a single `RoleMenu`."""
    nodeId: ID!
  ): RoleMenu
  roleMenuByMessageId(messageId: BigInt!): RoleMenu

  """Reads a single `Tag` using its globally unique `ID`."""
  tag(
    """The globally unique `ID` to be used in selecting a single `Tag`."""
    nodeId: ID!
  ): Tag
  tagByGuildIdAndTagName(guildId: BigInt!, tagName: String!): Tag

  """
  Leaderboard for given timeframe and optional guild. If guild is null, it is the global leaderboard
  """
  timeframeUserLevels(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int
    guildId: BigInt

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    timeframe: LevelTimeframe
  ): TimeframeUserLevelsConnection

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  userById(id: BigInt!): User

  """Reads a single `UserLevel` using its globally unique `ID`."""
  userLevel(
    """The globally unique `ID` to be used in selecting a single `UserLevel`."""
    nodeId: ID!
  ): UserLevel
  userLevelByUserIdAndGuildId(guildId: BigInt!, userId: BigInt!): UserLevel

  """Reads a single `WebUser` using its globally unique `ID`."""
  webUser(
    """The globally unique `ID` to be used in selecting a single `WebUser`."""
    nodeId: ID!
  ): WebUser
  webUserById(id: BigInt!): WebUser

  """Reads a single `WebUserGuild` using its globally unique `ID`."""
  webUserGuild(
    """
    The globally unique `ID` to be used in selecting a single `WebUserGuild`.
    """
    nodeId: ID!
  ): WebUserGuild
  webUserGuildByUserIdAndGuildId(guildId: BigInt!, userId: BigInt!): WebUserGuild
}

type Reminder implements Node {
  description: String!
  expireAt: Datetime!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  setAt: Datetime!
  userId: BigInt!
}

"""
A condition to be used against `Reminder` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ReminderCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `expireAt` field."""
  expireAt: Datetime

  """Checks for equality with the object’s `setAt` field."""
  setAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

"""An input for mutations affecting `Reminder`"""
input ReminderInput {
  description: String!
  expireAt: Datetime!
  setAt: Datetime!
  userId: BigInt!
}

"""
Represents an update to a `Reminder`. Fields that are set will be updated.
"""
input ReminderPatch {
  description: String
  expireAt: Datetime
  setAt: Datetime
  userId: BigInt
}

"""A connection to a list of `Reminder` values."""
type RemindersConnection {
  """
  A list of edges which contains the `Reminder` and cursor to aid in pagination.
  """
  edges: [RemindersEdge!]!

  """A list of `Reminder` objects."""
  nodes: [Reminder!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Reminder` you could get from the connection."""
  totalCount: Int!
}

"""A `Reminder` edge in the connection."""
type RemindersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Reminder` at the end of the edge."""
  node: Reminder!
}

"""Methods to use when ordering `Reminder`."""
enum RemindersOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EXPIRE_AT_ASC
  EXPIRE_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SET_AT_ASC
  SET_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type RoleMenu implements Node {
  channelId: BigInt!
  editorId: BigInt
  guildId: BigInt!
  messageId: BigInt!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `RoleMenu` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RoleMenuCondition {
  """Checks for equality with the object’s `channelId` field."""
  channelId: BigInt

  """Checks for equality with the object’s `editorId` field."""
  editorId: BigInt

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `messageId` field."""
  messageId: BigInt
}

"""An input for mutations affecting `RoleMenu`"""
input RoleMenuInput {
  channelId: BigInt!
  editorId: BigInt
  guildId: BigInt!
  messageId: BigInt!
}

"""
Represents an update to a `RoleMenu`. Fields that are set will be updated.
"""
input RoleMenuPatch {
  channelId: BigInt
  editorId: BigInt
  guildId: BigInt
  messageId: BigInt
}

"""A connection to a list of `RoleMenu` values."""
type RoleMenusConnection {
  """
  A list of edges which contains the `RoleMenu` and cursor to aid in pagination.
  """
  edges: [RoleMenusEdge!]!

  """A list of `RoleMenu` objects."""
  nodes: [RoleMenu!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RoleMenu` you could get from the connection."""
  totalCount: Int!
}

"""A `RoleMenu` edge in the connection."""
type RoleMenusEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoleMenu` at the end of the edge."""
  node: RoleMenu!
}

"""Methods to use when ordering `RoleMenu`."""
enum RoleMenusOrderBy {
  CHANNEL_ID_ASC
  CHANNEL_ID_DESC
  EDITOR_ID_ASC
  EDITOR_ID_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  MESSAGE_ID_ASC
  MESSAGE_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Tag implements Node {
  content: String!
  created: Datetime!
  guildId: BigInt!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  ownerId: BigInt!
  tagName: String!
  useCount: BigInt!
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: BigInt

  """Checks for equality with the object’s `tagName` field."""
  tagName: String

  """Checks for equality with the object’s `useCount` field."""
  useCount: BigInt
}

"""An input for mutations affecting `Tag`"""
input TagInput {
  content: String!
  created: Datetime!
  guildId: BigInt!
  ownerId: BigInt!
  tagName: String!
  useCount: BigInt!
}

"""Represents an update to a `Tag`. Fields that are set will be updated."""
input TagPatch {
  content: String
  created: Datetime
  guildId: BigInt
  ownerId: BigInt
  tagName: String
  useCount: BigInt
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """
  A list of edges which contains the `Tag` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """A list of `Tag` objects."""
  nodes: [Tag!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag!
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  CREATED_ASC
  CREATED_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  NATURAL
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAG_NAME_ASC
  TAG_NAME_DESC
  USE_COUNT_ASC
  USE_COUNT_DESC
}

"""A `TimeframeUserLevelsRecord` edge in the connection."""
type TimeframeUserLevelEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TimeframeUserLevelsRecord` at the end of the edge."""
  node: TimeframeUserLevelsRecord!
}

"""A connection to a list of `TimeframeUserLevelsRecord` values."""
type TimeframeUserLevelsConnection {
  """
  A list of edges which contains the `TimeframeUserLevelsRecord` and cursor to aid in pagination.
  """
  edges: [TimeframeUserLevelEdge!]!

  """A list of `TimeframeUserLevelsRecord` objects."""
  nodes: [TimeframeUserLevelsRecord!]!

  """
  The count of *all* `TimeframeUserLevelsRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""The return type of our `timeframeUserLevels` query."""
type TimeframeUserLevelsRecord {
  avatarUrl: String
  currentLevel: BigInt
  discriminator: Int
  gainedLevels: BigInt
  nextLevelXpProgress: BigInt
  nextLevelXpRequired: BigInt
  userId: BigInt
  username: String
  xp: BigInt
  xpDiff: BigInt
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateBotStatByNameAndCategory` mutation."""
input UpdateBotStatByNameAndCategoryInput {
  """
  An object where the defined keys will be set on the `BotStat` being updated.
  """
  botStatPatch: BotStatPatch!
  category: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `updateBotStat` mutation."""
input UpdateBotStatInput {
  """
  An object where the defined keys will be set on the `BotStat` being updated.
  """
  botStatPatch: BotStatPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BotStat` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `BotStat` mutation."""
type UpdateBotStatPayload {
  """The `BotStat` that was updated by this mutation."""
  botStat: BotStat

  """An edge for our `BotStat`. May be used by Relay 1."""
  botStatEdge(
    """The method to use when ordering `BotStat`."""
    orderBy: [BotStatsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotStatsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCachedGuildById` mutation."""
input UpdateCachedGuildByIdInput {
  """
  An object where the defined keys will be set on the `CachedGuild` being updated.
  """
  cachedGuildPatch: CachedGuildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `updateCachedGuild` mutation."""
input UpdateCachedGuildInput {
  """
  An object where the defined keys will be set on the `CachedGuild` being updated.
  """
  cachedGuildPatch: CachedGuildPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CachedGuild` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `CachedGuild` mutation."""
type UpdateCachedGuildPayload {
  """The `CachedGuild` that was updated by this mutation."""
  cachedGuild: CachedGuild

  """An edge for our `CachedGuild`. May be used by Relay 1."""
  cachedGuildEdge(
    """The method to use when ordering `CachedGuild`."""
    orderBy: [CachedGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedGuildsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCachedUserById` mutation."""
input UpdateCachedUserByIdInput {
  """
  An object where the defined keys will be set on the `CachedUser` being updated.
  """
  cachedUserPatch: CachedUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `updateCachedUser` mutation."""
input UpdateCachedUserInput {
  """
  An object where the defined keys will be set on the `CachedUser` being updated.
  """
  cachedUserPatch: CachedUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CachedUser` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `CachedUser` mutation."""
type UpdateCachedUserPayload {
  """The `CachedUser` that was updated by this mutation."""
  cachedUser: CachedUser

  """An edge for our `CachedUser`. May be used by Relay 1."""
  cachedUserEdge(
    """The method to use when ordering `CachedUser`."""
    orderBy: [CachedUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CachedUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFeedByFeedId` mutation."""
input UpdateFeedByFeedIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  feedId: String!

  """
  An object where the defined keys will be set on the `Feed` being updated.
  """
  feedPatch: FeedPatch!
}

"""All input for the `updateFeed` mutation."""
input UpdateFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Feed` being updated.
  """
  feedPatch: FeedPatch!

  """
  The globally unique `ID` which will identify a single `Feed` to be updated.
  """
  nodeId: ID!
}

"""All input for the `updateFeedItemByFeedIdAndItemId` mutation."""
input UpdateFeedItemByFeedIdAndItemIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  feedId: String!

  """
  An object where the defined keys will be set on the `FeedItem` being updated.
  """
  feedItemPatch: FeedItemPatch!
  itemId: String!
}

"""All input for the `updateFeedItem` mutation."""
input UpdateFeedItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FeedItem` being updated.
  """
  feedItemPatch: FeedItemPatch!

  """
  The globally unique `ID` which will identify a single `FeedItem` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `FeedItem` mutation."""
type UpdateFeedItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FeedItem` that was updated by this mutation."""
  feedItem: FeedItem

  """An edge for our `FeedItem`. May be used by Relay 1."""
  feedItemEdge(
    """The method to use when ordering `FeedItem`."""
    orderBy: [FeedItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedItemsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `Feed` mutation."""
type UpdateFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Feed` that was updated by this mutation."""
  feed: Feed

  """An edge for our `Feed`. May be used by Relay 1."""
  feedEdge(
    """The method to use when ordering `Feed`."""
    orderBy: [FeedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateFeedSubscriptionByFeedIdAndChannelId` mutation.
"""
input UpdateFeedSubscriptionByFeedIdAndChannelIdInput {
  channelId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  feedId: String!

  """
  An object where the defined keys will be set on the `FeedSubscription` being updated.
  """
  feedSubscriptionPatch: FeedSubscriptionPatch!
}

"""All input for the `updateFeedSubscription` mutation."""
input UpdateFeedSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FeedSubscription` being updated.
  """
  feedSubscriptionPatch: FeedSubscriptionPatch!

  """
  The globally unique `ID` which will identify a single `FeedSubscription` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `FeedSubscription` mutation."""
type UpdateFeedSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Feed` that is related to this `FeedSubscription`."""
  feedByFeedId: Feed

  """The `FeedSubscription` that was updated by this mutation."""
  feedSubscription: FeedSubscription

  """An edge for our `FeedSubscription`. May be used by Relay 1."""
  feedSubscriptionEdge(
    """The method to use when ordering `FeedSubscription`."""
    orderBy: [FeedSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FeedSubscriptionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGuildBanByGuildIdAndUserId` mutation."""
input UpdateGuildBanByGuildIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GuildBan` being updated.
  """
  guildBanPatch: GuildBanPatch!
  guildId: BigInt!
  userId: BigInt!
}

"""All input for the `updateGuildBan` mutation."""
input UpdateGuildBanInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GuildBan` being updated.
  """
  guildBanPatch: GuildBanPatch!

  """
  The globally unique `ID` which will identify a single `GuildBan` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `GuildBan` mutation."""
type UpdateGuildBanPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GuildBan` that was updated by this mutation."""
  guildBan: GuildBan

  """An edge for our `GuildBan`. May be used by Relay 1."""
  guildBanEdge(
    """The method to use when ordering `GuildBan`."""
    orderBy: [GuildBansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildBansEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGuildConfigById` mutation."""
input UpdateGuildConfigByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GuildConfig` being updated.
  """
  guildConfigPatch: GuildConfigPatch!
  id: BigInt!
}

"""All input for the `updateGuildConfig` mutation."""
input UpdateGuildConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GuildConfig` being updated.
  """
  guildConfigPatch: GuildConfigPatch!

  """
  The globally unique `ID` which will identify a single `GuildConfig` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `GuildConfig` mutation."""
type UpdateGuildConfigPayload {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GuildConfig` that was updated by this mutation."""
  guildConfig: GuildConfig

  """An edge for our `GuildConfig`. May be used by Relay 1."""
  guildConfigEdge(
    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMemberByGuildIdAndUserId` mutation."""
input UpdateMemberByGuildIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!

  """
  An object where the defined keys will be set on the `Member` being updated.
  """
  memberPatch: MemberPatch!
  userId: BigInt!
}

"""All input for the `updateMember` mutation."""
input UpdateMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Member` being updated.
  """
  memberPatch: MemberPatch!

  """
  The globally unique `ID` which will identify a single `Member` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `Member` mutation."""
type UpdateMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was updated by this mutation."""
  member: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateModLogByGuildIdAndCaseId` mutation."""
input UpdateModLogByGuildIdAndCaseIdInput {
  caseId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!

  """
  An object where the defined keys will be set on the `ModLog` being updated.
  """
  modLogPatch: ModLogPatch!
}

"""All input for the `updateModLog` mutation."""
input UpdateModLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ModLog` being updated.
  """
  modLogPatch: ModLogPatch!

  """
  The globally unique `ID` which will identify a single `ModLog` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `ModLog` mutation."""
type UpdateModLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ModLog` that was updated by this mutation."""
  modLog: ModLog

  """An edge for our `ModLog`. May be used by Relay 1."""
  modLogEdge(
    """The method to use when ordering `ModLog`."""
    orderBy: [ModLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ModLogsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMuteByGuildIdAndUserId` mutation."""
input UpdateMuteByGuildIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!

  """
  An object where the defined keys will be set on the `Mute` being updated.
  """
  mutePatch: MutePatch!
  userId: BigInt!
}

"""All input for the `updateMute` mutation."""
input UpdateMuteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Mute` being updated.
  """
  mutePatch: MutePatch!

  """
  The globally unique `ID` which will identify a single `Mute` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `Mute` mutation."""
type UpdateMutePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `ModLog` that is related to this `Mute`."""
  modLogByGuildIdAndCaseId: ModLog

  """The `Mute` that was updated by this mutation."""
  mute: Mute

  """An edge for our `Mute`. May be used by Relay 1."""
  muteEdge(
    """The method to use when ordering `Mute`."""
    orderBy: [MutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MutesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateNotificationByUserIdAndGuildIdAndKeyword` mutation.
"""
input UpdateNotificationByUserIdAndGuildIdAndKeywordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  keyword: String!

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  notificationPatch: NotificationPatch!
  userId: BigInt!
}

"""All input for the `updateNotification` mutation."""
input UpdateNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Notification` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  notificationPatch: NotificationPatch!
}

"""The output of our update `Notification` mutation."""
type UpdateNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was updated by this mutation."""
  notification: Notification

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateReminderByUserIdAndSetAt` mutation."""
input UpdateReminderByUserIdAndSetAtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Reminder` being updated.
  """
  reminderPatch: ReminderPatch!
  setAt: Datetime!
  userId: BigInt!
}

"""All input for the `updateReminder` mutation."""
input UpdateReminderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Reminder` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Reminder` being updated.
  """
  reminderPatch: ReminderPatch!
}

"""The output of our update `Reminder` mutation."""
type UpdateReminderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Reminder` that was updated by this mutation."""
  reminder: Reminder

  """An edge for our `Reminder`. May be used by Relay 1."""
  reminderEdge(
    """The method to use when ordering `Reminder`."""
    orderBy: [RemindersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RemindersEdge
}

"""All input for the `updateRoleMenuByMessageId` mutation."""
input UpdateRoleMenuByMessageIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  messageId: BigInt!

  """
  An object where the defined keys will be set on the `RoleMenu` being updated.
  """
  roleMenuPatch: RoleMenuPatch!
}

"""All input for the `updateRoleMenu` mutation."""
input UpdateRoleMenuInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoleMenu` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RoleMenu` being updated.
  """
  roleMenuPatch: RoleMenuPatch!
}

"""The output of our update `RoleMenu` mutation."""
type UpdateRoleMenuPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RoleMenu` that was updated by this mutation."""
  roleMenu: RoleMenu

  """An edge for our `RoleMenu`. May be used by Relay 1."""
  roleMenuEdge(
    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusEdge
}

"""All input for the `updateTagByGuildIdAndTagName` mutation."""
input UpdateTagByGuildIdAndTagNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  tagName: String!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  tagPatch: TagPatch!
}

"""All input for the `updateTag` mutation."""
input UpdateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  tagPatch: TagPatch!
}

"""The output of our update `Tag` mutation."""
type UpdateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was updated by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""All input for the `updateUserLevelByUserIdAndGuildId` mutation."""
input UpdateUserLevelByUserIdAndGuildIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!

  """
  An object where the defined keys will be set on the `UserLevel` being updated.
  """
  userLevelPatch: UserLevelPatch!
}

"""All input for the `updateUserLevel` mutation."""
input UpdateUserLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserLevel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserLevel` being updated.
  """
  userLevelPatch: UserLevelPatch!
}

"""The output of our update `UserLevel` mutation."""
type UpdateUserLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `UserLevel` that was updated by this mutation."""
  userLevel: UserLevel

  """An edge for our `UserLevel`. May be used by Relay 1."""
  userLevelEdge(
    """The method to use when ordering `UserLevel`."""
    orderBy: [UserLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLevelsEdge
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateWebUserById` mutation."""
input UpdateWebUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt!

  """
  An object where the defined keys will be set on the `WebUser` being updated.
  """
  webUserPatch: WebUserPatch!
}

"""All input for the `updateWebUserGuildByUserIdAndGuildId` mutation."""
input UpdateWebUserGuildByUserIdAndGuildIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  guildId: BigInt!
  userId: BigInt!

  """
  An object where the defined keys will be set on the `WebUserGuild` being updated.
  """
  webUserGuildPatch: WebUserGuildPatch!
}

"""All input for the `updateWebUserGuild` mutation."""
input UpdateWebUserGuildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WebUserGuild` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `WebUserGuild` being updated.
  """
  webUserGuildPatch: WebUserGuildPatch!
}

"""The output of our update `WebUserGuild` mutation."""
type UpdateWebUserGuildPayload {
  """Reads a single `CachedGuild` that is related to this `WebUserGuild`."""
  cachedGuildByGuildId: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `WebUser` that is related to this `WebUserGuild`."""
  webUserByUserId: WebUser

  """The `WebUserGuild` that was updated by this mutation."""
  webUserGuild: WebUserGuild

  """An edge for our `WebUserGuild`. May be used by Relay 1."""
  webUserGuildEdge(
    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsEdge
}

"""All input for the `updateWebUser` mutation."""
input UpdateWebUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WebUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `WebUser` being updated.
  """
  webUserPatch: WebUserPatch!
}

"""The output of our update `WebUser` mutation."""
type UpdateWebUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `WebUser` that was updated by this mutation."""
  webUser: WebUser

  """An edge for our `WebUser`. May be used by Relay 1."""
  webUserEdge(
    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersEdge
}

type User implements Node {
  fishies: BigInt!
  id: BigInt!
  isPatron: Boolean!
  lastFishies: Datetime
  lastRep: Datetime
  lastfmUsername: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  patronEmoji: String
  profileData: JSON
  rep: BigInt!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `fishies` field."""
  fishies: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isPatron` field."""
  isPatron: Boolean

  """Checks for equality with the object’s `lastFishies` field."""
  lastFishies: Datetime

  """Checks for equality with the object’s `lastRep` field."""
  lastRep: Datetime

  """Checks for equality with the object’s `lastfmUsername` field."""
  lastfmUsername: String

  """Checks for equality with the object’s `patronEmoji` field."""
  patronEmoji: String

  """Checks for equality with the object’s `profileData` field."""
  profileData: JSON

  """Checks for equality with the object’s `rep` field."""
  rep: BigInt
}

"""An input for mutations affecting `User`"""
input UserInput {
  fishies: BigInt!
  id: BigInt!
  isPatron: Boolean!
  lastFishies: Datetime
  lastRep: Datetime
  lastfmUsername: String
  patronEmoji: String
  profileData: JSON
  rep: BigInt!
}

type UserLevel implements Node {
  guildId: BigInt!
  lastMsg: Datetime!
  msgAllTime: BigInt!
  msgDay: BigInt!
  msgMonth: BigInt!
  msgWeek: BigInt!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: BigInt!
}

"""An input for mutations affecting `UserLevel`"""
input UserLevelInput {
  guildId: BigInt!
  lastMsg: Datetime!
  msgAllTime: BigInt!
  msgDay: BigInt!
  msgMonth: BigInt!
  msgWeek: BigInt!
  userId: BigInt!
}

"""
Represents an update to a `UserLevel`. Fields that are set will be updated.
"""
input UserLevelPatch {
  guildId: BigInt
  lastMsg: Datetime
  msgAllTime: BigInt
  msgDay: BigInt
  msgMonth: BigInt
  msgWeek: BigInt
  userId: BigInt
}

"""A `UserLevel` edge in the connection."""
type UserLevelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserLevel` at the end of the edge."""
  node: UserLevel!
}

"""Methods to use when ordering `UserLevel`."""
enum UserLevelsOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  LAST_MSG_ASC
  LAST_MSG_DESC
  MSG_ALL_TIME_ASC
  MSG_ALL_TIME_DESC
  MSG_DAY_ASC
  MSG_DAY_DESC
  MSG_MONTH_ASC
  MSG_MONTH_DESC
  MSG_WEEK_ASC
  MSG_WEEK_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  fishies: BigInt
  id: BigInt
  isPatron: Boolean
  lastFishies: Datetime
  lastRep: Datetime
  lastfmUsername: String
  patronEmoji: String
  profileData: JSON
  rep: BigInt
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  FISHIES_ASC
  FISHIES_DESC
  ID_ASC
  ID_DESC
  IS_PATRON_ASC
  IS_PATRON_DESC
  LASTFM_USERNAME_ASC
  LASTFM_USERNAME_DESC
  LAST_FISHIES_ASC
  LAST_FISHIES_DESC
  LAST_REP_ASC
  LAST_REP_DESC
  NATURAL
  PATRON_EMOJI_ASC
  PATRON_EMOJI_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROFILE_DATA_ASC
  PROFILE_DATA_DESC
  REP_ASC
  REP_DESC
}

"""A user who can log in to the application."""
type WebUser implements Node {
  """Discord avatar hash. Null if user does not have one."""
  avatar: String

  """
  First registered on the application. Is not when a user created their Discord account.
  """
  createdAt: Datetime!

  """Additional profile details extracted from Discord oauth"""
  details: JSON!

  """Discord disciminator of the user."""
  discriminator: Int!

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """Discord username of the user."""
  username: String!

  """Reads and enables pagination through a set of `WebUserGuild`."""
  webUserGuildsByUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsConnection!
}

"""
A condition to be used against `WebUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input WebUserCondition {
  """Checks for equality with the object’s `avatar` field."""
  avatar: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `details` field."""
  details: JSON

  """Checks for equality with the object’s `discriminator` field."""
  discriminator: Int

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isAdmin` field."""
  isAdmin: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `username` field."""
  username: String
}

type WebUserGuild implements Node {
  """Reads a single `CachedGuild` that is related to this `WebUserGuild`."""
  cachedGuildByGuildId: CachedGuild
  guildId: BigInt!
  manageGuild: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  owner: Boolean!
  permissions: BigInt!
  userId: BigInt!

  """Reads a single `WebUser` that is related to this `WebUserGuild`."""
  webUserByUserId: WebUser
}

"""
A condition to be used against `WebUserGuild` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input WebUserGuildCondition {
  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `manageGuild` field."""
  manageGuild: Boolean

  """Checks for equality with the object’s `owner` field."""
  owner: Boolean

  """Checks for equality with the object’s `permissions` field."""
  permissions: BigInt

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

"""An input for mutations affecting `WebUserGuild`"""
input WebUserGuildInput {
  guildId: BigInt!
  manageGuild: Boolean
  owner: Boolean!
  permissions: BigInt!
  userId: BigInt!
}

"""
Represents an update to a `WebUserGuild`. Fields that are set will be updated.
"""
input WebUserGuildPatch {
  guildId: BigInt
  manageGuild: Boolean
  owner: Boolean
  permissions: BigInt
  userId: BigInt
}

"""A connection to a list of `WebUserGuild` values."""
type WebUserGuildsConnection {
  """
  A list of edges which contains the `WebUserGuild` and cursor to aid in pagination.
  """
  edges: [WebUserGuildsEdge!]!

  """A list of `WebUserGuild` objects."""
  nodes: [WebUserGuild!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebUserGuild` you could get from the connection."""
  totalCount: Int!
}

"""A `WebUserGuild` edge in the connection."""
type WebUserGuildsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebUserGuild` at the end of the edge."""
  node: WebUserGuild!
}

"""Methods to use when ordering `WebUserGuild`."""
enum WebUserGuildsOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  MANAGE_GUILD_ASC
  MANAGE_GUILD_DESC
  NATURAL
  OWNER_ASC
  OWNER_DESC
  PERMISSIONS_ASC
  PERMISSIONS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""An input for mutations affecting `WebUser`"""
input WebUserInput {
  """Discord avatar hash. Null if user does not have one."""
  avatar: String

  """
  First registered on the application. Is not when a user created their Discord account.
  """
  createdAt: Datetime

  """Additional profile details extracted from Discord oauth"""
  details: JSON

  """Discord disciminator of the user."""
  discriminator: Int!

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  updatedAt: Datetime

  """Discord username of the user."""
  username: String!
}

"""
Represents an update to a `WebUser`. Fields that are set will be updated.
"""
input WebUserPatch {
  """Discord avatar hash. Null if user does not have one."""
  avatar: String

  """
  First registered on the application. Is not when a user created their Discord account.
  """
  createdAt: Datetime

  """Additional profile details extracted from Discord oauth"""
  details: JSON

  """Discord disciminator of the user."""
  discriminator: Int

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  updatedAt: Datetime

  """Discord username of the user."""
  username: String
}

"""A connection to a list of `WebUser` values."""
type WebUsersConnection {
  """
  A list of edges which contains the `WebUser` and cursor to aid in pagination.
  """
  edges: [WebUsersEdge!]!

  """A list of `WebUser` objects."""
  nodes: [WebUser!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebUser` you could get from the connection."""
  totalCount: Int!
}

"""A `WebUser` edge in the connection."""
type WebUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebUser` at the end of the edge."""
  node: WebUser!
}

"""Methods to use when ordering `WebUser`."""
enum WebUsersOrderBy {
  AVATAR_ASC
  AVATAR_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DETAILS_ASC
  DETAILS_DESC
  DISCRIMINATOR_ASC
  DISCRIMINATOR_DESC
  ID_ASC
  ID_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
}
