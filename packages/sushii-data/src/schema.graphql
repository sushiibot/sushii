"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

type BotStat implements Node {
  category: String!
  count: BigInt!
  createdAt: Datetime!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `BotStat` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BotStatCondition {
  """Checks for equality with the object’s `category` field."""
  category: String

  """Checks for equality with the object’s `count` field."""
  count: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `BotStat` values."""
type BotStatsConnection {
  """
  A list of edges which contains the `BotStat` and cursor to aid in pagination.
  """
  edges: [BotStatsEdge!]!

  """A list of `BotStat` objects."""
  nodes: [BotStat!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BotStat` you could get from the connection."""
  totalCount: Int!
}

"""A `BotStat` edge in the connection."""
type BotStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BotStat` at the end of the edge."""
  node: BotStat!
}

"""Methods to use when ordering `BotStat`."""
enum BotStatsOrderBy {
  CATEGORY_ASC
  CATEGORY_DESC
  COUNT_ASC
  COUNT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type CachedGuild implements Node {
  banner: String
  createdAt: Datetime!
  features: [String]!

  """Reads a single `GuildConfig` that is related to this `CachedGuild`."""
  guildConfigById: GuildConfig
  icon: String
  id: BigInt!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  splash: String
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `WebUserGuild`."""
  webUserGuildsByGuildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsConnection!
}

type CachedUser implements Node {
  avatarUrl: String!
  discriminator: Int!
  id: BigInt!
  lastChecked: Datetime!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""All input for the create `RoleMenu` mutation."""
input CreateRoleMenuInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoleMenu` to be created by this mutation."""
  roleMenu: RoleMenuInput!
}

"""The output of our create `RoleMenu` mutation."""
type CreateRoleMenuPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RoleMenu` that was created by this mutation."""
  roleMenu: RoleMenu

  """An edge for our `RoleMenu`. May be used by Relay 1."""
  roleMenuEdge(
    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A `BigInt` edge in the connection."""
type CurrentUserManagedGuildIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BigInt` at the end of the edge."""
  node: BigInt
}

"""A connection to a list of `BigInt` values."""
type CurrentUserManagedGuildIdsConnection {
  """
  A list of edges which contains the `BigInt` and cursor to aid in pagination.
  """
  edges: [CurrentUserManagedGuildIdEdge!]!

  """A list of `BigInt` objects."""
  nodes: [BigInt]!

  """The count of *all* `BigInt` you could get from the connection."""
  totalCount: Int!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteRoleMenuByMessageId` mutation."""
input DeleteRoleMenuByMessageIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  messageId: BigInt!
}

"""All input for the `deleteRoleMenu` mutation."""
input DeleteRoleMenuInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoleMenu` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RoleMenu` mutation."""
type DeleteRoleMenuPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoleMenuId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RoleMenu` that was deleted by this mutation."""
  roleMenu: RoleMenu

  """An edge for our `RoleMenu`. May be used by Relay 1."""
  roleMenuEdge(
    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusEdge
}

"""All input for the `graphql` mutation."""
input GraphqlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  extensions: JSON
  operationName: String
  query: String
  variables: JSON
}

"""The output of our `graphql` mutation."""
type GraphqlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type GuildConfig implements Node {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild
  data: JSON!
  disabledChannels: [BigInt]
  id: BigInt!
  inviteGuard: Boolean!
  joinMsg: String
  joinMsgEnabled: Boolean!
  joinReact: String
  leaveMsg: String
  leaveMsgEnabled: Boolean!
  logMember: BigInt
  logMemberEnabled: Boolean!
  logMod: BigInt
  logModEnabled: Boolean!
  logMsg: BigInt
  logMsgEnabled: Boolean!
  maxMention: Int
  msgChannel: BigInt
  muteDmEnabled: Boolean!
  muteDmText: String
  muteDuration: BigInt
  muteRole: BigInt

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  prefix: String
  roleChannel: BigInt
  roleConfig: JSON
  roleEnabled: Boolean!
  warnDmEnabled: Boolean!
  warnDmText: String
}

"""
A condition to be used against `GuildConfig` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GuildConfigCondition {
  """Checks for equality with the object’s `data` field."""
  data: JSON

  """Checks for equality with the object’s `disabledChannels` field."""
  disabledChannels: [BigInt]

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `inviteGuard` field."""
  inviteGuard: Boolean

  """Checks for equality with the object’s `joinMsg` field."""
  joinMsg: String

  """Checks for equality with the object’s `joinMsgEnabled` field."""
  joinMsgEnabled: Boolean

  """Checks for equality with the object’s `joinReact` field."""
  joinReact: String

  """Checks for equality with the object’s `leaveMsg` field."""
  leaveMsg: String

  """Checks for equality with the object’s `leaveMsgEnabled` field."""
  leaveMsgEnabled: Boolean

  """Checks for equality with the object’s `logMember` field."""
  logMember: BigInt

  """Checks for equality with the object’s `logMemberEnabled` field."""
  logMemberEnabled: Boolean

  """Checks for equality with the object’s `logMod` field."""
  logMod: BigInt

  """Checks for equality with the object’s `logModEnabled` field."""
  logModEnabled: Boolean

  """Checks for equality with the object’s `logMsg` field."""
  logMsg: BigInt

  """Checks for equality with the object’s `logMsgEnabled` field."""
  logMsgEnabled: Boolean

  """Checks for equality with the object’s `maxMention` field."""
  maxMention: Int

  """Checks for equality with the object’s `msgChannel` field."""
  msgChannel: BigInt

  """Checks for equality with the object’s `muteDmEnabled` field."""
  muteDmEnabled: Boolean

  """Checks for equality with the object’s `muteDmText` field."""
  muteDmText: String

  """Checks for equality with the object’s `muteDuration` field."""
  muteDuration: BigInt

  """Checks for equality with the object’s `muteRole` field."""
  muteRole: BigInt

  """Checks for equality with the object’s `prefix` field."""
  prefix: String

  """Checks for equality with the object’s `roleChannel` field."""
  roleChannel: BigInt

  """Checks for equality with the object’s `roleConfig` field."""
  roleConfig: JSON

  """Checks for equality with the object’s `roleEnabled` field."""
  roleEnabled: Boolean

  """Checks for equality with the object’s `warnDmEnabled` field."""
  warnDmEnabled: Boolean

  """Checks for equality with the object’s `warnDmText` field."""
  warnDmText: String
}

"""
Represents an update to a `GuildConfig`. Fields that are set will be updated.
"""
input GuildConfigPatch {
  disabledChannels: [BigInt]
  inviteGuard: Boolean
  joinMsg: String
  joinMsgEnabled: Boolean
  joinReact: String
  leaveMsg: String
  leaveMsgEnabled: Boolean
  logMember: BigInt
  logMemberEnabled: Boolean
  logMod: BigInt
  logModEnabled: Boolean
  logMsg: BigInt
  logMsgEnabled: Boolean
  maxMention: Int
  msgChannel: BigInt
  muteDmEnabled: Boolean
  muteDmText: String
  muteDuration: BigInt
  muteRole: BigInt
  prefix: String
  roleChannel: BigInt
  roleConfig: JSON
  roleEnabled: Boolean
  warnDmEnabled: Boolean
  warnDmText: String
}

"""A connection to a list of `GuildConfig` values."""
type GuildConfigsConnection {
  """
  A list of edges which contains the `GuildConfig` and cursor to aid in pagination.
  """
  edges: [GuildConfigsEdge!]!

  """A list of `GuildConfig` objects."""
  nodes: [GuildConfig!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GuildConfig` you could get from the connection."""
  totalCount: Int!
}

"""A `GuildConfig` edge in the connection."""
type GuildConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GuildConfig` at the end of the edge."""
  node: GuildConfig!
}

"""Methods to use when ordering `GuildConfig`."""
enum GuildConfigsOrderBy {
  DATA_ASC
  DATA_DESC
  DISABLED_CHANNELS_ASC
  DISABLED_CHANNELS_DESC
  ID_ASC
  ID_DESC
  INVITE_GUARD_ASC
  INVITE_GUARD_DESC
  JOIN_MSG_ASC
  JOIN_MSG_DESC
  JOIN_MSG_ENABLED_ASC
  JOIN_MSG_ENABLED_DESC
  JOIN_REACT_ASC
  JOIN_REACT_DESC
  LEAVE_MSG_ASC
  LEAVE_MSG_DESC
  LEAVE_MSG_ENABLED_ASC
  LEAVE_MSG_ENABLED_DESC
  LOG_MEMBER_ASC
  LOG_MEMBER_DESC
  LOG_MEMBER_ENABLED_ASC
  LOG_MEMBER_ENABLED_DESC
  LOG_MOD_ASC
  LOG_MOD_DESC
  LOG_MOD_ENABLED_ASC
  LOG_MOD_ENABLED_DESC
  LOG_MSG_ASC
  LOG_MSG_DESC
  LOG_MSG_ENABLED_ASC
  LOG_MSG_ENABLED_DESC
  MAX_MENTION_ASC
  MAX_MENTION_DESC
  MSG_CHANNEL_ASC
  MSG_CHANNEL_DESC
  MUTE_DM_ENABLED_ASC
  MUTE_DM_ENABLED_DESC
  MUTE_DM_TEXT_ASC
  MUTE_DM_TEXT_DESC
  MUTE_DURATION_ASC
  MUTE_DURATION_DESC
  MUTE_ROLE_ASC
  MUTE_ROLE_DESC
  NATURAL
  PREFIX_ASC
  PREFIX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_CHANNEL_ASC
  ROLE_CHANNEL_DESC
  ROLE_CONFIG_ASC
  ROLE_CONFIG_DESC
  ROLE_ENABLED_ASC
  ROLE_ENABLED_DESC
  WARN_DM_ENABLED_ASC
  WARN_DM_ENABLED_DESC
  WARN_DM_TEXT_ASC
  WARN_DM_TEXT_DESC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum LevelTimeframe {
  ALL_TIME
  DAY
  MONTH
  WEEK
}

"""All input for the `logout` mutation."""
input LogoutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `logout` mutation."""
type LogoutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `RoleMenu`."""
  createRoleMenu(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoleMenuInput!
  ): CreateRoleMenuPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Deletes a single `RoleMenu` using its globally unique id."""
  deleteRoleMenu(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleMenuInput!
  ): DeleteRoleMenuPayload

  """Deletes a single `RoleMenu` using a unique key."""
  deleteRoleMenuByMessageId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleMenuByMessageIdInput!
  ): DeleteRoleMenuPayload
  graphql(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GraphqlInput!
  ): GraphqlPayload
  logout(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LogoutInput!
  ): LogoutPayload

  """
  Updates a single `GuildConfig` using its globally unique id and a patch.
  """
  updateGuildConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuildConfigInput!
  ): UpdateGuildConfigPayload

  """Updates a single `GuildConfig` using a unique key and a patch."""
  updateGuildConfigById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuildConfigByIdInput!
  ): UpdateGuildConfigPayload

  """Updates a single `RoleMenu` using its globally unique id and a patch."""
  updateRoleMenu(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleMenuInput!
  ): UpdateRoleMenuPayload

  """Updates a single `RoleMenu` using a unique key and a patch."""
  updateRoleMenuByMessageId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleMenuByMessageIdInput!
  ): UpdateRoleMenuPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `BotStat`."""
  allBotStats(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BotStatCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BotStat`."""
    orderBy: [BotStatsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotStatsConnection

  """Reads and enables pagination through a set of `GuildConfig`."""
  allGuildConfigs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuildConfigCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsConnection

  """Reads and enables pagination through a set of `RoleMenu`."""
  allRoleMenus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleMenuCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusConnection

  """Reads and enables pagination through a set of `Tag`."""
  allTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection

  """Reads and enables pagination through a set of `WebUserGuild`."""
  allWebUserGuilds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsConnection

  """Reads and enables pagination through a set of `WebUser`."""
  allWebUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUser`."""
    orderBy: [WebUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUsersConnection

  """Reads a single `BotStat` using its globally unique `ID`."""
  botStat(
    """The globally unique `ID` to be used in selecting a single `BotStat`."""
    nodeId: ID!
  ): BotStat
  botStatByNameAndCategory(category: String!, name: String!): BotStat

  """Reads a single `CachedGuild` using its globally unique `ID`."""
  cachedGuild(
    """
    The globally unique `ID` to be used in selecting a single `CachedGuild`.
    """
    nodeId: ID!
  ): CachedGuild
  cachedGuildById(id: BigInt!): CachedGuild

  """Reads a single `CachedUser` using its globally unique `ID`."""
  cachedUser(
    """
    The globally unique `ID` to be used in selecting a single `CachedUser`.
    """
    nodeId: ID!
  ): CachedUser
  cachedUserById(id: BigInt!): CachedUser

  """Handy method to get the current session ID."""
  currentSessionId: UUID

  """The currently logged in user (or null if not logged in)."""
  currentUser: WebUser
  currentUserDiscordId: BigInt

  """
  Handy method to get the current user ID for use in RLS policies, etc; in GraphQL, use `currentUser{id}` instead.
  """
  currentUserId: BigInt
  currentUserManagedGuildIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserManagedGuildIdsConnection

  """Reads a single `GuildConfig` using its globally unique `ID`."""
  guildConfig(
    """
    The globally unique `ID` to be used in selecting a single `GuildConfig`.
    """
    nodeId: ID!
  ): GuildConfig
  guildConfigById(id: BigInt!): GuildConfig

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `RoleMenu` using its globally unique `ID`."""
  roleMenu(
    """The globally unique `ID` to be used in selecting a single `RoleMenu`."""
    nodeId: ID!
  ): RoleMenu
  roleMenuByMessageId(messageId: BigInt!): RoleMenu

  """Reads a single `Tag` using its globally unique `ID`."""
  tag(
    """The globally unique `ID` to be used in selecting a single `Tag`."""
    nodeId: ID!
  ): Tag
  tagByGuildIdAndTagName(guildId: BigInt!, tagName: String!): Tag

  """
  Leaderboard for given timeframe and optional guild. If guild is null, it is the global leaderboard
  """
  timeframeUserLevels(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int
    guildId: BigInt

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    timeframe: LevelTimeframe
  ): TimeframeUserLevelsConnection

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  userById(id: BigInt!): User

  """Reads a single `UserLevel` using its globally unique `ID`."""
  userLevel(
    """The globally unique `ID` to be used in selecting a single `UserLevel`."""
    nodeId: ID!
  ): UserLevel
  userLevelByUserIdAndGuildId(guildId: BigInt!, userId: BigInt!): UserLevel

  """Reads a single `WebUser` using its globally unique `ID`."""
  webUser(
    """The globally unique `ID` to be used in selecting a single `WebUser`."""
    nodeId: ID!
  ): WebUser
  webUserById(id: BigInt!): WebUser

  """Reads a single `WebUserGuild` using its globally unique `ID`."""
  webUserGuild(
    """
    The globally unique `ID` to be used in selecting a single `WebUserGuild`.
    """
    nodeId: ID!
  ): WebUserGuild
  webUserGuildByUserIdAndGuildId(guildId: BigInt!, userId: BigInt!): WebUserGuild
}

type RoleMenu implements Node {
  channelId: BigInt!
  editorId: BigInt
  guildId: BigInt!
  messageId: BigInt!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `RoleMenu` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RoleMenuCondition {
  """Checks for equality with the object’s `channelId` field."""
  channelId: BigInt

  """Checks for equality with the object’s `editorId` field."""
  editorId: BigInt

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `messageId` field."""
  messageId: BigInt
}

"""An input for mutations affecting `RoleMenu`"""
input RoleMenuInput {
  channelId: BigInt!
  editorId: BigInt
  guildId: BigInt!
  messageId: BigInt!
}

"""
Represents an update to a `RoleMenu`. Fields that are set will be updated.
"""
input RoleMenuPatch {
  channelId: BigInt
  editorId: BigInt
  guildId: BigInt
  messageId: BigInt
}

"""A connection to a list of `RoleMenu` values."""
type RoleMenusConnection {
  """
  A list of edges which contains the `RoleMenu` and cursor to aid in pagination.
  """
  edges: [RoleMenusEdge!]!

  """A list of `RoleMenu` objects."""
  nodes: [RoleMenu!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RoleMenu` you could get from the connection."""
  totalCount: Int!
}

"""A `RoleMenu` edge in the connection."""
type RoleMenusEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoleMenu` at the end of the edge."""
  node: RoleMenu!
}

"""Methods to use when ordering `RoleMenu`."""
enum RoleMenusOrderBy {
  CHANNEL_ID_ASC
  CHANNEL_ID_DESC
  EDITOR_ID_ASC
  EDITOR_ID_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  MESSAGE_ID_ASC
  MESSAGE_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Tag implements Node {
  content: String!
  created: Datetime!
  guildId: BigInt!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  ownerId: BigInt!
  tagName: String!
  useCount: BigInt!
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: BigInt

  """Checks for equality with the object’s `tagName` field."""
  tagName: String

  """Checks for equality with the object’s `useCount` field."""
  useCount: BigInt
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """
  A list of edges which contains the `Tag` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """A list of `Tag` objects."""
  nodes: [Tag!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag!
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  CREATED_ASC
  CREATED_DESC
  GUILD_ID_ASC
  GUILD_ID_DESC
  NATURAL
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAG_NAME_ASC
  TAG_NAME_DESC
  USE_COUNT_ASC
  USE_COUNT_DESC
}

"""A `TimeframeUserLevelsRecord` edge in the connection."""
type TimeframeUserLevelEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TimeframeUserLevelsRecord` at the end of the edge."""
  node: TimeframeUserLevelsRecord!
}

"""A connection to a list of `TimeframeUserLevelsRecord` values."""
type TimeframeUserLevelsConnection {
  """
  A list of edges which contains the `TimeframeUserLevelsRecord` and cursor to aid in pagination.
  """
  edges: [TimeframeUserLevelEdge!]!

  """A list of `TimeframeUserLevelsRecord` objects."""
  nodes: [TimeframeUserLevelsRecord!]!

  """
  The count of *all* `TimeframeUserLevelsRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""The return type of our `timeframeUserLevels` query."""
type TimeframeUserLevelsRecord {
  avatarUrl: String
  currentLevel: BigInt
  discriminator: Int
  gainedLevels: BigInt
  nextLevelXpProgress: BigInt
  nextLevelXpRequired: BigInt
  userId: BigInt
  username: String
  xp: BigInt
  xpDiff: BigInt
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateGuildConfigById` mutation."""
input UpdateGuildConfigByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GuildConfig` being updated.
  """
  guildConfigPatch: GuildConfigPatch!
  id: BigInt!
}

"""All input for the `updateGuildConfig` mutation."""
input UpdateGuildConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GuildConfig` being updated.
  """
  guildConfigPatch: GuildConfigPatch!

  """
  The globally unique `ID` which will identify a single `GuildConfig` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `GuildConfig` mutation."""
type UpdateGuildConfigPayload {
  """Reads a single `CachedGuild` that is related to this `GuildConfig`."""
  cachedGuildById: CachedGuild

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GuildConfig` that was updated by this mutation."""
  guildConfig: GuildConfig

  """An edge for our `GuildConfig`. May be used by Relay 1."""
  guildConfigEdge(
    """The method to use when ordering `GuildConfig`."""
    orderBy: [GuildConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuildConfigsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateRoleMenuByMessageId` mutation."""
input UpdateRoleMenuByMessageIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  messageId: BigInt!

  """
  An object where the defined keys will be set on the `RoleMenu` being updated.
  """
  roleMenuPatch: RoleMenuPatch!
}

"""All input for the `updateRoleMenu` mutation."""
input UpdateRoleMenuInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoleMenu` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RoleMenu` being updated.
  """
  roleMenuPatch: RoleMenuPatch!
}

"""The output of our update `RoleMenu` mutation."""
type UpdateRoleMenuPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RoleMenu` that was updated by this mutation."""
  roleMenu: RoleMenu

  """An edge for our `RoleMenu`. May be used by Relay 1."""
  roleMenuEdge(
    """The method to use when ordering `RoleMenu`."""
    orderBy: [RoleMenusOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoleMenusEdge
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  fishies: BigInt!
  id: BigInt!
  isPatron: Boolean!
  lastFishies: Datetime
  lastRep: Datetime
  lastfmUsername: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  patronEmoji: String
  profileData: JSON
  rep: BigInt!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `fishies` field."""
  fishies: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isPatron` field."""
  isPatron: Boolean

  """Checks for equality with the object’s `lastFishies` field."""
  lastFishies: Datetime

  """Checks for equality with the object’s `lastRep` field."""
  lastRep: Datetime

  """Checks for equality with the object’s `lastfmUsername` field."""
  lastfmUsername: String

  """Checks for equality with the object’s `patronEmoji` field."""
  patronEmoji: String

  """Checks for equality with the object’s `profileData` field."""
  profileData: JSON

  """Checks for equality with the object’s `rep` field."""
  rep: BigInt
}

"""An input for mutations affecting `User`"""
input UserInput {
  fishies: BigInt!
  id: BigInt!
  isPatron: Boolean!
  lastFishies: Datetime
  lastRep: Datetime
  lastfmUsername: String
  patronEmoji: String
  profileData: JSON
  rep: BigInt!
}

type UserLevel implements Node {
  guildId: BigInt!
  lastMsg: Datetime!
  msgAllTime: BigInt!
  msgDay: BigInt!
  msgMonth: BigInt!
  msgWeek: BigInt!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: BigInt!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  fishies: BigInt
  id: BigInt
  isPatron: Boolean
  lastFishies: Datetime
  lastRep: Datetime
  lastfmUsername: String
  patronEmoji: String
  profileData: JSON
  rep: BigInt
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  FISHIES_ASC
  FISHIES_DESC
  ID_ASC
  ID_DESC
  IS_PATRON_ASC
  IS_PATRON_DESC
  LASTFM_USERNAME_ASC
  LASTFM_USERNAME_DESC
  LAST_FISHIES_ASC
  LAST_FISHIES_DESC
  LAST_REP_ASC
  LAST_REP_DESC
  NATURAL
  PATRON_EMOJI_ASC
  PATRON_EMOJI_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROFILE_DATA_ASC
  PROFILE_DATA_DESC
  REP_ASC
  REP_DESC
}

"""A user who can log in to the application."""
type WebUser implements Node {
  """Discord avatar hash. Null if user does not have one."""
  avatar: String

  """
  First registered on the application. Is not when a user created their Discord account.
  """
  createdAt: Datetime!

  """Additional profile details extracted from Discord oauth"""
  details: JSON!

  """Discord disciminator of the user."""
  discriminator: Int!

  """Unique identifier for the user. This should match their Discord ID."""
  id: BigInt!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """Discord username of the user."""
  username: String!

  """Reads and enables pagination through a set of `WebUserGuild`."""
  webUserGuildsByUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WebUserGuildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WebUserGuild`."""
    orderBy: [WebUserGuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WebUserGuildsConnection!
}

"""
A condition to be used against `WebUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input WebUserCondition {
  """Checks for equality with the object’s `avatar` field."""
  avatar: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `details` field."""
  details: JSON

  """Checks for equality with the object’s `discriminator` field."""
  discriminator: Int

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isAdmin` field."""
  isAdmin: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `username` field."""
  username: String
}

type WebUserGuild implements Node {
  """Reads a single `CachedGuild` that is related to this `WebUserGuild`."""
  cachedGuildByGuildId: CachedGuild
  guildId: BigInt!
  manageGuild: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  owner: Boolean!
  permissions: BigInt!
  userId: BigInt!

  """Reads a single `WebUser` that is related to this `WebUserGuild`."""
  webUserByUserId: WebUser
}

"""
A condition to be used against `WebUserGuild` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input WebUserGuildCondition {
  """Checks for equality with the object’s `guildId` field."""
  guildId: BigInt

  """Checks for equality with the object’s `manageGuild` field."""
  manageGuild: Boolean

  """Checks for equality with the object’s `owner` field."""
  owner: Boolean

  """Checks for equality with the object’s `permissions` field."""
  permissions: BigInt

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

"""A connection to a list of `WebUserGuild` values."""
type WebUserGuildsConnection {
  """
  A list of edges which contains the `WebUserGuild` and cursor to aid in pagination.
  """
  edges: [WebUserGuildsEdge!]!

  """A list of `WebUserGuild` objects."""
  nodes: [WebUserGuild!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebUserGuild` you could get from the connection."""
  totalCount: Int!
}

"""A `WebUserGuild` edge in the connection."""
type WebUserGuildsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebUserGuild` at the end of the edge."""
  node: WebUserGuild!
}

"""Methods to use when ordering `WebUserGuild`."""
enum WebUserGuildsOrderBy {
  GUILD_ID_ASC
  GUILD_ID_DESC
  MANAGE_GUILD_ASC
  MANAGE_GUILD_DESC
  NATURAL
  OWNER_ASC
  OWNER_DESC
  PERMISSIONS_ASC
  PERMISSIONS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""A connection to a list of `WebUser` values."""
type WebUsersConnection {
  """
  A list of edges which contains the `WebUser` and cursor to aid in pagination.
  """
  edges: [WebUsersEdge!]!

  """A list of `WebUser` objects."""
  nodes: [WebUser!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WebUser` you could get from the connection."""
  totalCount: Int!
}

"""A `WebUser` edge in the connection."""
type WebUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WebUser` at the end of the edge."""
  node: WebUser!
}

"""Methods to use when ordering `WebUser`."""
enum WebUsersOrderBy {
  AVATAR_ASC
  AVATAR_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DETAILS_ASC
  DETAILS_DESC
  DISCRIMINATOR_ASC
  DISCRIMINATOR_DESC
  ID_ASC
  ID_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
}
